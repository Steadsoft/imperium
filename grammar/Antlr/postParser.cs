//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Post.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PostParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, COMMENT=21, LINE_COMMENT=22, WS=23, NEWLINE=24, 
		TAB=25, BYTE_ORDER_MARK=26, CALL=27, GOTO=28, GO=29, TO=30, PROCEDURE=31, 
		PROC=32, END=33, DECLARE=34, ARGUMENT=35, DEFINE=36, BINARY=37, DECIMAL=38, 
		AUTOMATIC=39, BUILTIN=40, INTRINSIC=41, STATIC=42, VARIABLE=43, BASED=44, 
		DEFINED=45, INTERNAL=46, EXTERNAL=47, RETURN=48, IF=49, THEN=50, ELSE=51, 
		ELIF=52, RETURNS=53, POINTER=54, BIT=55, CHARACTER=56, ENTRY=57, FIXED=58, 
		FLOAT=59, OFFSET=60, STRING=61, VARYING=62, COROUTINE=63, COFUNCTION=64, 
		LOOP=65, WHILE=66, UNTIL=67, ENDLOOP=68, RELOOP=69, BASE_B=70, BASE_O=71, 
		BASE_D=72, BASE_H=73, FRAC_B=74, FRAC_D=75, FRAC_O=76, FRAC_H=77, IDENTIFIER=78, 
		BINARY_PATTERN=79, OCTAL_PATTERN=80, HEXADECIMAL_PATTERN=81, DECIMAL_PATTERN=82, 
		LSEP=83, BIN=84, OCT=85, DEC=86, HEX=87, ARROW=88, DOT=89, COMMA=90, LPAR=91, 
		RPAR=92, LBRACK=93, RBRACK=94, LBRACE=95, RBRACE=96, EQUALS=97, TIMES=98, 
		DIVIDE=99, PLUS=100, MINUS=101, SEMICOLON=102, POWER=103, COLON=104, DQUOTE=105, 
		QUOTE=106, QMARK=107;
	public const int
		RULE_translation_unit = 0, RULE_procedure_stmt = 1, RULE_stmt_block = 2, 
		RULE_terminator = 3, RULE_label_stmt = 4, RULE_nonexecutable_stmt = 5, 
		RULE_executable_stmt = 6, RULE_preprocessor_stmt = 7, RULE_assign_stmt = 8, 
		RULE_reference = 9, RULE_arguments = 10, RULE_arguments_list = 11, RULE_basic_reference = 12, 
		RULE_structure_qualification = 13, RULE_structure_qualification_list = 14, 
		RULE_subscript = 15, RULE_subscript_commalist = 16, RULE_expression = 17, 
		RULE_expression_9 = 18, RULE_expression_8 = 19, RULE_expression_7 = 20, 
		RULE_expression_6 = 21, RULE_expression_5 = 22, RULE_expression_4 = 23, 
		RULE_expression_3 = 24, RULE_expression_2 = 25, RULE_expression_1 = 26, 
		RULE_prefix_expression = 27, RULE_parenthesized_expression = 28, RULE_primitive_expression = 29, 
		RULE_prefix_operator = 30, RULE_comparison_operator = 31, RULE_shift_operator = 32, 
		RULE_identifier = 33, RULE_keyword = 34, RULE_call_stmt = 35, RULE_goto_stmt = 36, 
		RULE_end_stmt = 37, RULE_endloop_stmt = 38, RULE_reloop_stmt = 39, RULE_declare_stmt = 40, 
		RULE_type_info = 41, RULE_dimension_suffix = 42, RULE_bound_pair = 43, 
		RULE_bound_pair_commalist = 44, RULE_lower_bound = 45, RULE_upper_bound = 46, 
		RULE_attribute = 47, RULE_data_attribute = 48, RULE_precision = 49, RULE_number_of_digits = 50, 
		RULE_scale_factor = 51, RULE_max_length = 52, RULE_based = 53, RULE_defined = 54, 
		RULE_entry_information = 55, RULE_coprocedure_specifier = 56, RULE_parameter_name_commalist = 57, 
		RULE_returns_descriptor = 58, RULE_return_stmt = 59, RULE_if_stmt = 60, 
		RULE_then_clause = 61, RULE_else_clause = 62, RULE_elif_clause = 63, RULE_loop_stmt = 64, 
		RULE_while_option = 65, RULE_until_option = 66, RULE_define_stmt = 67, 
		RULE_numeric_literal = 68, RULE_hexadecimal_literal = 69, RULE_octal_literal = 70, 
		RULE_decimal_literal = 71, RULE_binary_literal = 72;
	public static readonly string[] ruleNames = {
		"translation_unit", "procedure_stmt", "stmt_block", "terminator", "label_stmt", 
		"nonexecutable_stmt", "executable_stmt", "preprocessor_stmt", "assign_stmt", 
		"reference", "arguments", "arguments_list", "basic_reference", "structure_qualification", 
		"structure_qualification_list", "subscript", "subscript_commalist", "expression", 
		"expression_9", "expression_8", "expression_7", "expression_6", "expression_5", 
		"expression_4", "expression_3", "expression_2", "expression_1", "prefix_expression", 
		"parenthesized_expression", "primitive_expression", "prefix_operator", 
		"comparison_operator", "shift_operator", "identifier", "keyword", "call_stmt", 
		"goto_stmt", "end_stmt", "endloop_stmt", "reloop_stmt", "declare_stmt", 
		"type_info", "dimension_suffix", "bound_pair", "bound_pair_commalist", 
		"lower_bound", "upper_bound", "attribute", "data_attribute", "precision", 
		"number_of_digits", "scale_factor", "max_length", "based", "defined", 
		"entry_information", "coprocedure_specifier", "parameter_name_commalist", 
		"returns_descriptor", "return_stmt", "if_stmt", "then_clause", "else_clause", 
		"elif_clause", "loop_stmt", "while_option", "until_option", "define_stmt", 
		"numeric_literal", "hexadecimal_literal", "octal_literal", "decimal_literal", 
		"binary_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'%'", "'include'", "'.inc'", "'?|'", "'?&'", "'|'", "'~'", "'&'", 
		"'||'", "'>'", "'>='", "'<'", "'<='", "'~>'", "'~='", "'~<'", "'>>'", 
		"'<<'", "'>>>'", "'<<<'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'->'", 
		"'.'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'*'", 
		"'/'", "'+'", "'-'", "';'", "'**'", "':'", "'\"'", "'''", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "COMMENT", "LINE_COMMENT", 
		"WS", "NEWLINE", "TAB", "BYTE_ORDER_MARK", "CALL", "GOTO", "GO", "TO", 
		"PROCEDURE", "PROC", "END", "DECLARE", "ARGUMENT", "DEFINE", "BINARY", 
		"DECIMAL", "AUTOMATIC", "BUILTIN", "INTRINSIC", "STATIC", "VARIABLE", 
		"BASED", "DEFINED", "INTERNAL", "EXTERNAL", "RETURN", "IF", "THEN", "ELSE", 
		"ELIF", "RETURNS", "POINTER", "BIT", "CHARACTER", "ENTRY", "FIXED", "FLOAT", 
		"OFFSET", "STRING", "VARYING", "COROUTINE", "COFUNCTION", "LOOP", "WHILE", 
		"UNTIL", "ENDLOOP", "RELOOP", "BASE_B", "BASE_O", "BASE_D", "BASE_H", 
		"FRAC_B", "FRAC_D", "FRAC_O", "FRAC_H", "IDENTIFIER", "BINARY_PATTERN", 
		"OCTAL_PATTERN", "HEXADECIMAL_PATTERN", "DECIMAL_PATTERN", "LSEP", "BIN", 
		"OCT", "DEC", "HEX", "ARROW", "DOT", "COMMA", "LPAR", "RPAR", "LBRACK", 
		"RBRACK", "LBRACE", "RBRACE", "EQUALS", "TIMES", "DIVIDE", "PLUS", "MINUS", 
		"SEMICOLON", "POWER", "COLON", "DQUOTE", "QUOTE", "QMARK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Post.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PostParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PostParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PostParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Translation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_stmtContext procedure_stmt() {
			return GetRuleContext<Procedure_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(PostParser.BYTE_ORDER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_stmtContext preprocessor_stmt() {
			return GetRuleContext<Preprocessor_stmtContext>(0);
		}
		public Translation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterTranslation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitTranslation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Translation_unitContext translation_unit() {
		Translation_unitContext _localctx = new Translation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 146;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 149;
				preprocessor_stmt();
				}
			}

			State = 152;
			procedure_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entry_informationContext entry_information() {
			return GetRuleContext<Entry_informationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_blockContext stmt_block() {
			return GetRuleContext<Stmt_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		public Procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterProcedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitProcedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_stmtContext procedure_stmt() {
		Procedure_stmtContext _localctx = new Procedure_stmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_procedure_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(PROCEDURE);
			State = 155;
			identifier();
			State = 156;
			entry_information();
			State = 157;
			stmt_block();
			State = 158;
			end_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Nonexecutable_stmtContext[] nonexecutable_stmt() {
			return GetRuleContexts<Nonexecutable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nonexecutable_stmtContext nonexecutable_stmt(int i) {
			return GetRuleContext<Nonexecutable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		public Stmt_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterStmt_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitStmt_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_blockContext stmt_block() {
		Stmt_blockContext _localctx = new Stmt_blockContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt_block);
		try {
			int _alt;
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 160;
						nonexecutable_stmt();
						State = 161;
						terminator();
						}
						} 
					}
					State = 167;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 168;
						executable_stmt();
						State = 169;
						terminator();
						}
						} 
					}
					State = 175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				terminator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PostParser.SEMICOLON, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterTerminator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitTerminator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PostParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PostParser.RBRACE, 0); }
		public Label_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterLabel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitLabel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_stmtContext label_stmt() {
		Label_stmtContext _localctx = new Label_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_label_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(LBRACE);
			State = 182;
			identifier();
			State = 183;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonexecutable_stmtContext : ParserRuleContext {
		public Nonexecutable_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonexecutable_stmt; } }
	 
		public Nonexecutable_stmtContext() { }
		public virtual void CopyFrom(Nonexecutable_stmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PREContext : Nonexecutable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_stmtContext preprocessor_stmt() {
			return GetRuleContext<Preprocessor_stmtContext>(0);
		}
		public PREContext(Nonexecutable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPRE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPRE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPRE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DEFContext : Nonexecutable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Define_stmtContext define_stmt() {
			return GetRuleContext<Define_stmtContext>(0);
		}
		public DEFContext(Nonexecutable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDEF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDEF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDEF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DCLContext : Nonexecutable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declare_stmtContext declare_stmt() {
			return GetRuleContext<Declare_stmtContext>(0);
		}
		public DCLContext(Nonexecutable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDCL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDCL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nonexecutable_stmtContext nonexecutable_stmt() {
		Nonexecutable_stmtContext _localctx = new Nonexecutable_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_nonexecutable_stmt);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new PREContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				preprocessor_stmt();
				}
				break;
			case DECLARE:
			case ARGUMENT:
				_localctx = new DCLContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				declare_stmt();
				}
				break;
			case DEFINE:
				_localctx = new DEFContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 187;
				define_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Executable_stmtContext : ParserRuleContext {
		public Executable_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executable_stmt; } }
	 
		public Executable_stmtContext() { }
		public virtual void CopyFrom(Executable_stmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RETContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public RETContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterRET(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitRET(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRET(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CALLContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public CALLContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GOTOContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Goto_stmtContext goto_stmt() {
			return GetRuleContext<Goto_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public GOTOContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterGOTO(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitGOTO(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGOTO(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PROCContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_stmtContext procedure_stmt() {
			return GetRuleContext<Procedure_stmtContext>(0);
		}
		public PROCContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPROC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPROC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPROC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AGAINContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reloop_stmtContext reloop_stmt() {
			return GetRuleContext<Reloop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public AGAINContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterAGAIN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitAGAIN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAGAIN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOOPContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtContext loop_stmt() {
			return GetRuleContext<Loop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public LOOPContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterLOOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitLOOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOOP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LEAVEContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Endloop_stmtContext endloop_stmt() {
			return GetRuleContext<Endloop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public LEAVEContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterLEAVE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitLEAVE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLEAVE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ASSIGNContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_stmtContext assign_stmt() {
			return GetRuleContext<Assign_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public ASSIGNContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterASSIGN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitASSIGN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitASSIGN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IFContext : Executable_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_stmtContext label_stmt() {
			return GetRuleContext<Label_stmtContext>(0);
		}
		public IFContext(Executable_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Executable_stmtContext executable_stmt() {
		Executable_stmtContext _localctx = new Executable_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_executable_stmt);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new ASSIGNContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 190;
					label_stmt();
					}
				}

				State = 193;
				assign_stmt();
				}
				break;
			case 2:
				_localctx = new CALLContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 194;
					label_stmt();
					}
				}

				State = 197;
				call_stmt();
				}
				break;
			case 3:
				_localctx = new GOTOContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 198;
					label_stmt();
					}
				}

				State = 201;
				goto_stmt();
				}
				break;
			case 4:
				_localctx = new PROCContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 202;
				procedure_stmt();
				}
				break;
			case 5:
				_localctx = new RETContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 203;
					label_stmt();
					}
				}

				State = 206;
				return_stmt();
				}
				break;
			case 6:
				_localctx = new IFContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 207;
					label_stmt();
					}
				}

				State = 210;
				if_stmt();
				}
				break;
			case 7:
				_localctx = new LOOPContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 211;
					label_stmt();
					}
				}

				State = 214;
				loop_stmt();
				}
				break;
			case 8:
				_localctx = new LEAVEContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 215;
					label_stmt();
					}
				}

				State = 218;
				endloop_stmt();
				}
				break;
			case 9:
				_localctx = new AGAINContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 219;
					label_stmt();
					}
				}

				State = 222;
				reloop_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(PostParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(PostParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Preprocessor_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPreprocessor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPreprocessor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_stmtContext preprocessor_stmt() {
		Preprocessor_stmtContext _localctx = new Preprocessor_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_preprocessor_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(T__0);
			State = 226;
			Match(T__1);
			State = 227;
			Match(QUOTE);
			State = 228;
			identifier();
			State = 229;
			Match(T__2);
			State = 230;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(PostParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterAssign_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitAssign_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stmtContext assign_stmt() {
		Assign_stmtContext _localctx = new Assign_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_assign_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			reference(0);
			State = 233;
			Match(EQUALS);
			State = 234;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	 
		public ReferenceContext() { }
		public virtual void CopyFrom(ReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BASIC_REFContext : ReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public Basic_referenceContext basic_reference() {
			return GetRuleContext<Basic_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arguments_listContext arguments_list() {
			return GetRuleContext<Arguments_listContext>(0);
		}
		public BASIC_REFContext(ReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBASIC_REF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBASIC_REF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBASIC_REF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PTR_REFContext : ReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(PostParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Basic_referenceContext basic_reference() {
			return GetRuleContext<Basic_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arguments_listContext arguments_list() {
			return GetRuleContext<Arguments_listContext>(0);
		}
		public PTR_REFContext(ReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPTR_REF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPTR_REF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPTR_REF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BASIC_REFContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 237;
			basic_reference();
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 238;
				arguments_list();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PTR_REFContext(new ReferenceContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 241;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 242;
					Match(ARROW);
					State = 243;
					basic_reference();
					State = 245;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						State = 244;
						arguments_list();
						}
						break;
					}
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_commalistContext[] subscript_commalist() {
			return GetRuleContexts<Subscript_commalistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_commalistContext subscript_commalist(int i) {
			return GetRuleContext<Subscript_commalistContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(LPAR);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 253;
				subscript_commalist();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & -278039137091456L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 206293155903L) != 0 );
			State = 258;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arguments_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public Arguments_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterArguments_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitArguments_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arguments_listContext arguments_list() {
		Arguments_listContext _localctx = new Arguments_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_arguments_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 260;
					arguments();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_qualification_listContext structure_qualification_list() {
			return GetRuleContext<Structure_qualification_listContext>(0);
		}
		public Basic_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBasic_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBasic_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Basic_referenceContext basic_reference() {
		Basic_referenceContext _localctx = new Basic_referenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_basic_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 265;
				structure_qualification_list();
				}
				break;
			}
			State = 268;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_qualificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Structure_qualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_qualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterStructure_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitStructure_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructure_qualification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Structure_qualificationContext structure_qualification() {
		Structure_qualificationContext _localctx = new Structure_qualificationContext(Context, State);
		EnterRule(_localctx, 26, RULE_structure_qualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			identifier();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 271;
				arguments();
				}
			}

			State = 274;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_qualification_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Structure_qualificationContext[] structure_qualification() {
			return GetRuleContexts<Structure_qualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_qualificationContext structure_qualification(int i) {
			return GetRuleContext<Structure_qualificationContext>(i);
		}
		public Structure_qualification_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_qualification_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterStructure_qualification_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitStructure_qualification_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructure_qualification_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Structure_qualification_listContext structure_qualification_list() {
		Structure_qualification_listContext _localctx = new Structure_qualification_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_structure_qualification_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 276;
					structure_qualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 30, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_commalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostParser.COMMA, i);
		}
		public Subscript_commalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_commalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterSubscript_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitSubscript_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript_commalist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_commalistContext subscript_commalist() {
		Subscript_commalistContext _localctx = new Subscript_commalistContext(Context, State);
		EnterRule(_localctx, 32, RULE_subscript_commalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			subscript();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 284;
				Match(COMMA);
				State = 285;
				subscript();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_9Context expression_9() {
			return GetRuleContext<Expression_9Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 292;
			expression_9(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 294;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 295;
					Match(T__3);
					State = 296;
					expression_9(0);
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_9Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_8Context expression_8() {
			return GetRuleContext<Expression_8Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_9Context expression_9() {
			return GetRuleContext<Expression_9Context>(0);
		}
		public Expression_9Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_9; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_9(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_9Context expression_9() {
		return expression_9(0);
	}

	private Expression_9Context expression_9(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_9Context _localctx = new Expression_9Context(Context, _parentState);
		Expression_9Context _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression_9, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 303;
			expression_8(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_9Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_9);
					State = 305;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 306;
					Match(T__4);
					State = 307;
					expression_8(0);
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_8Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_7Context expression_7() {
			return GetRuleContext<Expression_7Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_8Context expression_8() {
			return GetRuleContext<Expression_8Context>(0);
		}
		public Expression_8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_8; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_8Context expression_8() {
		return expression_8(0);
	}

	private Expression_8Context expression_8(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_8Context _localctx = new Expression_8Context(Context, _parentState);
		Expression_8Context _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression_8, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 314;
			expression_7(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_8Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_8);
					State = 316;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 317;
					_la = TokenStream.LA(1);
					if ( !(_la==T__5 || _la==T__6) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 318;
					expression_7(0);
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_7Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_6Context expression_6() {
			return GetRuleContext<Expression_6Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_7Context expression_7() {
			return GetRuleContext<Expression_7Context>(0);
		}
		public Expression_7Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_7; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_7(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_7Context expression_7() {
		return expression_7(0);
	}

	private Expression_7Context expression_7(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_7Context _localctx = new Expression_7Context(Context, _parentState);
		Expression_7Context _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression_7, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 325;
			expression_6(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_7Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_7);
					State = 327;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 328;
					Match(T__7);
					State = 329;
					expression_6(0);
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_6Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_5Context expression_5() {
			return GetRuleContext<Expression_5Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_6Context expression_6() {
			return GetRuleContext<Expression_6Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Expression_6Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_6; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_6(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_6Context expression_6() {
		return expression_6(0);
	}

	private Expression_6Context expression_6(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_6Context _localctx = new Expression_6Context(Context, _parentState);
		Expression_6Context _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expression_6, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 336;
			expression_5(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_6Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_6);
					State = 338;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 339;
					comparison_operator();
					State = 340;
					expression_5(0);
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_5Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_4Context expression_4() {
			return GetRuleContext<Expression_4Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_5Context expression_5() {
			return GetRuleContext<Expression_5Context>(0);
		}
		public Expression_5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_5; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_5(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_5Context expression_5() {
		return expression_5(0);
	}

	private Expression_5Context expression_5(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_5Context _localctx = new Expression_5Context(Context, _parentState);
		Expression_5Context _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expression_5, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 348;
			expression_4(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_5Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_5);
					State = 350;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 351;
					Match(T__8);
					State = 352;
					expression_4(0);
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_3Context expression_3() {
			return GetRuleContext<Expression_3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_4Context expression_4() {
			return GetRuleContext<Expression_4Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostParser.MINUS, 0); }
		public Expression_4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_4Context expression_4() {
		return expression_4(0);
	}

	private Expression_4Context expression_4(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_4Context _localctx = new Expression_4Context(Context, _parentState);
		Expression_4Context _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression_4, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 359;
			expression_3(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_4Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_4);
					State = 361;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 362;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 363;
					expression_3(0);
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_2Context expression_2() {
			return GetRuleContext<Expression_2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_3Context expression_3() {
			return GetRuleContext<Expression_3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(PostParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(PostParser.DIVIDE, 0); }
		public Expression_3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_3Context expression_3() {
		return expression_3(0);
	}

	private Expression_3Context expression_3(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_3Context _localctx = new Expression_3Context(Context, _parentState);
		Expression_3Context _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expression_3, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 370;
			expression_2();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_3Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_3);
					State = 372;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 373;
					_la = TokenStream.LA(1);
					if ( !(_la==TIMES || _la==DIVIDE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 374;
					expression_2();
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_expressionContext prefix_expression() {
			return GetRuleContext<Prefix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_1Context expression_1() {
			return GetRuleContext<Expression_1Context>(0);
		}
		public Expression_2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_2Context expression_2() {
		Expression_2Context _localctx = new Expression_2Context(Context, State);
		EnterRule(_localctx, 50, RULE_expression_2);
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				primitive_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				prefix_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 382;
				parenthesized_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 383;
				expression_1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(PostParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_2Context expression_2() {
			return GetRuleContext<Expression_2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		public Expression_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterExpression_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitExpression_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_1Context expression_1() {
		Expression_1Context _localctx = new Expression_1Context(Context, State);
		EnterRule(_localctx, 52, RULE_expression_1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
			case BINARY_PATTERN:
			case OCTAL_PATTERN:
			case HEXADECIMAL_PATTERN:
			case DECIMAL_PATTERN:
				{
				State = 386;
				primitive_expression();
				}
				break;
			case LPAR:
				{
				State = 387;
				parenthesized_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 390;
			Match(POWER);
			State = 391;
			expression_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operatorContext prefix_operator() {
			return GetRuleContext<Prefix_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_2Context expression_2() {
			return GetRuleContext<Expression_2Context>(0);
		}
		public Prefix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPrefix_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPrefix_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_expressionContext prefix_expression() {
		Prefix_expressionContext _localctx = new Prefix_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_prefix_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			prefix_operator();
			State = 394;
			expression_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(LPAR);
			State = 397;
			expression(0);
			State = 398;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_primitive_expression);
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_PATTERN:
			case OCTAL_PATTERN:
			case HEXADECIMAL_PATTERN:
			case DECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				numeric_literal();
				}
				break;
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostParser.MINUS, 0); }
		public Prefix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_operatorContext prefix_operator() {
		Prefix_operatorContext _localctx = new Prefix_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_prefix_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(PostParser.EQUALS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 130048L) != 0 || _la==EQUALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_operatorContext : ParserRuleContext {
		public Shift_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_operatorContext shift_operator() {
		Shift_operatorContext _localctx = new Shift_operatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_shift_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1966080L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Identifier_IDENTIFIERContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PostParser.IDENTIFIER, 0); }
		public Identifier_IDENTIFIERContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterIdentifier_IDENTIFIER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitIdentifier_IDENTIFIER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_IDENTIFIER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KEYWDContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public KEYWDContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterKEYWD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitKEYWD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKEYWD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_identifier);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
				_localctx = new KEYWDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				keyword();
				}
				break;
			case IDENTIFIER:
				_localctx = new Identifier_IDENTIFIERContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(PostParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(PostParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(PostParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(PostParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PostParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(PostParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(PostParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT() { return GetToken(PostParser.ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(PostParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(PostParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(PostParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(PostParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(PostParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PostParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(PostParser.COFUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(PostParser.COROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(PostParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PostParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(PostParser.BUILTIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(PostParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDLOOP() { return GetToken(PostParser.ENDLOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOOP() { return GetToken(PostParser.RELOOP, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 68, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_la = TokenStream.LA(1);
			if ( !((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & 8796090950655L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterCall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitCall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_call_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(CALL);
			State = 417;
			reference(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(PostParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(PostParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostParser.TO, 0); }
		public Goto_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterGoto_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitGoto_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_stmtContext goto_stmt() {
		Goto_stmtContext _localctx = new Goto_stmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_goto_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO:
				{
				State = 419;
				Match(GOTO);
				}
				break;
			case GO:
				{
				State = 420;
				Match(GO);
				State = 421;
				Match(TO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 424;
			reference(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(PostParser.END, 0); }
		public End_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterEnd_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitEnd_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_stmtContext end_stmt() {
		End_stmtContext _localctx = new End_stmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_end_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endloop_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDLOOP() { return GetToken(PostParser.ENDLOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PostParser.IDENTIFIER, 0); }
		public Endloop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endloop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterEndloop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitEndloop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndloop_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Endloop_stmtContext endloop_stmt() {
		Endloop_stmtContext _localctx = new Endloop_stmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_endloop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(ENDLOOP);
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 429;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloop_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOOP() { return GetToken(PostParser.RELOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PostParser.IDENTIFIER, 0); }
		public Reloop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterReloop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitReloop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReloop_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reloop_stmtContext reloop_stmt() {
		Reloop_stmtContext _localctx = new Reloop_stmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_reloop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(RELOOP);
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 433;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_infoContext type_info() {
			return GetRuleContext<Type_infoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT() { return GetToken(PostParser.ARGUMENT, 0); }
		public Declare_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDeclare_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDeclare_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_stmtContext declare_stmt() {
		Declare_stmtContext _localctx = new Declare_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_declare_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			_la = TokenStream.LA(1);
			if ( !(_la==DECLARE || _la==ARGUMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 437;
			identifier();
			State = 438;
			type_info();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_infoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dimension_suffixContext dimension_suffix() {
			return GetRuleContext<Dimension_suffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Type_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_info; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterType_info(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitType_info(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_infoContext type_info() {
		Type_infoContext _localctx = new Type_infoContext(Context, State);
		EnterRule(_localctx, 82, RULE_type_info);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 440;
				dimension_suffix();
				}
			}

			State = 446;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 443;
					attribute();
					}
					} 
				}
				State = 448;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dimension_suffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bound_pair_commalistContext bound_pair_commalist() {
			return GetRuleContext<Bound_pair_commalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public Dimension_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDimension_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDimension_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension_suffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dimension_suffixContext dimension_suffix() {
		Dimension_suffixContext _localctx = new Dimension_suffixContext(Context, State);
		EnterRule(_localctx, 84, RULE_dimension_suffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(LPAR);
			State = 450;
			bound_pair_commalist();
			State = 451;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bound_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PostParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(PostParser.TIMES, 0); }
		public Bound_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bound_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBound_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBound_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBound_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bound_pairContext bound_pair() {
		Bound_pairContext _localctx = new Bound_pairContext(Context, State);
		EnterRule(_localctx, 86, RULE_bound_pair);
		try {
			State = 460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
			case BINARY_PATTERN:
			case OCTAL_PATTERN:
			case HEXADECIMAL_PATTERN:
			case DECIMAL_PATTERN:
			case LPAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 453;
					lower_bound();
					State = 454;
					Match(COLON);
					}
					break;
				}
				State = 458;
				upper_bound();
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bound_pair_commalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bound_pairContext[] bound_pair() {
			return GetRuleContexts<Bound_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bound_pairContext bound_pair(int i) {
			return GetRuleContext<Bound_pairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostParser.COMMA, i);
		}
		public Bound_pair_commalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bound_pair_commalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBound_pair_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBound_pair_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBound_pair_commalist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bound_pair_commalistContext bound_pair_commalist() {
		Bound_pair_commalistContext _localctx = new Bound_pair_commalistContext(Context, State);
		EnterRule(_localctx, 88, RULE_bound_pair_commalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			bound_pair();
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 463;
				Match(COMMA);
				State = 464;
				bound_pair();
				}
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterLower_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitLower_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLower_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lower_boundContext lower_bound() {
		Lower_boundContext _localctx = new Lower_boundContext(Context, State);
		EnterRule(_localctx, 90, RULE_lower_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterUpper_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitUpper_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpper_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upper_boundContext upper_bound() {
		Upper_boundContext _localctx = new Upper_boundContext(Context, State);
		EnterRule(_localctx, 92, RULE_upper_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_attributeContext data_attribute() {
			return GetRuleContext<Data_attributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMATIC() { return GetToken(PostParser.AUTOMATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(PostParser.BUILTIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(PostParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(PostParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasedContext based() {
			return GetRuleContext<BasedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedContext defined() {
			return GetRuleContext<DefinedContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 94, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 474;
				data_attribute();
				}
				break;
			case 2:
				{
				State = 475;
				Match(AUTOMATIC);
				}
				break;
			case 3:
				{
				State = 476;
				Match(BUILTIN);
				}
				break;
			case 4:
				{
				State = 477;
				Match(STATIC);
				}
				break;
			case 5:
				{
				State = 478;
				Match(VARIABLE);
				}
				break;
			case 6:
				{
				State = 479;
				based();
				}
				break;
			case 7:
				{
				State = 480;
				defined();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_attributeContext : ParserRuleContext {
		public Data_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_attribute; } }
	 
		public Data_attributeContext() { }
		public virtual void CopyFrom(Data_attributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class INTRContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(PostParser.INTRINSIC, 0); }
		public INTRContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterINTR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitINTR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINTR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DECContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(PostParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public DECContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDEC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDEC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDEC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BINContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public BINContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBIN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBIN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBIN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CORContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(PostParser.COROUTINE, 0); }
		public CORContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterCOR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitCOR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CHARContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(PostParser.CHARACTER, 0); }
		public CHARContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterCHAR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitCHAR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCHAR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ENTContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(PostParser.ENTRY, 0); }
		public ENTContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterENT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitENT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitENT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BITContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Max_lengthContext max_length() {
			return GetRuleContext<Max_lengthContext>(0);
		}
		public BITContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBIT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBIT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBIT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OFFContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostParser.OFFSET, 0); }
		public OFFContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterOFF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitOFF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VNGContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostParser.VARYING, 0); }
		public VNGContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterVNG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitVNG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVNG(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PTRContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(PostParser.POINTER, 0); }
		public PTRContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPTR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPTR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPTR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FLTContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(PostParser.FLOAT, 0); }
		public FLTContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterFLT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitFLT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFLT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PostParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Max_lengthContext max_length() {
			return GetRuleContext<Max_lengthContext>(0);
		}
		public STRContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterSTR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitSTR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FIXContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(PostParser.FIXED, 0); }
		public FIXContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterFIX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitFIX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFIX(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDENTContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IDENTContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterIDENT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitIDENT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDENT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COFContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(PostParser.COFUNCTION, 0); }
		public COFContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterCOF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitCOF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BLTNContext : Data_attributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(PostParser.BUILTIN, 0); }
		public BLTNContext(Data_attributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBLTN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBLTN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBLTN(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_attributeContext data_attribute() {
		Data_attributeContext _localctx = new Data_attributeContext(Context, State);
		EnterRule(_localctx, 96, RULE_data_attribute);
		int _la;
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				_localctx = new BINContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 483;
				Match(BINARY);
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 484;
					precision();
					}
				}

				}
				}
				break;
			case 2:
				_localctx = new DECContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 487;
				Match(DECIMAL);
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 488;
					precision();
					}
				}

				}
				}
				break;
			case 3:
				_localctx = new PTRContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 491;
				Match(POINTER);
				}
				break;
			case 4:
				_localctx = new BITContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 492;
				Match(BIT);
				State = 493;
				max_length();
				}
				}
				break;
			case 5:
				_localctx = new CHARContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 494;
				Match(CHARACTER);
				}
				break;
			case 6:
				_localctx = new STRContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 495;
				Match(STRING);
				State = 496;
				max_length();
				}
				}
				break;
			case 7:
				_localctx = new ENTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 497;
				Match(ENTRY);
				}
				break;
			case 8:
				_localctx = new FIXContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 498;
				Match(FIXED);
				}
				break;
			case 9:
				_localctx = new FLTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 499;
				Match(FLOAT);
				}
				break;
			case 10:
				_localctx = new OFFContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 500;
				Match(OFFSET);
				}
				break;
			case 11:
				_localctx = new VNGContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 501;
				Match(VARYING);
				}
				break;
			case 12:
				_localctx = new CORContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 502;
				Match(COROUTINE);
				}
				break;
			case 13:
				_localctx = new COFContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 503;
				Match(COFUNCTION);
				}
				break;
			case 14:
				_localctx = new BLTNContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 504;
				Match(BUILTIN);
				}
				break;
			case 15:
				_localctx = new INTRContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 505;
				Match(INTRINSIC);
				}
				break;
			case 16:
				_localctx = new IDENTContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 506;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_of_digitsContext number_of_digits() {
			return GetRuleContext<Number_of_digitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scale_factorContext scale_factor() {
			return GetRuleContext<Scale_factorContext>(0);
		}
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 98, RULE_precision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(LPAR);
			State = 510;
			number_of_digits();
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 511;
				Match(COMMA);
				State = 512;
				scale_factor();
				}
			}

			State = 515;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_of_digitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_literalContext decimal_literal() {
			return GetRuleContext<Decimal_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Number_of_digitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_of_digits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterNumber_of_digits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitNumber_of_digits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_of_digits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_of_digitsContext number_of_digits() {
		Number_of_digitsContext _localctx = new Number_of_digitsContext(Context, State);
		EnterRule(_localctx, 100, RULE_number_of_digits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_PATTERN:
				{
				State = 517;
				decimal_literal();
				}
				break;
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
				{
				State = 518;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scale_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_literalContext decimal_literal() {
			return GetRuleContext<Decimal_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Scale_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scale_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterScale_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitScale_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScale_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scale_factorContext scale_factor() {
		Scale_factorContext _localctx = new Scale_factorContext(Context, State);
		EnterRule(_localctx, 102, RULE_scale_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_PATTERN:
				{
				State = 521;
				decimal_literal();
				}
				break;
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
				{
				State = 522;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Max_lengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_literalContext decimal_literal() {
			return GetRuleContext<Decimal_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Max_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_max_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterMax_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitMax_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMax_length(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Max_lengthContext max_length() {
		Max_lengthContext _localctx = new Max_lengthContext(Context, State);
		EnterRule(_localctx, 104, RULE_max_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(LPAR);
			State = 528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_PATTERN:
				{
				State = 526;
				decimal_literal();
				}
				break;
			case CALL:
			case GOTO:
			case GO:
			case TO:
			case PROCEDURE:
			case PROC:
			case END:
			case DECLARE:
			case ARGUMENT:
			case DEFINE:
			case BUILTIN:
			case INTRINSIC:
			case RETURN:
			case IF:
			case THEN:
			case ELSE:
			case ELIF:
			case RETURNS:
			case POINTER:
			case BIT:
			case CHARACTER:
			case ENTRY:
			case FIXED:
			case FLOAT:
			case OFFSET:
			case STRING:
			case VARYING:
			case COROUTINE:
			case COFUNCTION:
			case LOOP:
			case WHILE:
			case UNTIL:
			case ENDLOOP:
			case RELOOP:
			case IDENTIFIER:
				{
				State = 527;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 530;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(PostParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public BasedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_based; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBased(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBased(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBased(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasedContext based() {
		BasedContext _localctx = new BasedContext(Context, State);
		EnterRule(_localctx, 106, RULE_based);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(BASED);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 533;
				Match(LPAR);
				State = 534;
				reference(0);
				State = 535;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED() { return GetToken(PostParser.DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public DefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedContext defined() {
		DefinedContext _localctx = new DefinedContext(Context, State);
		EnterRule(_localctx, 108, RULE_defined);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(DEFINED);
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 540;
				Match(LPAR);
				State = 541;
				reference(0);
				State = 542;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entry_informationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_name_commalistContext parameter_name_commalist() {
			return GetRuleContext<Parameter_name_commalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returns_descriptorContext returns_descriptor() {
			return GetRuleContext<Returns_descriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coprocedure_specifierContext coprocedure_specifier() {
			return GetRuleContext<Coprocedure_specifierContext>(0);
		}
		public Entry_informationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry_information; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterEntry_information(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitEntry_information(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry_information(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entry_informationContext entry_information() {
		Entry_informationContext _localctx = new Entry_informationContext(Context, State);
		EnterRule(_localctx, 110, RULE_entry_information);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 546;
				parameter_name_commalist();
				}
			}

			State = 561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				{
				State = 550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 549;
					returns_descriptor();
					}
					break;
				}
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 552;
					coprocedure_specifier();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 555;
					coprocedure_specifier();
					}
					break;
				}
				State = 559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 558;
					returns_descriptor();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coprocedure_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(PostParser.COROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(PostParser.COFUNCTION, 0); }
		public Coprocedure_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coprocedure_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterCoprocedure_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitCoprocedure_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoprocedure_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coprocedure_specifierContext coprocedure_specifier() {
		Coprocedure_specifierContext _localctx = new Coprocedure_specifierContext(Context, State);
		EnterRule(_localctx, 112, RULE_coprocedure_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			_la = TokenStream.LA(1);
			if ( !(_la==COROUTINE || _la==COFUNCTION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_name_commalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostParser.COMMA, i);
		}
		public Parameter_name_commalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name_commalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterParameter_name_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitParameter_name_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name_commalist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_name_commalistContext parameter_name_commalist() {
		Parameter_name_commalistContext _localctx = new Parameter_name_commalistContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameter_name_commalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(LPAR);
			State = 566;
			identifier();
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 567;
				Match(COMMA);
				State = 568;
				identifier();
				}
				}
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 574;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returns_descriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_attributeContext data_attribute() {
			return GetRuleContext<Data_attributeContext>(0);
		}
		public Returns_descriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returns_descriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterReturns_descriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitReturns_descriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturns_descriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Returns_descriptorContext returns_descriptor() {
		Returns_descriptorContext _localctx = new Returns_descriptorContext(Context, State);
		EnterRule(_localctx, 116, RULE_returns_descriptor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(RETURNS);
			State = 577;
			data_attribute();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_return_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(RETURN);
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 580;
				Match(LPAR);
				State = 581;
				expression(0);
				State = 582;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Then_clauseContext then_clause() {
			return GetRuleContext<Then_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_clauseContext[] elif_clause() {
			return GetRuleContexts<Elif_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_clauseContext elif_clause(int i) {
			return GetRuleContext<Elif_clauseContext>(i);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_if_stmt);
		int _la;
		try {
			int _alt;
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586;
				then_clause();
				State = 590;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 587;
						executable_stmt();
						State = 588;
						terminator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 592;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 594;
					else_clause();
					}
				}

				State = 597;
				end_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 599;
				then_clause();
				State = 603;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 600;
						executable_stmt();
						State = 601;
						terminator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 605;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 607;
					elif_clause();
					}
					}
					State = 610;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ELIF );
				State = 612;
				end_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Then_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PostParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostParser.THEN, 0); }
		public Then_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterThen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitThen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThen_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Then_clauseContext then_clause() {
		Then_clauseContext _localctx = new Then_clauseContext(Context, State);
		EnterRule(_localctx, 122, RULE_then_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(IF);
			State = 617;
			expression(0);
			State = 618;
			Match(THEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 124, RULE_else_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(ELSE);
			State = 624;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 621;
					executable_stmt();
					State = 622;
					terminator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(PostParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public Elif_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterElif_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitElif_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_clauseContext elif_clause() {
		Elif_clauseContext _localctx = new Elif_clauseContext(Context, State);
		EnterRule(_localctx, 126, RULE_elif_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(ELIF);
			State = 629;
			expression(0);
			State = 630;
			Match(THEN);
			State = 634;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 631;
					executable_stmt();
					State = 632;
					terminator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 638;
				else_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_stmtContext : ParserRuleContext {
		public Loop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_stmt; } }
	 
		public Loop_stmtContext() { }
		public virtual void CopyFrom(Loop_stmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WHILE_UNTILContext : Loop_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(PostParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public While_optionContext while_option() {
			return GetRuleContext<While_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Until_optionContext until_option() {
			return GetRuleContext<Until_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public WHILE_UNTILContext(Loop_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterWHILE_UNTIL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitWHILE_UNTIL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWHILE_UNTIL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UNTIL_WHILEContext : Loop_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(PostParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Until_optionContext until_option() {
			return GetRuleContext<Until_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_optionContext while_option() {
			return GetRuleContext<While_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public UNTIL_WHILEContext(Loop_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterUNTIL_WHILE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitUNTIL_WHILE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUNTIL_WHILE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BASIC_LOOPContext : Loop_stmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(PostParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext[] executable_stmt() {
			return GetRuleContexts<Executable_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Executable_stmtContext executable_stmt(int i) {
			return GetRuleContext<Executable_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public BASIC_LOOPContext(Loop_stmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBASIC_LOOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBASIC_LOOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBASIC_LOOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_stmtContext loop_stmt() {
		Loop_stmtContext _localctx = new Loop_stmtContext(Context, State);
		EnterRule(_localctx, 128, RULE_loop_stmt);
		try {
			int _alt;
			State = 679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new BASIC_LOOPContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 641;
				Match(LOOP);
				State = 645;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 642;
						executable_stmt();
						State = 643;
						terminator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 647;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 649;
				end_stmt();
				}
				break;
			case 2:
				_localctx = new WHILE_UNTILContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				Match(LOOP);
				State = 652;
				while_option();
				State = 654;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 653;
					until_option();
					}
					break;
				}
				State = 659;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 656;
						executable_stmt();
						State = 657;
						terminator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 661;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 663;
				end_stmt();
				}
				break;
			case 3:
				_localctx = new UNTIL_WHILEContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 665;
				Match(LOOP);
				State = 666;
				until_option();
				State = 668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 667;
					while_option();
					}
					break;
				}
				State = 673;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 670;
						executable_stmt();
						State = 671;
						terminator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 675;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 677;
				end_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PostParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public While_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterWhile_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitWhile_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_optionContext while_option() {
		While_optionContext _localctx = new While_optionContext(Context, State);
		EnterRule(_localctx, 130, RULE_while_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			Match(WHILE);
			State = 682;
			Match(LPAR);
			State = 683;
			expression(0);
			State = 684;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PostParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PostParser.RPAR, 0); }
		public Until_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterUntil_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitUntil_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Until_optionContext until_option() {
		Until_optionContext _localctx = new Until_optionContext(Context, State);
		EnterRule(_localctx, 132, RULE_until_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(UNTIL);
			State = 687;
			Match(LPAR);
			State = 688;
			expression(0);
			State = 689;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(PostParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(PostParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_infoContext[] type_info() {
			return GetRuleContexts<Type_infoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_infoContext type_info(int i) {
			return GetRuleContext<Type_infoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostParser.COMMA, i);
		}
		public Define_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDefine_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDefine_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_stmtContext define_stmt() {
		Define_stmtContext _localctx = new Define_stmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_define_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(DEFINE);
			State = 692;
			identifier();
			{
			State = 693;
			identifier();
			State = 694;
			type_info();
			}
			State = 702;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 696;
					Match(COMMA);
					State = 697;
					identifier();
					State = 698;
					type_info();
					}
					} 
				}
				State = 704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 705;
				Match(COMMA);
				}
			}

			State = 708;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_literalContext binary_literal() {
			return GetRuleContext<Binary_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octal_literalContext octal_literal() {
			return GetRuleContext<Octal_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hexadecimal_literalContext hexadecimal_literal() {
			return GetRuleContext<Hexadecimal_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_literalContext decimal_literal() {
			return GetRuleContext<Decimal_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 136, RULE_numeric_literal);
		try {
			State = 714;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_PATTERN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 710;
				binary_literal();
				}
				break;
			case OCTAL_PATTERN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 711;
				octal_literal();
				}
				break;
			case HEXADECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 712;
				hexadecimal_literal();
				}
				break;
			case DECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 713;
				decimal_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hexadecimal_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_PATTERN() { return GetToken(PostParser.HEXADECIMAL_PATTERN, 0); }
		public Hexadecimal_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimal_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterHexadecimal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitHexadecimal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimal_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hexadecimal_literalContext hexadecimal_literal() {
		Hexadecimal_literalContext _localctx = new Hexadecimal_literalContext(Context, State);
		EnterRule(_localctx, 138, RULE_hexadecimal_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 716;
			Match(HEXADECIMAL_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Octal_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_PATTERN() { return GetToken(PostParser.OCTAL_PATTERN, 0); }
		public Octal_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octal_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterOctal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitOctal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctal_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Octal_literalContext octal_literal() {
		Octal_literalContext _localctx = new Octal_literalContext(Context, State);
		EnterRule(_localctx, 140, RULE_octal_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 718;
			Match(OCTAL_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decimal_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_PATTERN() { return GetToken(PostParser.DECIMAL_PATTERN, 0); }
		public Decimal_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterDecimal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitDecimal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decimal_literalContext decimal_literal() {
		Decimal_literalContext _localctx = new Decimal_literalContext(Context, State);
		EnterRule(_localctx, 142, RULE_decimal_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 720;
			Match(DECIMAL_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_PATTERN() { return GetToken(PostParser.BINARY_PATTERN, 0); }
		public Binary_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.EnterBinary_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostListener typedListener = listener as IPostListener;
			if (typedListener != null) typedListener.ExitBinary_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPostVisitor<TResult> typedVisitor = visitor as IPostVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_literalContext binary_literal() {
		Binary_literalContext _localctx = new Binary_literalContext(Context, State);
		EnterRule(_localctx, 144, RULE_binary_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 722;
			Match(BINARY_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 18: return expression_9_sempred((Expression_9Context)_localctx, predIndex);
		case 19: return expression_8_sempred((Expression_8Context)_localctx, predIndex);
		case 20: return expression_7_sempred((Expression_7Context)_localctx, predIndex);
		case 21: return expression_6_sempred((Expression_6Context)_localctx, predIndex);
		case 22: return expression_5_sempred((Expression_5Context)_localctx, predIndex);
		case 23: return expression_4_sempred((Expression_4Context)_localctx, predIndex);
		case 24: return expression_3_sempred((Expression_3Context)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_9_sempred(Expression_9Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_8_sempred(Expression_8Context _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_7_sempred(Expression_7Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_6_sempred(Expression_6Context _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_5_sempred(Expression_5Context _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_4_sempred(Expression_4Context _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_3_sempred(Expression_3Context _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,107,725,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,1,0,3,0,148,8,0,1,0,3,0,151,8,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,164,8,2,10,2,12,2,167,9,2,1,2,1,2,1,2,5,
		2,172,8,2,10,2,12,2,175,9,2,1,2,3,2,178,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,
		5,1,5,1,5,3,5,189,8,5,1,6,3,6,192,8,6,1,6,1,6,3,6,196,8,6,1,6,1,6,3,6,
		200,8,6,1,6,1,6,1,6,3,6,205,8,6,1,6,1,6,3,6,209,8,6,1,6,1,6,3,6,213,8,
		6,1,6,1,6,3,6,217,8,6,1,6,1,6,3,6,221,8,6,1,6,3,6,224,8,6,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,240,8,9,1,9,1,9,1,9,1,
		9,3,9,246,8,9,5,9,248,8,9,10,9,12,9,251,9,9,1,10,1,10,4,10,255,8,10,11,
		10,12,10,256,1,10,1,10,1,11,4,11,262,8,11,11,11,12,11,263,1,12,3,12,267,
		8,12,1,12,1,12,1,13,1,13,3,13,273,8,13,1,13,1,13,1,14,4,14,278,8,14,11,
		14,12,14,279,1,15,1,15,1,16,1,16,1,16,5,16,287,8,16,10,16,12,16,290,9,
		16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,298,8,17,10,17,12,17,301,9,17,1,
		18,1,18,1,18,1,18,1,18,1,18,5,18,309,8,18,10,18,12,18,312,9,18,1,19,1,
		19,1,19,1,19,1,19,1,19,5,19,320,8,19,10,19,12,19,323,9,19,1,20,1,20,1,
		20,1,20,1,20,1,20,5,20,331,8,20,10,20,12,20,334,9,20,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,5,21,343,8,21,10,21,12,21,346,9,21,1,22,1,22,1,22,1,
		22,1,22,1,22,5,22,354,8,22,10,22,12,22,357,9,22,1,23,1,23,1,23,1,23,1,
		23,1,23,5,23,365,8,23,10,23,12,23,368,9,23,1,24,1,24,1,24,1,24,1,24,1,
		24,5,24,376,8,24,10,24,12,24,379,9,24,1,25,1,25,1,25,1,25,3,25,385,8,25,
		1,26,1,26,3,26,389,8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,
		28,1,29,1,29,3,29,403,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,3,33,
		413,8,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,423,8,36,1,36,1,
		36,1,37,1,37,1,38,1,38,3,38,431,8,38,1,39,1,39,3,39,435,8,39,1,40,1,40,
		1,40,1,40,1,41,3,41,442,8,41,1,41,5,41,445,8,41,10,41,12,41,448,9,41,1,
		42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,457,8,43,1,43,1,43,3,43,461,8,43,
		1,44,1,44,1,44,5,44,466,8,44,10,44,12,44,469,9,44,1,45,1,45,1,46,1,46,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,482,8,47,1,48,1,48,3,48,486,8,
		48,1,48,1,48,3,48,490,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,508,8,48,1,49,1,49,1,49,1,49,3,
		49,514,8,49,1,49,1,49,1,50,1,50,3,50,520,8,50,1,51,1,51,3,51,524,8,51,
		1,52,1,52,1,52,3,52,529,8,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,3,53,538,
		8,53,1,54,1,54,1,54,1,54,1,54,3,54,545,8,54,1,55,3,55,548,8,55,1,55,3,
		55,551,8,55,1,55,3,55,554,8,55,1,55,3,55,557,8,55,1,55,3,55,560,8,55,3,
		55,562,8,55,1,56,1,56,1,57,1,57,1,57,1,57,5,57,570,8,57,10,57,12,57,573,
		9,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,585,8,59,1,
		60,1,60,1,60,1,60,4,60,591,8,60,11,60,12,60,592,1,60,3,60,596,8,60,1,60,
		1,60,1,60,1,60,1,60,1,60,4,60,604,8,60,11,60,12,60,605,1,60,4,60,609,8,
		60,11,60,12,60,610,1,60,1,60,3,60,615,8,60,1,61,1,61,1,61,1,61,1,62,1,
		62,1,62,1,62,4,62,625,8,62,11,62,12,62,626,1,63,1,63,1,63,1,63,1,63,1,
		63,4,63,635,8,63,11,63,12,63,636,1,63,3,63,640,8,63,1,64,1,64,1,64,1,64,
		4,64,646,8,64,11,64,12,64,647,1,64,1,64,1,64,1,64,1,64,3,64,655,8,64,1,
		64,1,64,1,64,4,64,660,8,64,11,64,12,64,661,1,64,1,64,1,64,1,64,1,64,3,
		64,669,8,64,1,64,1,64,1,64,4,64,674,8,64,11,64,12,64,675,1,64,1,64,3,64,
		680,8,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,
		67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,701,8,67,10,67,12,67,704,9,67,1,
		67,3,67,707,8,67,1,67,1,67,1,68,1,68,1,68,1,68,3,68,715,8,68,1,69,1,69,
		1,70,1,70,1,71,1,71,1,72,1,72,1,72,0,9,18,34,36,38,40,42,44,46,48,73,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
		136,138,140,142,144,0,9,1,0,6,7,1,0,100,101,1,0,98,99,2,0,7,7,100,101,
		2,0,10,16,97,97,1,0,17,20,3,0,27,36,40,41,48,69,1,0,34,35,1,0,63,64,762,
		0,147,1,0,0,0,2,154,1,0,0,0,4,177,1,0,0,0,6,179,1,0,0,0,8,181,1,0,0,0,
		10,188,1,0,0,0,12,223,1,0,0,0,14,225,1,0,0,0,16,232,1,0,0,0,18,236,1,0,
		0,0,20,252,1,0,0,0,22,261,1,0,0,0,24,266,1,0,0,0,26,270,1,0,0,0,28,277,
		1,0,0,0,30,281,1,0,0,0,32,283,1,0,0,0,34,291,1,0,0,0,36,302,1,0,0,0,38,
		313,1,0,0,0,40,324,1,0,0,0,42,335,1,0,0,0,44,347,1,0,0,0,46,358,1,0,0,
		0,48,369,1,0,0,0,50,384,1,0,0,0,52,388,1,0,0,0,54,393,1,0,0,0,56,396,1,
		0,0,0,58,402,1,0,0,0,60,404,1,0,0,0,62,406,1,0,0,0,64,408,1,0,0,0,66,412,
		1,0,0,0,68,414,1,0,0,0,70,416,1,0,0,0,72,422,1,0,0,0,74,426,1,0,0,0,76,
		428,1,0,0,0,78,432,1,0,0,0,80,436,1,0,0,0,82,441,1,0,0,0,84,449,1,0,0,
		0,86,460,1,0,0,0,88,462,1,0,0,0,90,470,1,0,0,0,92,472,1,0,0,0,94,481,1,
		0,0,0,96,507,1,0,0,0,98,509,1,0,0,0,100,519,1,0,0,0,102,523,1,0,0,0,104,
		525,1,0,0,0,106,532,1,0,0,0,108,539,1,0,0,0,110,547,1,0,0,0,112,563,1,
		0,0,0,114,565,1,0,0,0,116,576,1,0,0,0,118,579,1,0,0,0,120,614,1,0,0,0,
		122,616,1,0,0,0,124,620,1,0,0,0,126,628,1,0,0,0,128,679,1,0,0,0,130,681,
		1,0,0,0,132,686,1,0,0,0,134,691,1,0,0,0,136,714,1,0,0,0,138,716,1,0,0,
		0,140,718,1,0,0,0,142,720,1,0,0,0,144,722,1,0,0,0,146,148,5,26,0,0,147,
		146,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,151,3,14,7,0,150,149,1,
		0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,153,3,2,1,0,153,1,1,0,0,0,154,
		155,5,31,0,0,155,156,3,66,33,0,156,157,3,110,55,0,157,158,3,4,2,0,158,
		159,3,74,37,0,159,3,1,0,0,0,160,161,3,10,5,0,161,162,3,6,3,0,162,164,1,
		0,0,0,163,160,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,
		166,173,1,0,0,0,167,165,1,0,0,0,168,169,3,12,6,0,169,170,3,6,3,0,170,172,
		1,0,0,0,171,168,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,
		0,174,178,1,0,0,0,175,173,1,0,0,0,176,178,3,6,3,0,177,165,1,0,0,0,177,
		176,1,0,0,0,178,5,1,0,0,0,179,180,5,102,0,0,180,7,1,0,0,0,181,182,5,95,
		0,0,182,183,3,66,33,0,183,184,5,96,0,0,184,9,1,0,0,0,185,189,3,14,7,0,
		186,189,3,80,40,0,187,189,3,134,67,0,188,185,1,0,0,0,188,186,1,0,0,0,188,
		187,1,0,0,0,189,11,1,0,0,0,190,192,3,8,4,0,191,190,1,0,0,0,191,192,1,0,
		0,0,192,193,1,0,0,0,193,224,3,16,8,0,194,196,3,8,4,0,195,194,1,0,0,0,195,
		196,1,0,0,0,196,197,1,0,0,0,197,224,3,70,35,0,198,200,3,8,4,0,199,198,
		1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,224,3,72,36,0,202,224,3,2,
		1,0,203,205,3,8,4,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,
		224,3,118,59,0,207,209,3,8,4,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,
		1,0,0,0,210,224,3,120,60,0,211,213,3,8,4,0,212,211,1,0,0,0,212,213,1,0,
		0,0,213,214,1,0,0,0,214,224,3,128,64,0,215,217,3,8,4,0,216,215,1,0,0,0,
		216,217,1,0,0,0,217,218,1,0,0,0,218,224,3,76,38,0,219,221,3,8,4,0,220,
		219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,224,3,78,39,0,223,191,
		1,0,0,0,223,195,1,0,0,0,223,199,1,0,0,0,223,202,1,0,0,0,223,204,1,0,0,
		0,223,208,1,0,0,0,223,212,1,0,0,0,223,216,1,0,0,0,223,220,1,0,0,0,224,
		13,1,0,0,0,225,226,5,1,0,0,226,227,5,2,0,0,227,228,5,106,0,0,228,229,3,
		66,33,0,229,230,5,3,0,0,230,231,5,106,0,0,231,15,1,0,0,0,232,233,3,18,
		9,0,233,234,5,97,0,0,234,235,3,34,17,0,235,17,1,0,0,0,236,237,6,9,-1,0,
		237,239,3,24,12,0,238,240,3,22,11,0,239,238,1,0,0,0,239,240,1,0,0,0,240,
		249,1,0,0,0,241,242,10,2,0,0,242,243,5,88,0,0,243,245,3,24,12,0,244,246,
		3,22,11,0,245,244,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,241,1,0,
		0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,19,1,0,0,0,251,
		249,1,0,0,0,252,254,5,91,0,0,253,255,3,32,16,0,254,253,1,0,0,0,255,256,
		1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,259,5,92,0,
		0,259,21,1,0,0,0,260,262,3,20,10,0,261,260,1,0,0,0,262,263,1,0,0,0,263,
		261,1,0,0,0,263,264,1,0,0,0,264,23,1,0,0,0,265,267,3,28,14,0,266,265,1,
		0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,3,66,33,0,269,25,1,0,0,0,
		270,272,3,66,33,0,271,273,3,20,10,0,272,271,1,0,0,0,272,273,1,0,0,0,273,
		274,1,0,0,0,274,275,5,89,0,0,275,27,1,0,0,0,276,278,3,26,13,0,277,276,
		1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,29,1,0,0,0,
		281,282,3,34,17,0,282,31,1,0,0,0,283,288,3,30,15,0,284,285,5,90,0,0,285,
		287,3,30,15,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,
		1,0,0,0,289,33,1,0,0,0,290,288,1,0,0,0,291,292,6,17,-1,0,292,293,3,36,
		18,0,293,299,1,0,0,0,294,295,10,1,0,0,295,296,5,4,0,0,296,298,3,36,18,
		0,297,294,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,
		35,1,0,0,0,301,299,1,0,0,0,302,303,6,18,-1,0,303,304,3,38,19,0,304,310,
		1,0,0,0,305,306,10,1,0,0,306,307,5,5,0,0,307,309,3,38,19,0,308,305,1,0,
		0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,37,1,0,0,0,312,
		310,1,0,0,0,313,314,6,19,-1,0,314,315,3,40,20,0,315,321,1,0,0,0,316,317,
		10,1,0,0,317,318,7,0,0,0,318,320,3,40,20,0,319,316,1,0,0,0,320,323,1,0,
		0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,39,1,0,0,0,323,321,1,0,0,0,324,
		325,6,20,-1,0,325,326,3,42,21,0,326,332,1,0,0,0,327,328,10,1,0,0,328,329,
		5,8,0,0,329,331,3,42,21,0,330,327,1,0,0,0,331,334,1,0,0,0,332,330,1,0,
		0,0,332,333,1,0,0,0,333,41,1,0,0,0,334,332,1,0,0,0,335,336,6,21,-1,0,336,
		337,3,44,22,0,337,344,1,0,0,0,338,339,10,1,0,0,339,340,3,62,31,0,340,341,
		3,44,22,0,341,343,1,0,0,0,342,338,1,0,0,0,343,346,1,0,0,0,344,342,1,0,
		0,0,344,345,1,0,0,0,345,43,1,0,0,0,346,344,1,0,0,0,347,348,6,22,-1,0,348,
		349,3,46,23,0,349,355,1,0,0,0,350,351,10,1,0,0,351,352,5,9,0,0,352,354,
		3,46,23,0,353,350,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,
		0,0,356,45,1,0,0,0,357,355,1,0,0,0,358,359,6,23,-1,0,359,360,3,48,24,0,
		360,366,1,0,0,0,361,362,10,1,0,0,362,363,7,1,0,0,363,365,3,48,24,0,364,
		361,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,47,1,0,
		0,0,368,366,1,0,0,0,369,370,6,24,-1,0,370,371,3,50,25,0,371,377,1,0,0,
		0,372,373,10,1,0,0,373,374,7,2,0,0,374,376,3,50,25,0,375,372,1,0,0,0,376,
		379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,49,1,0,0,0,379,377,1,0,
		0,0,380,385,3,58,29,0,381,385,3,54,27,0,382,385,3,56,28,0,383,385,3,52,
		26,0,384,380,1,0,0,0,384,381,1,0,0,0,384,382,1,0,0,0,384,383,1,0,0,0,385,
		51,1,0,0,0,386,389,3,58,29,0,387,389,3,56,28,0,388,386,1,0,0,0,388,387,
		1,0,0,0,389,390,1,0,0,0,390,391,5,103,0,0,391,392,3,50,25,0,392,53,1,0,
		0,0,393,394,3,60,30,0,394,395,3,50,25,0,395,55,1,0,0,0,396,397,5,91,0,
		0,397,398,3,34,17,0,398,399,5,92,0,0,399,57,1,0,0,0,400,403,3,136,68,0,
		401,403,3,18,9,0,402,400,1,0,0,0,402,401,1,0,0,0,403,59,1,0,0,0,404,405,
		7,3,0,0,405,61,1,0,0,0,406,407,7,4,0,0,407,63,1,0,0,0,408,409,7,5,0,0,
		409,65,1,0,0,0,410,413,3,68,34,0,411,413,5,78,0,0,412,410,1,0,0,0,412,
		411,1,0,0,0,413,67,1,0,0,0,414,415,7,6,0,0,415,69,1,0,0,0,416,417,5,27,
		0,0,417,418,3,18,9,0,418,71,1,0,0,0,419,423,5,28,0,0,420,421,5,29,0,0,
		421,423,5,30,0,0,422,419,1,0,0,0,422,420,1,0,0,0,423,424,1,0,0,0,424,425,
		3,18,9,0,425,73,1,0,0,0,426,427,5,33,0,0,427,75,1,0,0,0,428,430,5,68,0,
		0,429,431,5,78,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,77,1,0,0,0,432,
		434,5,69,0,0,433,435,5,78,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,79,1,
		0,0,0,436,437,7,7,0,0,437,438,3,66,33,0,438,439,3,82,41,0,439,81,1,0,0,
		0,440,442,3,84,42,0,441,440,1,0,0,0,441,442,1,0,0,0,442,446,1,0,0,0,443,
		445,3,94,47,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,
		1,0,0,0,447,83,1,0,0,0,448,446,1,0,0,0,449,450,5,91,0,0,450,451,3,88,44,
		0,451,452,5,92,0,0,452,85,1,0,0,0,453,454,3,90,45,0,454,455,5,104,0,0,
		455,457,1,0,0,0,456,453,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,461,
		3,92,46,0,459,461,5,98,0,0,460,456,1,0,0,0,460,459,1,0,0,0,461,87,1,0,
		0,0,462,467,3,86,43,0,463,464,5,90,0,0,464,466,3,86,43,0,465,463,1,0,0,
		0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,89,1,0,0,0,469,467,
		1,0,0,0,470,471,3,34,17,0,471,91,1,0,0,0,472,473,3,34,17,0,473,93,1,0,
		0,0,474,482,3,96,48,0,475,482,5,39,0,0,476,482,5,40,0,0,477,482,5,42,0,
		0,478,482,5,43,0,0,479,482,3,106,53,0,480,482,3,108,54,0,481,474,1,0,0,
		0,481,475,1,0,0,0,481,476,1,0,0,0,481,477,1,0,0,0,481,478,1,0,0,0,481,
		479,1,0,0,0,481,480,1,0,0,0,482,95,1,0,0,0,483,485,5,37,0,0,484,486,3,
		98,49,0,485,484,1,0,0,0,485,486,1,0,0,0,486,508,1,0,0,0,487,489,5,38,0,
		0,488,490,3,98,49,0,489,488,1,0,0,0,489,490,1,0,0,0,490,508,1,0,0,0,491,
		508,5,54,0,0,492,493,5,55,0,0,493,508,3,104,52,0,494,508,5,56,0,0,495,
		496,5,61,0,0,496,508,3,104,52,0,497,508,5,57,0,0,498,508,5,58,0,0,499,
		508,5,59,0,0,500,508,5,60,0,0,501,508,5,62,0,0,502,508,5,63,0,0,503,508,
		5,64,0,0,504,508,5,40,0,0,505,508,5,41,0,0,506,508,3,66,33,0,507,483,1,
		0,0,0,507,487,1,0,0,0,507,491,1,0,0,0,507,492,1,0,0,0,507,494,1,0,0,0,
		507,495,1,0,0,0,507,497,1,0,0,0,507,498,1,0,0,0,507,499,1,0,0,0,507,500,
		1,0,0,0,507,501,1,0,0,0,507,502,1,0,0,0,507,503,1,0,0,0,507,504,1,0,0,
		0,507,505,1,0,0,0,507,506,1,0,0,0,508,97,1,0,0,0,509,510,5,91,0,0,510,
		513,3,100,50,0,511,512,5,90,0,0,512,514,3,102,51,0,513,511,1,0,0,0,513,
		514,1,0,0,0,514,515,1,0,0,0,515,516,5,92,0,0,516,99,1,0,0,0,517,520,3,
		142,71,0,518,520,3,66,33,0,519,517,1,0,0,0,519,518,1,0,0,0,520,101,1,0,
		0,0,521,524,3,142,71,0,522,524,3,66,33,0,523,521,1,0,0,0,523,522,1,0,0,
		0,524,103,1,0,0,0,525,528,5,91,0,0,526,529,3,142,71,0,527,529,3,66,33,
		0,528,526,1,0,0,0,528,527,1,0,0,0,529,530,1,0,0,0,530,531,5,92,0,0,531,
		105,1,0,0,0,532,537,5,44,0,0,533,534,5,91,0,0,534,535,3,18,9,0,535,536,
		5,92,0,0,536,538,1,0,0,0,537,533,1,0,0,0,537,538,1,0,0,0,538,107,1,0,0,
		0,539,544,5,45,0,0,540,541,5,91,0,0,541,542,3,18,9,0,542,543,5,92,0,0,
		543,545,1,0,0,0,544,540,1,0,0,0,544,545,1,0,0,0,545,109,1,0,0,0,546,548,
		3,114,57,0,547,546,1,0,0,0,547,548,1,0,0,0,548,561,1,0,0,0,549,551,3,116,
		58,0,550,549,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,554,3,112,56,
		0,553,552,1,0,0,0,553,554,1,0,0,0,554,562,1,0,0,0,555,557,3,112,56,0,556,
		555,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,560,3,116,58,0,559,558,
		1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,550,1,0,0,0,561,556,1,0,0,
		0,562,111,1,0,0,0,563,564,7,8,0,0,564,113,1,0,0,0,565,566,5,91,0,0,566,
		571,3,66,33,0,567,568,5,90,0,0,568,570,3,66,33,0,569,567,1,0,0,0,570,573,
		1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,
		0,574,575,5,92,0,0,575,115,1,0,0,0,576,577,5,53,0,0,577,578,3,96,48,0,
		578,117,1,0,0,0,579,584,5,48,0,0,580,581,5,91,0,0,581,582,3,34,17,0,582,
		583,5,92,0,0,583,585,1,0,0,0,584,580,1,0,0,0,584,585,1,0,0,0,585,119,1,
		0,0,0,586,590,3,122,61,0,587,588,3,12,6,0,588,589,3,6,3,0,589,591,1,0,
		0,0,590,587,1,0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,
		595,1,0,0,0,594,596,3,124,62,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,
		1,0,0,0,597,598,3,74,37,0,598,615,1,0,0,0,599,603,3,122,61,0,600,601,3,
		12,6,0,601,602,3,6,3,0,602,604,1,0,0,0,603,600,1,0,0,0,604,605,1,0,0,0,
		605,603,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,3,126,63,0,608,
		607,1,0,0,0,609,610,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,612,1,
		0,0,0,612,613,3,74,37,0,613,615,1,0,0,0,614,586,1,0,0,0,614,599,1,0,0,
		0,615,121,1,0,0,0,616,617,5,49,0,0,617,618,3,34,17,0,618,619,5,50,0,0,
		619,123,1,0,0,0,620,624,5,51,0,0,621,622,3,12,6,0,622,623,3,6,3,0,623,
		625,1,0,0,0,624,621,1,0,0,0,625,626,1,0,0,0,626,624,1,0,0,0,626,627,1,
		0,0,0,627,125,1,0,0,0,628,629,5,52,0,0,629,630,3,34,17,0,630,634,5,50,
		0,0,631,632,3,12,6,0,632,633,3,6,3,0,633,635,1,0,0,0,634,631,1,0,0,0,635,
		636,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,
		124,62,0,639,638,1,0,0,0,639,640,1,0,0,0,640,127,1,0,0,0,641,645,5,65,
		0,0,642,643,3,12,6,0,643,644,3,6,3,0,644,646,1,0,0,0,645,642,1,0,0,0,646,
		647,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,650,3,
		74,37,0,650,680,1,0,0,0,651,652,5,65,0,0,652,654,3,130,65,0,653,655,3,
		132,66,0,654,653,1,0,0,0,654,655,1,0,0,0,655,659,1,0,0,0,656,657,3,12,
		6,0,657,658,3,6,3,0,658,660,1,0,0,0,659,656,1,0,0,0,660,661,1,0,0,0,661,
		659,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,664,3,74,37,0,664,680,
		1,0,0,0,665,666,5,65,0,0,666,668,3,132,66,0,667,669,3,130,65,0,668,667,
		1,0,0,0,668,669,1,0,0,0,669,673,1,0,0,0,670,671,3,12,6,0,671,672,3,6,3,
		0,672,674,1,0,0,0,673,670,1,0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,
		676,1,0,0,0,676,677,1,0,0,0,677,678,3,74,37,0,678,680,1,0,0,0,679,641,
		1,0,0,0,679,651,1,0,0,0,679,665,1,0,0,0,680,129,1,0,0,0,681,682,5,66,0,
		0,682,683,5,91,0,0,683,684,3,34,17,0,684,685,5,92,0,0,685,131,1,0,0,0,
		686,687,5,67,0,0,687,688,5,91,0,0,688,689,3,34,17,0,689,690,5,92,0,0,690,
		133,1,0,0,0,691,692,5,36,0,0,692,693,3,66,33,0,693,694,3,66,33,0,694,695,
		3,82,41,0,695,702,1,0,0,0,696,697,5,90,0,0,697,698,3,66,33,0,698,699,3,
		82,41,0,699,701,1,0,0,0,700,696,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,
		0,702,703,1,0,0,0,703,706,1,0,0,0,704,702,1,0,0,0,705,707,5,90,0,0,706,
		705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,709,5,33,0,0,709,135,1,
		0,0,0,710,715,3,144,72,0,711,715,3,140,70,0,712,715,3,138,69,0,713,715,
		3,142,71,0,714,710,1,0,0,0,714,711,1,0,0,0,714,712,1,0,0,0,714,713,1,0,
		0,0,715,137,1,0,0,0,716,717,5,81,0,0,717,139,1,0,0,0,718,719,5,80,0,0,
		719,141,1,0,0,0,720,721,5,82,0,0,721,143,1,0,0,0,722,723,5,79,0,0,723,
		145,1,0,0,0,79,147,150,165,173,177,188,191,195,199,204,208,212,216,220,
		223,239,245,249,256,263,266,272,279,288,299,310,321,332,344,355,366,377,
		384,388,402,412,422,430,434,441,446,456,460,467,481,485,489,507,513,519,
		523,528,537,544,547,550,553,556,559,561,571,584,592,595,605,610,614,626,
		636,639,647,654,661,668,675,679,702,706,714
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
