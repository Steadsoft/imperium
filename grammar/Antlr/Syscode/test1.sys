

/*
scope 

scopea end

scope 

scopeb end ;

scope scopec ;
;;

;;

;
end

scope lastscope ; 


end

scope path.scope end

;

  if then = struct then
    scope my_test_scope end;
    scope my_test_scope end
    
    scope my_test_scope;

    end

  end

scope main_code.system

  if then = struct then
    scope my_test_scope;

    end
    scope my_test_scope end
    
    scope my_test_scope; end;
    else
        ;
  end


end

@restart



enum error_codes dint16,
     code_0,
     code_1,
     code_2
end     

struct mapping_1,
    counter int(16),    
    message string(1024),
    status int(20),
    end   ; 
   
struct mapping_2,
    counter int16,
    message string(32),
    status int16,
    message string(16),
    end
*/
    proc entry_point (input, output)

        struct outermost(32,32),
            f0 int32,
            f1 int16,
            f2 string(32),
            
            inner_1(16),
               f4 int(14),
               f9 int(27)
            end,
            inner_2(16),
               f4 int16,
               f4 int64,
               f5 int(11),
               inner_2_inner_1,
                  f10 int16,
                  f70 int32
                end
            end
        end
/*
        if 
        a = b 
        then
            x = y
            b = c
            large = small
        end
        
        if a = b 
        then
            x = y
            b = c
            large = small
        else

            count = five
            label = yes;
        end
            
        */

    end




/*
struct heap_header,
   free_space int16,
   used_space int16,
   map,
      type int8,
      age  int8
   end
end

dcl control heap_header;

control.free_space = 0;

control.map.type = 12;

*/

/* JUNK

dcl register

*/