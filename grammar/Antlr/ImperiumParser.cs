//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Imperium.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ImperiumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCEPT=1, ALIAS=2, ALIGNED=3, ALL=4, ANY=5, ARGUMENT=6, AS=7, ASSEMBLER=8, 
		BASED=9, BINARY=10, BIT=11, BOOLEAN=12, BOOTSTRAP=13, BUILTIN=14, BY=15, 
		BYPASS=16, CALL=17, CHARACTER=18, COFUNCTION=19, COLD=20, COROUTINE=21, 
		DECIMAL=22, DECLARE=23, DEFINE=24, DEFINED=25, ELIF=26, ELSE=27, END=28, 
		ENDLOOP=29, ENTRY=30, ENUM=31, FIXED=32, FLOAT=33, FUNCTION=34, GOTO=35, 
		IF=36, INC=37, INCLUDE=38, INTERNAL=39, INTERRUPT=40, INTRINSIC=41, LANGUAGE=42, 
		LOOP=43, MAIN=44, NAKED=45, NORETURN=46, OFFSET=47, OTHERWISE=48, OUT=49, 
		PAD=50, POINTER=51, PRIVATE=52, PROCEDURE=53, PUBLIC=54, RAW=55, READONLY=56, 
		RECURSIVE=57, REF=58, RELOOP=59, RETAIN=60, RETURN=61, RETURNON=62, RETURNS=63, 
		SCANAS=64, SCOPE=65, SECTION=66, SELECT=67, SINGLET=68, STACK=69, STATIC=70, 
		STRING=71, STRUCTURE=72, THEN=73, TO=74, TRAITS=75, TYPE=76, UNALIGNED=77, 
		UNTIL=78, USES=79, USING=80, UTF=81, VARIABLE=82, VARYING=83, WHEN=84, 
		WHILE=85, YIELD=86, COMMENT=87, LINE_COMMENT=88, NEWLINE=89, STRING_LITERAL_3=90, 
		STRING_LITERAL_2=91, STRING_LITERAL_1=92, BYTE_ORDER_MARK=93, LABEL=94, 
		BINARY_PATTERN=95, OCTAL_PATTERN=96, HEXADECIMAL_PATTERN=97, INTEGER=98, 
		AINTEGER=99, DECIMAL_PATTERN=100, HASH=101, AT=102, RARROW_U=103, MAPSTO_U=104, 
		DOT=105, COMMA=106, LPAR=107, RPAR=108, LBRACK=109, RBRACK=110, LBRACE=111, 
		RBRACE=112, EQUALS=113, ASSIGN_U=114, TIMES=115, DIVIDE_U=116, PLUS=117, 
		MINUS=118, SEMICOLON=119, POWER_U=120, COLON=121, TRIQUOTE=122, DIQUOTE=123, 
		QUOTE=124, SQUOTE=125, NOT=126, GT=127, LT=128, GTE_U=129, LTE_U=130, 
		NGT=131, NLT=132, NE_U=133, PCNT=134, AND=135, OR=136, NAND=137, NOR=138, 
		XOR_U=139, XNOR_U=140, REDAND=141, REDOR=142, REDNAND=143, REDNOR=144, 
		REDXOR_U=145, REDXNOR_U=146, LOGAND=147, LOGOR=148, CONC=149, L_LOG_SHIFT=150, 
		R_LOG_SHIFT=151, R_ART_SHIFT=152, L_ROTATE_U=153, R_ROTATE_U=154, RANGE=155, 
		ASMS=156, ASME=157, IDENTIFIER=158, UNRECOGNIZED=159, ASSEMBLER_END=160, 
		ASSEMBLER_NEWLINE=161, ASM_IDENTIFIER=162, ASSEMBLER_DEC_INTEGER=163, 
		ASSEMBLER_HEX_INTEGER=164, ASSEMBLER_OCT_INTEGER=165, ASSEMBLER_BIN_INTEGER=166, 
		ASSEMBLER_COMMENT=167, ASSEMBLER_LINE_COMMENT=168, ASSEMBLER_PUNCTUATOR=169, 
		ASSEMBLER_SYMBOL=170, ASSEMBLER_BRACKET=171, ASSEMBLER_PAREN=172, ASM_LBRACE=173, 
		ASM_RBRACE=174, ASSEMBLER_SPACES=175;
	public const int
		RULE_translationUnit = 0, RULE_uses = 1, RULE_scope = 2, RULE_scopeStart = 3, 
		RULE_scopeEnd = 4, RULE_assemblerToken = 5, RULE_traits = 6, RULE_traitsStart = 7, 
		RULE_traitsEnd = 8, RULE_declarationTraits = 9, RULE_declarationTrait = 10, 
		RULE_procedureTraits = 11, RULE_procedureTraitsList = 12, RULE_procedureTrait = 13, 
		RULE_procedureRule = 14, RULE_target = 15, RULE_asmBlock = 16, RULE_asmOptions = 17, 
		RULE_functionRule = 18, RULE_procedureStmt = 19, RULE_functionStmt = 20, 
		RULE_targetSpec = 21, RULE_procedureAttributes = 22, RULE_functionAttributes = 23, 
		RULE_procedureEnd = 24, RULE_functionEnd = 25, RULE_returnsDescriptor = 26, 
		RULE_terminator = 27, RULE_labelStmt = 28, RULE_passiveStmt = 29, RULE_assemblerStmt = 30, 
		RULE_assemblerInlineComment = 31, RULE_activeStmt = 32, RULE_nullStmt = 33, 
		RULE_assignmentStmt = 34, RULE_reference = 35, RULE_arguments = 36, RULE_argumentsList = 37, 
		RULE_basicReference = 38, RULE_structureQualification = 39, RULE_structureQualificationList = 40, 
		RULE_subscript = 41, RULE_subscriptCommalist = 42, RULE_parenthesizedExpression = 43, 
		RULE_primitiveExpression = 44, RULE_prefixExpression = 45, RULE_bitAdjustOperator = 46, 
		RULE_additionOperator = 47, RULE_multiplyOperator = 48, RULE_boolAndOperator = 49, 
		RULE_boolXorOperator = 50, RULE_boolOrOperator = 51, RULE_expression = 52, 
		RULE_map_set = 53, RULE_bool_set = 54, RULE_prefixOperator = 55, RULE_comparisonOperator = 56, 
		RULE_shiftOperator = 57, RULE_callStmt = 58, RULE_gotoStmt = 59, RULE_endloopStmt = 60, 
		RULE_reloopStmt = 61, RULE_declareStmt = 62, RULE_declareAsBody = 63, 
		RULE_declarationBody = 64, RULE_typeInfo = 65, RULE_dimensionSuffix = 66, 
		RULE_boundPair = 67, RULE_boundPairCommalist = 68, RULE_lowerBound = 69, 
		RULE_upperBound = 70, RULE_attributes = 71, RULE_memoryAttribute = 72, 
		RULE_dataAttribute = 73, RULE_numericScale = 74, RULE_linkageOption = 75, 
		RULE_linkageSection = 76, RULE_precision = 77, RULE_numberOfDigits = 78, 
		RULE_scale_factor = 79, RULE_maxStringLength = 80, RULE_maxLength = 81, 
		RULE_based = 82, RULE_defined = 83, RULE_coprocedureSpecifier = 84, RULE_handlerSpecifier = 85, 
		RULE_parameterNameCommalist = 86, RULE_returnStmt = 87, RULE_ifStmt = 88, 
		RULE_ifEnd = 89, RULE_thenClause = 90, RULE_elseClause = 91, RULE_elifClause = 92, 
		RULE_loopStmt = 93, RULE_whileLoop = 94, RULE_untilLoop = 95, RULE_loopEnd = 96, 
		RULE_whileOption = 97, RULE_untilOption = 98, RULE_selectStmt = 99, RULE_selectEnd = 100, 
		RULE_selectClause = 101, RULE_whenClause = 102, RULE_otherwiseClause = 103, 
		RULE_defineStmt = 104, RULE_enumType = 105, RULE_aliasType = 106, RULE_binaryEnum = 107, 
		RULE_decimalEnum = 108, RULE_stringEnum = 109, RULE_bitEnum = 110, RULE_enumBody = 111, 
		RULE_enumLiteral = 112, RULE_structType = 113, RULE_structBody = 114, 
		RULE_structMemberList = 115, RULE_structSubstruct = 116, RULE_structMember = 117, 
		RULE_stringLiteral = 118, RULE_numericLiteral = 119, RULE_hexLiteral = 120, 
		RULE_octalLiteral = 121, RULE_decimalLiteral = 122, RULE_binaryLiteral = 123, 
		RULE_identifier = 124;
	public static readonly string[] ruleNames = {
		"translationUnit", "uses", "scope", "scopeStart", "scopeEnd", "assemblerToken", 
		"traits", "traitsStart", "traitsEnd", "declarationTraits", "declarationTrait", 
		"procedureTraits", "procedureTraitsList", "procedureTrait", "procedureRule", 
		"target", "asmBlock", "asmOptions", "functionRule", "procedureStmt", "functionStmt", 
		"targetSpec", "procedureAttributes", "functionAttributes", "procedureEnd", 
		"functionEnd", "returnsDescriptor", "terminator", "labelStmt", "passiveStmt", 
		"assemblerStmt", "assemblerInlineComment", "activeStmt", "nullStmt", "assignmentStmt", 
		"reference", "arguments", "argumentsList", "basicReference", "structureQualification", 
		"structureQualificationList", "subscript", "subscriptCommalist", "parenthesizedExpression", 
		"primitiveExpression", "prefixExpression", "bitAdjustOperator", "additionOperator", 
		"multiplyOperator", "boolAndOperator", "boolXorOperator", "boolOrOperator", 
		"expression", "map_set", "bool_set", "prefixOperator", "comparisonOperator", 
		"shiftOperator", "callStmt", "gotoStmt", "endloopStmt", "reloopStmt", 
		"declareStmt", "declareAsBody", "declarationBody", "typeInfo", "dimensionSuffix", 
		"boundPair", "boundPairCommalist", "lowerBound", "upperBound", "attributes", 
		"memoryAttribute", "dataAttribute", "numericScale", "linkageOption", "linkageSection", 
		"precision", "numberOfDigits", "scale_factor", "maxStringLength", "maxLength", 
		"based", "defined", "coprocedureSpecifier", "handlerSpecifier", "parameterNameCommalist", 
		"returnStmt", "ifStmt", "ifEnd", "thenClause", "elseClause", "elifClause", 
		"loopStmt", "whileLoop", "untilLoop", "loopEnd", "whileOption", "untilOption", 
		"selectStmt", "selectEnd", "selectClause", "whenClause", "otherwiseClause", 
		"defineStmt", "enumType", "aliasType", "binaryEnum", "decimalEnum", "stringEnum", 
		"bitEnum", "enumBody", "enumLiteral", "structType", "structBody", "structMemberList", 
		"structSubstruct", "structMember", "stringLiteral", "numericLiteral", 
		"hexLiteral", "octalLiteral", "decimalLiteral", "binaryLiteral", "identifier"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCEPT", "ALIAS", "ALIGNED", "ALL", "ANY", "ARGUMENT", "AS", "ASSEMBLER", 
		"BASED", "BINARY", "BIT", "BOOLEAN", "BOOTSTRAP", "BUILTIN", "BY", "BYPASS", 
		"CALL", "CHARACTER", "COFUNCTION", "COLD", "COROUTINE", "DECIMAL", "DECLARE", 
		"DEFINE", "DEFINED", "ELIF", "ELSE", "END", "ENDLOOP", "ENTRY", "ENUM", 
		"FIXED", "FLOAT", "FUNCTION", "GOTO", "IF", "INC", "INCLUDE", "INTERNAL", 
		"INTERRUPT", "INTRINSIC", "LANGUAGE", "LOOP", "MAIN", "NAKED", "NORETURN", 
		"OFFSET", "OTHERWISE", "OUT", "PAD", "POINTER", "PRIVATE", "PROCEDURE", 
		"PUBLIC", "RAW", "READONLY", "RECURSIVE", "REF", "RELOOP", "RETAIN", "RETURN", 
		"RETURNON", "RETURNS", "SCANAS", "SCOPE", "SECTION", "SELECT", "SINGLET", 
		"STACK", "STATIC", "STRING", "STRUCTURE", "THEN", "TO", "TRAITS", "TYPE", 
		"UNALIGNED", "UNTIL", "USES", "USING", "UTF", "VARIABLE", "VARYING", "WHEN", 
		"WHILE", "YIELD", "COMMENT", "LINE_COMMENT", "NEWLINE", "STRING_LITERAL_3", 
		"STRING_LITERAL_2", "STRING_LITERAL_1", "BYTE_ORDER_MARK", "LABEL", "BINARY_PATTERN", 
		"OCTAL_PATTERN", "HEXADECIMAL_PATTERN", "INTEGER", "AINTEGER", "DECIMAL_PATTERN", 
		"HASH", "AT", "RARROW_U", "MAPSTO_U", "DOT", "COMMA", "LPAR", "RPAR", 
		"LBRACK", "RBRACK", "LBRACE", "RBRACE", "EQUALS", "ASSIGN_U", "TIMES", 
		"DIVIDE_U", "PLUS", "MINUS", "SEMICOLON", "POWER_U", "COLON", "TRIQUOTE", 
		"DIQUOTE", "QUOTE", "SQUOTE", "NOT", "GT", "LT", "GTE_U", "LTE_U", "NGT", 
		"NLT", "NE_U", "PCNT", "AND", "OR", "NAND", "NOR", "XOR_U", "XNOR_U", 
		"REDAND", "REDOR", "REDNAND", "REDNOR", "REDXOR_U", "REDXNOR_U", "LOGAND", 
		"LOGOR", "CONC", "L_LOG_SHIFT", "R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE_U", 
		"R_ROTATE_U", "RANGE", "ASMS", "ASME", "IDENTIFIER", "UNRECOGNIZED", "ASSEMBLER_END", 
		"ASSEMBLER_NEWLINE", "ASM_IDENTIFIER", "ASSEMBLER_DEC_INTEGER", "ASSEMBLER_HEX_INTEGER", 
		"ASSEMBLER_OCT_INTEGER", "ASSEMBLER_BIN_INTEGER", "ASSEMBLER_COMMENT", 
		"ASSEMBLER_LINE_COMMENT", "ASSEMBLER_PUNCTUATOR", "ASSEMBLER_SYMBOL", 
		"ASSEMBLER_BRACKET", "ASSEMBLER_PAREN", "ASM_LBRACE", "ASM_RBRACE", "ASSEMBLER_SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Imperium.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ImperiumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ImperiumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ImperiumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : VisitorContext {
		public ScopeContext _scope;
		public IList<ScopeContext> _Scopes = new List<ScopeContext>();
		public TraitsContext Traits;
		public PassiveStmtContext _passiveStmt;
		public IList<PassiveStmtContext> _PassiveStatements = new List<PassiveStmtContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ImperiumParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(ImperiumParser.BYTE_ORDER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsesContext[] uses() {
			return GetRuleContexts<UsesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsesContext uses(int i) {
			return GetRuleContext<UsesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitsContext[] traits() {
			return GetRuleContexts<TraitsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitsContext traits(int i) {
			return GetRuleContext<TraitsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext[] passiveStmt() {
			return GetRuleContexts<PassiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext passiveStmt(int i) {
			return GetRuleContext<PassiveStmtContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 250;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USES) {
				{
				{
				State = 253;
				uses();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 9007216459776064L) != 0 || (((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 18014398509483009L) != 0) {
				{
				State = 262;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SCOPE:
					{
					State = 259;
					_localctx._scope = scope();
					_localctx._Scopes.Add(_localctx._scope);
					}
					break;
				case TRAITS:
					{
					State = 260;
					_localctx.Traits = traits();
					}
					break;
				case ARGUMENT:
				case DECLARE:
				case DEFINE:
				case FUNCTION:
				case PROCEDURE:
				case SEMICOLON:
					{
					State = 261;
					_localctx._passiveStmt = passiveStmt();
					_localctx._PassiveStatements.Add(_localctx._passiveStmt);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(ImperiumParser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ImperiumParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ImperiumParser.DOT, i);
		}
		public UsesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterUses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitUses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesContext uses() {
		UsesContext _localctx = new UsesContext(Context, State);
		EnterRule(_localctx, 2, RULE_uses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(USES);
			State = 270;
			identifier();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 271;
				Match(DOT);
				State = 272;
				identifier();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : VisitorContext {
		public ScopeContext _scope;
		public IList<ScopeContext> _Scopes = new List<ScopeContext>();
		public TraitsContext _traits;
		public IList<TraitsContext> _Traits = new List<TraitsContext>();
		public PassiveStmtContext _passiveStmt;
		public IList<PassiveStmtContext> _PassiveStatements = new List<PassiveStmtContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ScopeStartContext scopeStart() {
			return GetRuleContext<ScopeStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeEndContext scopeEnd() {
			return GetRuleContext<ScopeEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitsContext[] traits() {
			return GetRuleContexts<TraitsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitsContext traits(int i) {
			return GetRuleContext<TraitsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext[] passiveStmt() {
			return GetRuleContexts<PassiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext passiveStmt(int i) {
			return GetRuleContext<PassiveStmtContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 4, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			scopeStart();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 9007216459776064L) != 0 || (((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 18014398509483009L) != 0) {
				{
				State = 282;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SCOPE:
					{
					State = 279;
					_localctx._scope = scope();
					_localctx._Scopes.Add(_localctx._scope);
					}
					break;
				case TRAITS:
					{
					State = 280;
					_localctx._traits = traits();
					_localctx._Traits.Add(_localctx._traits);
					}
					break;
				case ARGUMENT:
				case DECLARE:
				case DEFINE:
				case FUNCTION:
				case PROCEDURE:
				case SEMICOLON:
					{
					State = 281;
					_localctx._passiveStmt = passiveStmt();
					_localctx._PassiveStatements.Add(_localctx._passiveStmt);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 287;
			scopeEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeStartContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(ImperiumParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ImperiumParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ImperiumParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ImperiumParser.PRIVATE, 0); }
		public ScopeStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterScopeStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitScopeStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeStartContext scopeStart() {
		ScopeStartContext _localctx = new ScopeStartContext(Context, State);
		EnterRule(_localctx, 6, RULE_scopeStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(SCOPE);
			State = 290;
			identifier();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 291;
				Match(DOT);
				State = 292;
				identifier();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 298;
				Match(PRIVATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(ImperiumParser.SCOPE, 0); }
		public ScopeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterScopeEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitScopeEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeEndContext scopeEnd() {
		ScopeEndContext _localctx = new ScopeEndContext(Context, State);
		EnterRule(_localctx, 8, RULE_scopeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(END);
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 302;
				Match(SCOPE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerTokenContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ImperiumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ImperiumParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ImperiumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ImperiumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(ImperiumParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(ImperiumParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ImperiumParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ImperiumParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(ImperiumParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINTEGER() { return GetToken(ImperiumParser.AINTEGER, 0); }
		public AssemblerTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAssemblerToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAssemblerToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerTokenContext assemblerToken() {
		AssemblerTokenContext _localctx = new AssemblerTokenContext(Context, State);
		EnterRule(_localctx, 10, RULE_assemblerToken);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 1152921504609009419L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitsContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public TraitsStartContext traitsStart() {
			return GetRuleContext<TraitsStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitsEndContext traitsEnd() {
			return GetRuleContext<TraitsEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext[] passiveStmt() {
			return GetRuleContexts<PassiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext passiveStmt(int i) {
			return GetRuleContext<PassiveStmtContext>(i);
		}
		public TraitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTraits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTraits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitsContext traits() {
		TraitsContext _localctx = new TraitsContext(Context, State);
		EnterRule(_localctx, 12, RULE_traits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			traitsStart();
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 9007216459776064L) != 0 || _la==SEMICOLON) {
				{
				{
				State = 308;
				passiveStmt();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314;
			traitsEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitsStartContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAITS() { return GetToken(ImperiumParser.TRAITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTraitsContext declarationTraits() {
			return GetRuleContext<DeclarationTraitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureTraitsContext procedureTraits() {
			return GetRuleContext<ProcedureTraitsContext>(0);
		}
		public TraitsStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitsStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTraitsStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTraitsStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitsStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitsStartContext traitsStart() {
		TraitsStartContext _localctx = new TraitsStartContext(Context, State);
		EnterRule(_localctx, 14, RULE_traitsStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(TRAITS);
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECLARE:
				{
				State = 317;
				declarationTraits();
				}
				break;
			case PROCEDURE:
				{
				State = 318;
				procedureTraits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitsEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAITS() { return GetToken(ImperiumParser.TRAITS, 0); }
		public TraitsEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitsEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTraitsEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTraitsEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitsEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitsEndContext traitsEnd() {
		TraitsEndContext _localctx = new TraitsEndContext(Context, State);
		EnterRule(_localctx, 16, RULE_traitsEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(END);
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 322;
				Match(TRAITS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTraitsContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(ImperiumParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTraitContext[] declarationTrait() {
			return GetRuleContexts<DeclarationTraitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTraitContext declarationTrait(int i) {
			return GetRuleContext<DeclarationTraitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public DeclarationTraitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTraits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDeclarationTraits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDeclarationTraits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTraits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTraitsContext declarationTraits() {
		DeclarationTraitsContext _localctx = new DeclarationTraitsContext(Context, State);
		EnterRule(_localctx, 18, RULE_declarationTraits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(DECLARE);
			State = 326;
			Match(LPAR);
			State = 327;
			declarationTrait();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 328;
				Match(COMMA);
				State = 329;
				declarationTrait();
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 335;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTraitContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTION() { return GetToken(ImperiumParser.SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_1() { return GetToken(ImperiumParser.STRING_LITERAL_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(ImperiumParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(ImperiumParser.RETAIN, 0); }
		public DeclarationTraitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTrait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDeclarationTrait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDeclarationTrait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTrait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTraitContext declarationTrait() {
		DeclarationTraitContext _localctx = new DeclarationTraitContext(Context, State);
		EnterRule(_localctx, 20, RULE_declarationTrait);
		int _la;
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SECTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				Match(SECTION);
				State = 338;
				Match(LPAR);
				State = 339;
				Match(STRING_LITERAL_1);
				State = 340;
				Match(RPAR);
				}
				break;
			case ALIGNED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				Match(ALIGNED);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 342;
					Match(LPAR);
					State = 343;
					Match(INTEGER);
					State = 344;
					Match(RPAR);
					}
				}

				}
				break;
			case RETAIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347;
				Match(RETAIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureTraitsContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(ImperiumParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureTraitsListContext procedureTraitsList() {
			return GetRuleContext<ProcedureTraitsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public ProcedureTraitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureTraits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureTraits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureTraits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureTraits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureTraitsContext procedureTraits() {
		ProcedureTraitsContext _localctx = new ProcedureTraitsContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureTraits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(PROCEDURE);
			State = 351;
			Match(LPAR);
			State = 352;
			procedureTraitsList();
			State = 353;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureTraitsListContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureTraitContext[] procedureTrait() {
			return GetRuleContexts<ProcedureTraitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureTraitContext procedureTrait(int i) {
			return GetRuleContext<ProcedureTraitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public ProcedureTraitsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureTraitsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureTraitsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureTraitsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureTraitsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureTraitsListContext procedureTraitsList() {
		ProcedureTraitsListContext _localctx = new ProcedureTraitsListContext(Context, State);
		EnterRule(_localctx, 24, RULE_procedureTraitsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			procedureTrait();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 356;
				Match(COMMA);
				State = 357;
				procedureTrait();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureTraitContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLD() { return GetToken(ImperiumParser.COLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAKED() { return GetToken(ImperiumParser.NAKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTION() { return GetToken(ImperiumParser.SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_1() { return GetToken(ImperiumParser.STRING_LITERAL_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(ImperiumParser.RETAIN, 0); }
		public ProcedureTraitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureTrait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureTrait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureTrait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureTrait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureTraitContext procedureTrait() {
		ProcedureTraitContext _localctx = new ProcedureTraitContext(Context, State);
		EnterRule(_localctx, 26, RULE_procedureTrait);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				Match(COLD);
				}
				break;
			case NAKED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				Match(NAKED);
				}
				break;
			case SECTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365;
				Match(SECTION);
				State = 366;
				Match(LPAR);
				State = 367;
				Match(STRING_LITERAL_1);
				State = 368;
				Match(RPAR);
				}
				break;
			case RETAIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 369;
				Match(RETAIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureRuleContext : VisitorContext {
		public IdentifierContext ProcedureName;
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStmtContext procedureStmt() {
			return GetRuleContext<ProcedureStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureEndContext procedureEnd() {
			return GetRuleContext<ProcedureEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext[] passiveStmt() {
			return GetRuleContexts<PassiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext passiveStmt(int i) {
			return GetRuleContext<PassiveStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(ImperiumParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(ImperiumParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameCommalistContext parameterNameCommalist() {
			return GetRuleContext<ParameterNameCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsmBlockContext[] asmBlock() {
			return GetRuleContexts<AsmBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsmBlockContext asmBlock(int i) {
			return GetRuleContext<AsmBlockContext>(i);
		}
		public ProcedureRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureRuleContext procedureRule() {
		ProcedureRuleContext _localctx = new ProcedureRuleContext(Context, State);
		EnterRule(_localctx, 28, RULE_procedureRule);
		int _la;
		try {
			int _alt;
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				procedureStmt();
				State = 377;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 375;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
						case 1:
							{
							State = 373;
							passiveStmt();
							}
							break;
						case 2:
							{
							State = 374;
							activeStmt();
							}
							break;
						}
						} 
					}
					State = 379;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				State = 380;
				procedureEnd();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				Match(PROCEDURE);
				State = 383;
				_localctx.ProcedureName = identifier();
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 384;
					parameterNameCommalist();
					}
				}

				State = 387;
				Match(INTRINSIC);
				State = 388;
				target();
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((_la) & ~0x3f) == 0 && ((1L << _la) & 9007216459776320L) != 0 || _la==SEMICOLON) {
					{
					State = 391;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ARGUMENT:
					case DECLARE:
					case DEFINE:
					case FUNCTION:
					case PROCEDURE:
					case SEMICOLON:
						{
						State = 389;
						passiveStmt();
						}
						break;
					case ASSEMBLER:
						{
						State = 390;
						asmBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 396;
				Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 30, RULE_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(LPAR);
			State = 401;
			identifier();
			State = 402;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmBlockContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLER() { return GetToken(ImperiumParser.ASSEMBLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsmOptionsContext asmOptions() {
			return GetRuleContext<AsmOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblerStmtContext[] assemblerStmt() {
			return GetRuleContexts<AssemblerStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblerStmtContext assemblerStmt(int i) {
			return GetRuleContext<AssemblerStmtContext>(i);
		}
		public AsmBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAsmBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAsmBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmBlockContext asmBlock() {
		AsmBlockContext _localctx = new AsmBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_asmBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 404;
			Match(ASSEMBLER);
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 405;
				asmOptions();
				}
				break;
			}
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 1152921504609009419L) != 0) {
				{
				{
				State = 408;
				assemblerStmt();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 414;
			Match(END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmOptionsContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAR() { return GetTokens(ImperiumParser.LPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR(int i) {
			return GetToken(ImperiumParser.LPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAR() { return GetTokens(ImperiumParser.RPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR(int i) {
			return GetToken(ImperiumParser.RPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTION() { return GetToken(ImperiumParser.SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_1() { return GetToken(ImperiumParser.STRING_LITERAL_1, 0); }
		public AsmOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAsmOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAsmOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmOptionsContext asmOptions() {
		AsmOptionsContext _localctx = new AsmOptionsContext(Context, State);
		EnterRule(_localctx, 34, RULE_asmOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(LPAR);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SECTION) {
				{
				State = 417;
				Match(SECTION);
				State = 418;
				Match(LPAR);
				State = 419;
				Match(STRING_LITERAL_1);
				State = 420;
				Match(RPAR);
				}
			}

			State = 423;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRuleContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionEndContext functionEnd() {
			return GetRuleContext<FunctionEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext[] passiveStmt() {
			return GetRuleContexts<PassiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassiveStmtContext passiveStmt(int i) {
			return GetRuleContext<PassiveStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		public FunctionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterFunctionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitFunctionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRuleContext functionRule() {
		FunctionRuleContext _localctx = new FunctionRuleContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionRule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			functionStmt();
			State = 430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 428;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						State = 426;
						passiveStmt();
						}
						break;
					case 2:
						{
						State = 427;
						activeStmt();
						}
						break;
					}
					} 
				}
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 433;
			functionEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStmtContext : VisitorContext {
		public IdentifierContext ProcedureName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(ImperiumParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameCommalistContext parameterNameCommalist() {
			return GetRuleContext<ParameterNameCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureAttributesContext procedureAttributes() {
			return GetRuleContext<ProcedureAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAITS() { return GetToken(ImperiumParser.TRAITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureTraitsListContext procedureTraitsList() {
			return GetRuleContext<ProcedureTraitsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public ProcedureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStmtContext procedureStmt() {
		ProcedureStmtContext _localctx = new ProcedureStmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_procedureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(PROCEDURE);
			State = 436;
			_localctx.ProcedureName = identifier();
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 437;
				parameterNameCommalist();
				}
			}

			State = 441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 440;
				procedureAttributes();
				}
				break;
			}
			State = 448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 443;
				Match(TRAITS);
				State = 444;
				Match(LPAR);
				State = 445;
				procedureTraitsList();
				State = 446;
				Match(RPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : VisitorContext {
		public IdentifierContext FunctionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ImperiumParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnsDescriptorContext returnsDescriptor() {
			return GetRuleContext<ReturnsDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameCommalistContext parameterNameCommalist() {
			return GetRuleContext<ParameterNameCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionAttributesContext functionAttributes() {
			return GetRuleContext<FunctionAttributesContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(FUNCTION);
			State = 451;
			_localctx.FunctionName = identifier();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 452;
				parameterNameCommalist();
				}
			}

			State = 455;
			returnsDescriptor();
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 456;
				functionAttributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetSpecContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public TargetSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTargetSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTargetSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetSpecContext targetSpec() {
		TargetSpecContext _localctx = new TargetSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_targetSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(LPAR);
			State = 460;
			identifier();
			State = 461;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAttributesContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(ImperiumParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(ImperiumParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetSpecContext targetSpec() {
			return GetRuleContext<TargetSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(ImperiumParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERRUPT() { return GetToken(ImperiumParser.INTERRUPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(ImperiumParser.COROUTINE, 0); }
		public ProcedureAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAttributesContext procedureAttributes() {
		ProcedureAttributesContext _localctx = new ProcedureAttributesContext(Context, State);
		EnterRule(_localctx, 44, RULE_procedureAttributes);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463;
				Match(MAIN);
				}
				break;
			case INTRINSIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464;
				Match(INTRINSIC);
				State = 465;
				targetSpec();
				}
				break;
			case RECURSIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 466;
				Match(RECURSIVE);
				}
				break;
			case INTERRUPT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 467;
				Match(INTERRUPT);
				}
				break;
			case COROUTINE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 468;
				Match(COROUTINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionAttributesContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(ImperiumParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetSpecContext targetSpec() {
			return GetRuleContext<TargetSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(ImperiumParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(ImperiumParser.COFUNCTION, 0); }
		public FunctionAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterFunctionAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitFunctionAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionAttributesContext functionAttributes() {
		FunctionAttributesContext _localctx = new FunctionAttributesContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionAttributes);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTRINSIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				Match(INTRINSIC);
				State = 472;
				targetSpec();
				}
				break;
			case RECURSIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 473;
				Match(RECURSIVE);
				}
				break;
			case COFUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 474;
				Match(COFUNCTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(ImperiumParser.PROCEDURE, 0); }
		public ProcedureEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedureEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedureEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureEndContext procedureEnd() {
		ProcedureEndContext _localctx = new ProcedureEndContext(Context, State);
		EnterRule(_localctx, 48, RULE_procedureEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(END);
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 478;
				Match(PROCEDURE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ImperiumParser.FUNCTION, 0); }
		public FunctionEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterFunctionEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitFunctionEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionEndContext functionEnd() {
		FunctionEndContext _localctx = new FunctionEndContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(END);
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 482;
				Match(FUNCTION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnsDescriptorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ImperiumParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataAttributeContext dataAttribute() {
			return GetRuleContext<DataAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public ReturnsDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnsDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterReturnsDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitReturnsDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnsDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnsDescriptorContext returnsDescriptor() {
		ReturnsDescriptorContext _localctx = new ReturnsDescriptorContext(Context, State);
		EnterRule(_localctx, 52, RULE_returnsDescriptor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(RETURNS);
			State = 486;
			Match(LPAR);
			State = 487;
			dataAttribute();
			State = 488;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ImperiumParser.SEMICOLON, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTerminator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTerminator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(ImperiumParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public LabelStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterLabelStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitLabelStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelStmtContext labelStmt() {
		LabelStmtContext _localctx = new LabelStmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_labelStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(LABEL);
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 493;
				Match(LPAR);
				State = 494;
				decimalLiteral();
				State = 495;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassiveStmtContext : VisitorContext {
		public PassiveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passiveStmt; } }
	 
		public PassiveStmtContext() { }
		public virtual void CopyFrom(PassiveStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionContext : PassiveStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRuleContext functionRule() {
			return GetRuleContext<FunctionRuleContext>(0);
		}
		public FunctionContext(PassiveStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullContext : PassiveStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullStmtContext nullStmt() {
			return GetRuleContext<NullStmtContext>(0);
		}
		public NullContext(PassiveStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniionContext : PassiveStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefineStmtContext defineStmt() {
			return GetRuleContext<DefineStmtContext>(0);
		}
		public DefiniionContext(PassiveStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDefiniion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDefiniion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProcedureContext : PassiveStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRuleContext procedureRule() {
			return GetRuleContext<ProcedureRuleContext>(0);
		}
		public ProcedureContext(PassiveStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationContext : PassiveStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public DeclarationContext(PassiveStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassiveStmtContext passiveStmt() {
		PassiveStmtContext _localctx = new PassiveStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_passiveStmt);
		try {
			State = 504;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARGUMENT:
			case DECLARE:
				_localctx = new DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				declareStmt();
				}
				break;
			case DEFINE:
				_localctx = new DefiniionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 500;
				defineStmt();
				}
				break;
			case PROCEDURE:
				_localctx = new ProcedureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 501;
				procedureRule();
				}
				break;
			case FUNCTION:
				_localctx = new FunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 502;
				functionRule();
				}
				break;
			case SEMICOLON:
				_localctx = new NullContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 503;
				nullStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblerTokenContext assemblerToken() {
			return GetRuleContext<AssemblerTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullStmtContext nullStmt() {
			return GetRuleContext<NullStmtContext>(0);
		}
		public AssemblerStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAssemblerStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAssemblerStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerStmtContext assemblerStmt() {
		AssemblerStmtContext _localctx = new AssemblerStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_assemblerStmt);
		try {
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506;
				assemblerToken();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507;
				nullStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerInlineCommentContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLER_LINE_COMMENT() { return GetToken(ImperiumParser.ASSEMBLER_LINE_COMMENT, 0); }
		public AssemblerInlineCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerInlineComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAssemblerInlineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAssemblerInlineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerInlineComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerInlineCommentContext assemblerInlineComment() {
		AssemblerInlineCommentContext _localctx = new AssemblerInlineCommentContext(Context, State);
		EnterRule(_localctx, 62, RULE_assemblerInlineComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(ASSEMBLER_LINE_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActiveStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelStmtContext labelStmt() {
			return GetRuleContext<LabelStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStmtContext callStmt() {
			return GetRuleContext<CallStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStmtContext gotoStmt() {
			return GetRuleContext<GotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStmtContext loopStmt() {
			return GetRuleContext<LoopStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStmtContext selectStmt() {
			return GetRuleContext<SelectStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndloopStmtContext endloopStmt() {
			return GetRuleContext<EndloopStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloopStmtContext reloopStmt() {
			return GetRuleContext<ReloopStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullStmtContext nullStmt() {
			return GetRuleContext<NullStmtContext>(0);
		}
		public ActiveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_activeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterActiveStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitActiveStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActiveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActiveStmtContext activeStmt() {
		ActiveStmtContext _localctx = new ActiveStmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_activeStmt);
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512;
				labelStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				assignmentStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 514;
				callStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 515;
				gotoStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 516;
				returnStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 517;
				ifStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 518;
				loopStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 519;
				selectStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 520;
				endloopStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 521;
				reloopStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 522;
				nullStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ImperiumParser.SEMICOLON, 0); }
		public NullStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterNullStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitNullStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullStmtContext nullStmt() {
		NullStmtContext _localctx = new NullStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_nullStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmtContext : VisitorContext {
		public ReferenceContext Target;
		public ExpressionContext Source;
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_U() { return GetToken(ImperiumParser.ASSIGN_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ImperiumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmtContext assignmentStmt() {
		AssignmentStmtContext _localctx = new AssignmentStmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_assignmentStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			_localctx.Target = reference(0);
			State = 528;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==ASSIGN_U) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 529;
			_localctx.Source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : VisitorContext {
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	 
		public ReferenceContext() { }
		public virtual void CopyFrom(ReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicRefContext : ReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public BasicRefContext(ReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBasicRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBasicRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PtrRefContext : ReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW_U() { return GetToken(ImperiumParser.RARROW_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public PtrRefContext(ReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterPtrRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitPtrRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BasicRefContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 532;
			basicReference();
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 533;
				argumentsList();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 544;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PtrRefContext(new ReferenceContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 536;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 537;
					Match(RARROW_U);
					State = 538;
					basicReference();
					State = 540;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						State = 539;
						argumentsList();
						}
						break;
					}
					}
					} 
				}
				State = 546;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptCommalistContext subscriptCommalist() {
			return GetRuleContext<SubscriptCommalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 72, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(LPAR);
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4638716513694515199L) != 0 || (((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 131135L) != 0) {
				{
				State = 548;
				subscriptCommalist();
				}
			}

			State = 551;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 74, RULE_argumentsList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 553;
					arguments();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicReferenceContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationListContext structureQualificationList() {
			return GetRuleContext<StructureQualificationListContext>(0);
		}
		public BasicReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBasicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBasicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicReferenceContext basicReference() {
		BasicReferenceContext _localctx = new BasicReferenceContext(Context, State);
		EnterRule(_localctx, 76, RULE_basicReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 558;
				structureQualificationList();
				}
				break;
			}
			State = 561;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ImperiumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public StructureQualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructureQualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructureQualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureQualification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureQualificationContext structureQualification() {
		StructureQualificationContext _localctx = new StructureQualificationContext(Context, State);
		EnterRule(_localctx, 78, RULE_structureQualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			identifier();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 564;
				arguments();
				}
			}

			State = 567;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationListContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext[] structureQualification() {
			return GetRuleContexts<StructureQualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext structureQualification(int i) {
			return GetRuleContext<StructureQualificationContext>(i);
		}
		public StructureQualificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualificationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructureQualificationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructureQualificationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureQualificationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureQualificationListContext structureQualificationList() {
		StructureQualificationListContext _localctx = new StructureQualificationListContext(Context, State);
		EnterRule(_localctx, 80, RULE_structureQualificationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 569;
					structureQualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 82, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptCommalistContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public SubscriptCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptCommalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterSubscriptCommalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitSubscriptCommalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptCommalist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptCommalistContext subscriptCommalist() {
		SubscriptCommalistContext _localctx = new SubscriptCommalistContext(Context, State);
		EnterRule(_localctx, 84, RULE_subscriptCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			subscript();
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 577;
				Match(COMMA);
				State = 578;
				subscript();
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDAND() { return GetToken(ImperiumParser.REDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOR() { return GetToken(ImperiumParser.REDOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXOR_U() { return GetToken(ImperiumParser.REDXOR_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDNAND() { return GetToken(ImperiumParser.REDNAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDNOR() { return GetToken(ImperiumParser.REDNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXNOR_U() { return GetToken(ImperiumParser.REDXNOR_U, 0); }
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_parenthesizedExpression);
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				Match(LPAR);
				State = 585;
				expression(0);
				State = 586;
				Match(RPAR);
				}
				break;
			case REDAND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				Match(REDAND);
				State = 589;
				expression(0);
				State = 590;
				Match(RPAR);
				}
				break;
			case REDOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592;
				Match(REDOR);
				State = 593;
				expression(0);
				State = 594;
				Match(RPAR);
				}
				break;
			case REDXOR_U:
				EnterOuterAlt(_localctx, 4);
				{
				State = 596;
				Match(REDXOR_U);
				State = 597;
				expression(0);
				State = 598;
				Match(RPAR);
				}
				break;
			case REDNAND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 600;
				Match(REDNAND);
				State = 601;
				expression(0);
				State = 602;
				Match(RPAR);
				}
				break;
			case REDNOR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 604;
				Match(REDNOR);
				State = 605;
				expression(0);
				State = 606;
				Match(RPAR);
				}
				break;
			case REDXNOR_U:
				EnterOuterAlt(_localctx, 7);
				{
				State = 608;
				Match(REDXNOR_U);
				State = 609;
				expression(0);
				State = 610;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_primitiveExpression);
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_PATTERN:
			case OCTAL_PATTERN:
			case HEXADECIMAL_PATTERN:
			case INTEGER:
			case DECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				numericLiteral();
				}
				break;
			case STRING_LITERAL_3:
			case STRING_LITERAL_2:
			case STRING_LITERAL_1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				stringLiteral();
				}
				break;
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616;
				reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_prefixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			prefixOperator();
			State = 620;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAdjustOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ROTATE_U() { return GetToken(ImperiumParser.L_ROTATE_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ROTATE_U() { return GetToken(ImperiumParser.R_ROTATE_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(ImperiumParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(ImperiumParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(ImperiumParser.R_ART_SHIFT, 0); }
		public BitAdjustOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAdjustOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBitAdjustOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBitAdjustOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAdjustOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitAdjustOperatorContext bitAdjustOperator() {
		BitAdjustOperatorContext _localctx = new BitAdjustOperatorContext(Context, State);
		EnterRule(_localctx, 92, RULE_bitAdjustOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			_la = TokenStream.LA(1);
			if ( !((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & 31L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ImperiumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ImperiumParser.MINUS, 0); }
		public AdditionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAdditionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAdditionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOperatorContext additionOperator() {
		AdditionOperatorContext _localctx = new AdditionOperatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_additionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ImperiumParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_U() { return GetToken(ImperiumParser.DIVIDE_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCNT() { return GetToken(ImperiumParser.PCNT, 0); }
		public MultiplyOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMultiplyOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMultiplyOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorContext multiplyOperator() {
		MultiplyOperatorContext _localctx = new MultiplyOperatorContext(Context, State);
		EnterRule(_localctx, 96, RULE_multiplyOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			_la = TokenStream.LA(1);
			if ( !((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 524291L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ImperiumParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(ImperiumParser.NAND, 0); }
		public BoolAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAndOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBoolAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBoolAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolAndOperatorContext boolAndOperator() {
		BoolAndOperatorContext _localctx = new BoolAndOperatorContext(Context, State);
		EnterRule(_localctx, 98, RULE_boolAndOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==NAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolXorOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_U() { return GetToken(ImperiumParser.XOR_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR_U() { return GetToken(ImperiumParser.XNOR_U, 0); }
		public BoolXorOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolXorOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBoolXorOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBoolXorOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolXorOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolXorOperatorContext boolXorOperator() {
		BoolXorOperatorContext _localctx = new BoolXorOperatorContext(Context, State);
		EnterRule(_localctx, 100, RULE_boolXorOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_la = TokenStream.LA(1);
			if ( !(_la==XOR_U || _la==XNOR_U) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOrOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ImperiumParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(ImperiumParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ImperiumParser.NOT, 0); }
		public BoolOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBoolOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBoolOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOrOperatorContext boolOrOperator() {
		BoolOrOperatorContext _localctx = new BoolOrOperatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_boolOrOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			_la = TokenStream.LA(1);
			if ( !((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 5121L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : VisitorContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExpressionContext : ExpressionContext {
		public ExpressionContext Mapex;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPSTO_U() { return GetToken(ImperiumParser.MAPSTO_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_setContext map_set() {
			return GetRuleContext<Map_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_setContext bool_set() {
			return GetRuleContext<Bool_setContext>(0);
		}
		public MapExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMapExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMapExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBoolAndContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public BoolAndOperatorContext boolAndOperator() {
			return GetRuleContext<BoolAndOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprBoolAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprBoolAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprBoolAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBoolAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprConcatContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(ImperiumParser.CONC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprConcatContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprRaiseContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER_U() { return GetToken(ImperiumParser.POWER_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprRaiseContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprRaise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprRaise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprRaise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBoolXorContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public BoolXorOperatorContext boolXorOperator() {
			return GetRuleContext<BoolXorOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprBoolXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprBoolXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprBoolXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBoolXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapArgumentsContext : ExpressionContext {
		public ArgumentsContext MapArgs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPSTO_U() { return GetToken(ImperiumParser.MAPSTO_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_setContext map_set() {
			return GetRuleContext<Map_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_setContext bool_set() {
			return GetRuleContext<Bool_setContext>(0);
		}
		public MapArgumentsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMapArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMapArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLogAndContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGAND() { return GetToken(ImperiumParser.LOGAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprLogAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprLogAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprLogAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLogAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBitAdjustContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public BitAdjustOperatorContext bitAdjustOperator() {
			return GetRuleContext<BitAdjustOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprBitAdjustContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprBitAdjust(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprBitAdjust(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBitAdjust(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAddSubContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public AdditionOperatorContext additionOperator() {
			return GetRuleContext<AdditionOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprAddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprParenthesizedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public ExprParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprParenthesized(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprParenthesized(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParenthesized(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMulDivContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorContext multiplyOperator() {
			return GetRuleContext<MultiplyOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprMulDivContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLogOrContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOR() { return GetToken(ImperiumParser.LOGOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprLogOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprLogOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprLogOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLogOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCompareContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprCompareContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPrefixedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		public ExprPrefixedContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprPrefixed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprPrefixed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPrefixed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBoolOrContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public BoolOrOperatorContext boolOrOperator() {
			return GetRuleContext<BoolOrOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprBoolOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprBoolOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprBoolOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBoolOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPrimitiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public ExprPrimitiveContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterExprPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitExprPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				_localctx = new ExprPrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 635;
				primitiveExpression();
				}
				break;
			case 2:
				{
				_localctx = new ExprParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 636;
				parenthesizedExpression();
				}
				break;
			case 3:
				{
				_localctx = new ExprPrefixedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 637;
				prefixExpression();
				}
				break;
			case 4:
				{
				_localctx = new MapArgumentsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 638;
				((MapArgumentsContext)_localctx).MapArgs = arguments();
				State = 639;
				Match(MAPSTO_U);
				State = 642;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 640;
					map_set();
					}
					break;
				case 2:
					{
					State = 641;
					bool_set();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 694;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 692;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						_localctx = new ExprRaiseContext(new ExpressionContext(_parentctx, _parentState));
						((ExprRaiseContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 646;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 647;
						Match(POWER_U);
						State = 648;
						((ExprRaiseContext)_localctx).Rite = expression(13);
						}
						break;
					case 2:
						{
						_localctx = new ExprMulDivContext(new ExpressionContext(_parentctx, _parentState));
						((ExprMulDivContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 649;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 650;
						multiplyOperator();
						State = 651;
						((ExprMulDivContext)_localctx).Rite = expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExprAddSubContext(new ExpressionContext(_parentctx, _parentState));
						((ExprAddSubContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 653;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 654;
						additionOperator();
						State = 655;
						((ExprAddSubContext)_localctx).Rite = expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExprBitAdjustContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBitAdjustContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 657;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 658;
						bitAdjustOperator();
						State = 659;
						((ExprBitAdjustContext)_localctx).Rite = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExprConcatContext(new ExpressionContext(_parentctx, _parentState));
						((ExprConcatContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 661;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 662;
						Match(CONC);
						State = 663;
						((ExprConcatContext)_localctx).Rite = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExprCompareContext(new ExpressionContext(_parentctx, _parentState));
						((ExprCompareContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 664;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 665;
						comparisonOperator();
						State = 666;
						((ExprCompareContext)_localctx).Rite = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExprBoolAndContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBoolAndContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 668;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 669;
						boolAndOperator();
						State = 670;
						((ExprBoolAndContext)_localctx).Rite = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExprBoolXorContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBoolXorContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 672;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 673;
						boolXorOperator();
						State = 674;
						((ExprBoolXorContext)_localctx).Rite = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExprBoolOrContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBoolOrContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 676;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 677;
						boolOrOperator();
						State = 678;
						((ExprBoolOrContext)_localctx).Rite = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExprLogAndContext(new ExpressionContext(_parentctx, _parentState));
						((ExprLogAndContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 680;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 681;
						Match(LOGAND);
						State = 682;
						((ExprLogAndContext)_localctx).Rite = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ExprLogOrContext(new ExpressionContext(_parentctx, _parentState));
						((ExprLogOrContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 683;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 684;
						Match(LOGOR);
						State = 685;
						((ExprLogOrContext)_localctx).Rite = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new MapExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MapExpressionContext)_localctx).Mapex = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 686;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 687;
						Match(MAPSTO_U);
						State = 690;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
						case 1:
							{
							State = 688;
							map_set();
							}
							break;
						case 2:
							{
							State = 689;
							bool_set();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Map_setContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAR() { return GetTokens(ImperiumParser.LPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR(int i) {
			return GetToken(ImperiumParser.LPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(ImperiumParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(ImperiumParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAR() { return GetTokens(ImperiumParser.RPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR(int i) {
			return GetToken(ImperiumParser.RPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public Map_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMap_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMap_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_setContext map_set() {
		Map_setContext _localctx = new Map_setContext(Context, State);
		EnterRule(_localctx, 106, RULE_map_set);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 697;
					Match(LPAR);
					State = 700;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						State = 698;
						expression(0);
						}
						break;
					case 2:
						{
						State = 699;
						arguments();
						}
						break;
					}
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 702;
						Match(COMMA);
						State = 705;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
						case 1:
							{
							State = 703;
							expression(0);
							}
							break;
						case 2:
							{
							State = 704;
							arguments();
							}
							break;
						}
						}
						}
						State = 711;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 712;
					Match(COLON);
					State = 713;
					expression(0);
					State = 714;
					Match(RPAR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 720;
				Match(LPAR);
				State = 721;
				expression(0);
				State = 722;
				Match(RPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_setContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAR() { return GetTokens(ImperiumParser.LPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR(int i) {
			return GetToken(ImperiumParser.LPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAR() { return GetTokens(ImperiumParser.RPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR(int i) {
			return GetToken(ImperiumParser.RPAR, i);
		}
		public Bool_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBool_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBool_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_setContext bool_set() {
		Bool_setContext _localctx = new Bool_setContext(Context, State);
		EnterRule(_localctx, 108, RULE_bool_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 726;
			Match(LPAR);
			State = 727;
			expression(0);
			State = 728;
			Match(RPAR);
			}
			{
			State = 730;
			Match(LPAR);
			State = 731;
			expression(0);
			State = 732;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ImperiumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ImperiumParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ImperiumParser.NOT, 0); }
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterPrefixOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitPrefixOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			_la = TokenStream.LA(1);
			if ( !((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 515L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ImperiumParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE_U() { return GetToken(ImperiumParser.GTE_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ImperiumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ImperiumParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE_U() { return GetToken(ImperiumParser.LTE_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NGT() { return GetToken(ImperiumParser.NGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE_U() { return GetToken(ImperiumParser.NE_U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NLT() { return GetToken(ImperiumParser.NLT, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 112, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			_la = TokenStream.LA(1);
			if ( !((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 2080769L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(ImperiumParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(ImperiumParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(ImperiumParser.R_ART_SHIFT, 0); }
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterShiftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitShiftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 114, RULE_shiftOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			_la = TokenStream.LA(1);
			if ( !((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & 7L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(ImperiumParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public CallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterCallStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitCallStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStmtContext callStmt() {
		CallStmtContext _localctx = new CallStmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_callStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(CALL);
			State = 741;
			reference(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(ImperiumParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public GotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStmtContext gotoStmt() {
		GotoStmtContext _localctx = new GotoStmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_gotoStmt);
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 743;
				Match(GOTO);
				State = 744;
				identifier();
				State = 745;
				Match(LPAR);
				State = 746;
				expression(0);
				State = 747;
				Match(RPAR);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 749;
				Match(GOTO);
				State = 750;
				reference(0);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndloopStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDLOOP() { return GetToken(ImperiumParser.ENDLOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EndloopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endloopStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterEndloopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitEndloopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndloopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndloopStmtContext endloopStmt() {
		EndloopStmtContext _localctx = new EndloopStmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_endloopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(ENDLOOP);
			State = 755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 754;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReloopStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOOP() { return GetToken(ImperiumParser.RELOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReloopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloopStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterReloopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitReloopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReloopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReloopStmtContext reloopStmt() {
		ReloopStmtContext _localctx = new ReloopStmtContext(Context, State);
		EnterRule(_localctx, 122, RULE_reloopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(RELOOP);
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 758;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareAsBodyContext declareAsBody() {
			return GetRuleContext<DeclareAsBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(ImperiumParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT() { return GetToken(ImperiumParser.ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationBodyContext declarationBody() {
			return GetRuleContext<DeclarationBodyContext>(0);
		}
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(Context, State);
		EnterRule(_localctx, 124, RULE_declareStmt);
		int _la;
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761;
				_la = TokenStream.LA(1);
				if ( !(_la==ARGUMENT || _la==DECLARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 762;
				identifier();
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 763;
					dimensionSuffix();
					}
				}

				State = 766;
				declareAsBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				_la = TokenStream.LA(1);
				if ( !(_la==ARGUMENT || _la==DECLARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 769;
				declarationBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareAsBodyContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ImperiumParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryAttributeContext memoryAttribute() {
			return GetRuleContext<MemoryAttributeContext>(0);
		}
		public DeclareAsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareAsBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDeclareAsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDeclareAsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareAsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareAsBodyContext declareAsBody() {
		DeclareAsBodyContext _localctx = new DeclareAsBodyContext(Context, State);
		EnterRule(_localctx, 126, RULE_declareAsBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(AS);
			State = 773;
			identifier();
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 774;
				memoryAttribute();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationBodyContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInfoContext typeInfo() {
			return GetRuleContext<TypeInfoContext>(0);
		}
		public DeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDeclarationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDeclarationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationBodyContext declarationBody() {
		DeclarationBodyContext _localctx = new DeclarationBodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_declarationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			identifier();
			State = 778;
			typeInfo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInfoContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public TypeInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterTypeInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitTypeInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInfoContext typeInfo() {
		TypeInfoContext _localctx = new TypeInfoContext(Context, State);
		EnterRule(_localctx, 130, RULE_typeInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 780;
				dimensionSuffix();
				}
			}

			State = 783;
			attributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionSuffixContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairCommalistContext boundPairCommalist() {
			return GetRuleContext<BoundPairCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public DimensionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDimensionSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDimensionSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionSuffixContext dimensionSuffix() {
		DimensionSuffixContext _localctx = new DimensionSuffixContext(Context, State);
		EnterRule(_localctx, 132, RULE_dimensionSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			Match(LPAR);
			State = 786;
			boundPairCommalist();
			State = 787;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ImperiumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ImperiumParser.TIMES, 0); }
		public BoundPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBoundPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBoundPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoundPairContext boundPair() {
		BoundPairContext _localctx = new BoundPairContext(Context, State);
		EnterRule(_localctx, 134, RULE_boundPair);
		try {
			State = 796;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
			case STRING_LITERAL_3:
			case STRING_LITERAL_2:
			case STRING_LITERAL_1:
			case BINARY_PATTERN:
			case OCTAL_PATTERN:
			case HEXADECIMAL_PATTERN:
			case INTEGER:
			case DECIMAL_PATTERN:
			case LPAR:
			case PLUS:
			case MINUS:
			case NOT:
			case REDAND:
			case REDOR:
			case REDNAND:
			case REDNOR:
			case REDXOR_U:
			case REDXNOR_U:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 789;
					lowerBound();
					State = 790;
					Match(COLON);
					}
					break;
				}
				State = 794;
				upperBound();
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 795;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairCommalistContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext[] boundPair() {
			return GetRuleContexts<BoundPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext boundPair(int i) {
			return GetRuleContext<BoundPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public BoundPairCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPairCommalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBoundPairCommalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBoundPairCommalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundPairCommalist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoundPairCommalistContext boundPairCommalist() {
		BoundPairCommalistContext _localctx = new BoundPairCommalistContext(Context, State);
		EnterRule(_localctx, 136, RULE_boundPairCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			boundPair();
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 799;
				Match(COMMA);
				State = 800;
				boundPair();
				}
				}
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterLowerBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitLowerBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 138, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 140, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataAttributeContext dataAttribute() {
			return GetRuleContext<DataAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryAttributeContext memoryAttribute() {
			return GetRuleContext<MemoryAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkageOptionContext linkageOption() {
			return GetRuleContext<LinkageOptionContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 142, RULE_attributes);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 810;
				dataAttribute();
				State = 812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 811;
					memoryAttribute();
					}
					break;
				}
				State = 815;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 814;
					linkageOption();
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 817;
				dataAttribute();
				State = 819;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 818;
					linkageOption();
					}
					break;
				}
				State = 822;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 821;
					memoryAttribute();
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 824;
				memoryAttribute();
				State = 826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 825;
					dataAttribute();
					}
					break;
				}
				State = 829;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 828;
					linkageOption();
					}
					break;
				}
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 831;
				memoryAttribute();
				State = 833;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 832;
					linkageOption();
					}
					break;
				}
				State = 836;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 835;
					dataAttribute();
					}
					break;
				}
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 838;
				linkageOption();
				State = 840;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 839;
					memoryAttribute();
					}
					break;
				}
				State = 843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 842;
					dataAttribute();
					}
					break;
				}
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 845;
				linkageOption();
				State = 847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 846;
					dataAttribute();
					}
					break;
				}
				State = 850;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 849;
					memoryAttribute();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryAttributeContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(ImperiumParser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(ImperiumParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasedContext based() {
			return GetRuleContext<BasedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedContext defined() {
			return GetRuleContext<DefinedContext>(0);
		}
		public MemoryAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMemoryAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMemoryAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemoryAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemoryAttributeContext memoryAttribute() {
		MemoryAttributeContext _localctx = new MemoryAttributeContext(Context, State);
		EnterRule(_localctx, 144, RULE_memoryAttribute);
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				Match(STACK);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855;
				Match(STATIC);
				}
				break;
			case BASED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 856;
				based();
				}
				break;
			case DEFINED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 857;
				defined();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataAttributeContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(ImperiumParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericScaleContext numericScale() {
			return GetRuleContext<NumericScaleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(ImperiumParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(ImperiumParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(ImperiumParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaxLengthContext maxLength() {
			return GetRuleContext<MaxLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(ImperiumParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ImperiumParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaxStringLengthContext maxStringLength() {
			return GetRuleContext<MaxStringLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(ImperiumParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(ImperiumParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(ImperiumParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(ImperiumParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(ImperiumParser.COROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(ImperiumParser.COFUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(ImperiumParser.BUILTIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(ImperiumParser.INTRINSIC, 0); }
		public DataAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDataAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDataAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataAttributeContext dataAttribute() {
		DataAttributeContext _localctx = new DataAttributeContext(Context, State);
		EnterRule(_localctx, 146, RULE_dataAttribute);
		int _la;
		try {
			State = 902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FIXED || _la==FLOAT) {
					{
					State = 860;
					numericScale();
					}
				}

				State = 863;
				Match(BINARY);
				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 864;
					precision();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FIXED || _la==FLOAT) {
					{
					State = 867;
					numericScale();
					}
				}

				State = 870;
				Match(DECIMAL);
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 871;
					precision();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 874;
				Match(BINARY);
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 875;
					precision();
					}
				}

				State = 879;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
				case 1:
					{
					State = 878;
					numericScale();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 881;
				Match(DECIMAL);
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 882;
					precision();
					}
				}

				State = 886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 885;
					numericScale();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 888;
				Match(POINTER);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 889;
				Match(BIT);
				State = 890;
				maxLength();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 891;
				Match(CHARACTER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 892;
				Match(STRING);
				State = 893;
				maxStringLength();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 894;
				Match(ENTRY);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 895;
				Match(LABEL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 896;
				Match(OFFSET);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 897;
				Match(VARYING);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 898;
				Match(COROUTINE);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 899;
				Match(COFUNCTION);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 900;
				Match(BUILTIN);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 901;
				Match(INTRINSIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericScaleContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(ImperiumParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ImperiumParser.FLOAT, 0); }
		public NumericScaleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericScale; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterNumericScale(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitNumericScale(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericScale(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericScaleContext numericScale() {
		NumericScaleContext _localctx = new NumericScaleContext(Context, State);
		EnterRule(_localctx, 148, RULE_numericScale);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			_la = TokenStream.LA(1);
			if ( !(_la==FIXED || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkageOptionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(ImperiumParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(ImperiumParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkageSectionContext linkageSection() {
			return GetRuleContext<LinkageSectionContext>(0);
		}
		public LinkageOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkageOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterLinkageOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitLinkageOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkageOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkageOptionContext linkageOption() {
		LinkageOptionContext _localctx = new LinkageOptionContext(Context, State);
		EnterRule(_localctx, 150, RULE_linkageOption);
		try {
			State = 948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 906;
				Match(RETAIN);
				State = 908;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 907;
					Match(MAIN);
					}
					break;
				}
				State = 911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 910;
					linkageSection();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 913;
				Match(RETAIN);
				State = 915;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 914;
					linkageSection();
					}
					break;
				}
				State = 918;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 917;
					Match(MAIN);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 920;
				Match(MAIN);
				State = 922;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 921;
					Match(RETAIN);
					}
					break;
				}
				State = 925;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 924;
					linkageSection();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 927;
				Match(MAIN);
				State = 929;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 928;
					linkageSection();
					}
					break;
				}
				State = 932;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 931;
					Match(RETAIN);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 934;
				linkageSection();
				State = 936;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 935;
					Match(MAIN);
					}
					break;
				}
				State = 939;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 938;
					Match(RETAIN);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 941;
				linkageSection();
				State = 943;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 942;
					Match(RETAIN);
					}
					break;
				}
				State = 946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 945;
					Match(MAIN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkageSectionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTION() { return GetToken(ImperiumParser.SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_1() { return GetToken(ImperiumParser.STRING_LITERAL_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public LinkageSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkageSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterLinkageSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitLinkageSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkageSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkageSectionContext linkageSection() {
		LinkageSectionContext _localctx = new LinkageSectionContext(Context, State);
		EnterRule(_localctx, 152, RULE_linkageSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 950;
			Match(SECTION);
			State = 951;
			Match(LPAR);
			State = 952;
			Match(STRING_LITERAL_1);
			State = 953;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfDigitsContext numberOfDigits() {
			return GetRuleContext<NumberOfDigitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ImperiumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scale_factorContext scale_factor() {
			return GetRuleContext<Scale_factorContext>(0);
		}
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 154, RULE_precision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(LPAR);
			State = 956;
			numberOfDigits();
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 957;
				Match(COMMA);
				State = 958;
				scale_factor();
				}
			}

			State = 961;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfDigitsContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NumberOfDigitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfDigits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterNumberOfDigits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitNumberOfDigits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfDigits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfDigitsContext numberOfDigits() {
		NumberOfDigitsContext _localctx = new NumberOfDigitsContext(Context, State);
		EnterRule(_localctx, 156, RULE_numberOfDigits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				{
				State = 963;
				Match(INTEGER);
				}
				break;
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 964;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scale_factorContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Scale_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scale_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterScale_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitScale_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScale_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scale_factorContext scale_factor() {
		Scale_factorContext _localctx = new Scale_factorContext(Context, State);
		EnterRule(_localctx, 158, RULE_scale_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				{
				State = 967;
				Match(INTEGER);
				}
				break;
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 968;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxStringLengthContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ImperiumParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MaxStringLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxStringLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMaxStringLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMaxStringLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxStringLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxStringLengthContext maxStringLength() {
		MaxStringLengthContext _localctx = new MaxStringLengthContext(Context, State);
		EnterRule(_localctx, 160, RULE_maxStringLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(LPAR);
			State = 977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIMES:
				{
				State = 972;
				Match(TIMES);
				}
				break;
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
			case INTEGER:
			case IDENTIFIER:
				{
				State = 975;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
					{
					State = 973;
					Match(INTEGER);
					}
					break;
				case ACCEPT:
				case ALIAS:
				case ALIGNED:
				case ALL:
				case ANY:
				case ARGUMENT:
				case AS:
				case ASSEMBLER:
				case BASED:
				case BINARY:
				case BIT:
				case BOOLEAN:
				case BOOTSTRAP:
				case BUILTIN:
				case BY:
				case BYPASS:
				case CALL:
				case CHARACTER:
				case COFUNCTION:
				case COLD:
				case COROUTINE:
				case DECIMAL:
				case DECLARE:
				case DEFINE:
				case DEFINED:
				case ELIF:
				case ELSE:
				case END:
				case ENDLOOP:
				case ENTRY:
				case ENUM:
				case FIXED:
				case FLOAT:
				case FUNCTION:
				case GOTO:
				case IF:
				case INC:
				case INCLUDE:
				case INTERNAL:
				case INTERRUPT:
				case INTRINSIC:
				case LANGUAGE:
				case LOOP:
				case MAIN:
				case NAKED:
				case NORETURN:
				case OFFSET:
				case OTHERWISE:
				case OUT:
				case PAD:
				case POINTER:
				case PRIVATE:
				case PROCEDURE:
				case PUBLIC:
				case RAW:
				case READONLY:
				case RECURSIVE:
				case REF:
				case RELOOP:
				case RETAIN:
				case RETURN:
				case RETURNON:
				case RETURNS:
				case SCANAS:
				case SCOPE:
				case SECTION:
				case SELECT:
				case SINGLET:
				case STACK:
				case STATIC:
				case STRING:
				case STRUCTURE:
				case THEN:
				case TO:
				case TRAITS:
				case TYPE:
				case UNALIGNED:
				case UNTIL:
				case USES:
				case USING:
				case UTF:
				case VARIABLE:
				case VARYING:
				case WHEN:
				case WHILE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 974;
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 979;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxLengthContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MaxLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterMaxLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitMaxLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxLengthContext maxLength() {
		MaxLengthContext _localctx = new MaxLengthContext(Context, State);
		EnterRule(_localctx, 162, RULE_maxLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(LPAR);
			State = 984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				{
				State = 982;
				Match(INTEGER);
				}
				break;
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 983;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 986;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(ImperiumParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public BasedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_based; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBased(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBased(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBased(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasedContext based() {
		BasedContext _localctx = new BasedContext(Context, State);
		EnterRule(_localctx, 164, RULE_based);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			Match(BASED);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 989;
				Match(LPAR);
				State = 990;
				reference(0);
				State = 991;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED() { return GetToken(ImperiumParser.DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public DefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedContext defined() {
		DefinedContext _localctx = new DefinedContext(Context, State);
		EnterRule(_localctx, 166, RULE_defined);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			Match(DEFINED);
			State = 1000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 996;
				Match(LPAR);
				State = 997;
				reference(0);
				State = 998;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoprocedureSpecifierContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(ImperiumParser.COROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(ImperiumParser.COFUNCTION, 0); }
		public CoprocedureSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coprocedureSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterCoprocedureSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitCoprocedureSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoprocedureSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoprocedureSpecifierContext coprocedureSpecifier() {
		CoprocedureSpecifierContext _localctx = new CoprocedureSpecifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_coprocedureSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			_la = TokenStream.LA(1);
			if ( !(_la==COFUNCTION || _la==COROUTINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerSpecifierContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERRUPT() { return GetToken(ImperiumParser.INTERRUPT, 0); }
		public HandlerSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterHandlerSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitHandlerSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerSpecifierContext handlerSpecifier() {
		HandlerSpecifierContext _localctx = new HandlerSpecifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_handlerSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			Match(INTERRUPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameCommalistContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public ParameterNameCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterNameCommalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterParameterNameCommalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitParameterNameCommalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterNameCommalist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameCommalistContext parameterNameCommalist() {
		ParameterNameCommalistContext _localctx = new ParameterNameCommalistContext(Context, State);
		EnterRule(_localctx, 172, RULE_parameterNameCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			Match(LPAR);
			State = 1007;
			identifier();
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1008;
				Match(COMMA);
				State = 1009;
				identifier();
				}
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1015;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ImperiumParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 174, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			Match(RETURN);
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1018;
				Match(LPAR);
				State = 1019;
				expression(0);
				State = 1020;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : VisitorContext {
		public ActiveStmtContext Then;
		public ElseClauseContext ElseClause;
		public ElifClauseContext ElifClause;
		[System.Diagnostics.DebuggerNonUserCode] public ThenClauseContext thenClause() {
			return GetRuleContext<ThenClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfEndContext ifEnd() {
			return GetRuleContext<IfEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifClauseContext[] elifClause() {
			return GetRuleContexts<ElifClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifClauseContext elifClause(int i) {
			return GetRuleContext<ElifClauseContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 176, RULE_ifStmt);
		int _la;
		try {
			int _alt;
			State = 1050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024;
				thenClause();
				State = 1028;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1025;
						_localctx.Then = activeStmt();
						}
						} 
					}
					State = 1030;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 1031;
					_localctx.ElseClause = elseClause();
					}
				}

				State = 1034;
				ifEnd();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1036;
				thenClause();
				State = 1040;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1037;
						_localctx.Then = activeStmt();
						}
						} 
					}
					State = 1042;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
				}
				State = 1044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1043;
					_localctx.ElifClause = elifClause();
					}
					}
					State = 1046;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ELIF );
				State = 1048;
				ifEnd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ImperiumParser.IF, 0); }
		public IfEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterIfEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitIfEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfEndContext ifEnd() {
		IfEndContext _localctx = new IfEndContext(Context, State);
		EnterRule(_localctx, 178, RULE_ifEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(END);
			State = 1054;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1053;
				Match(IF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenClauseContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ImperiumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ImperiumParser.THEN, 0); }
		public ThenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterThenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitThenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenClauseContext thenClause() {
		ThenClauseContext _localctx = new ThenClauseContext(Context, State);
		EnterRule(_localctx, 180, RULE_thenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(IF);
			State = 1057;
			expression(0);
			State = 1058;
			Match(THEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseClauseContext : VisitorContext {
		public ActiveStmtContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ImperiumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterElseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitElseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseClauseContext elseClause() {
		ElseClauseContext _localctx = new ElseClauseContext(Context, State);
		EnterRule(_localctx, 182, RULE_elseClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			Match(ELSE);
			State = 1064;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1061;
					_localctx.Else = activeStmt();
					}
					} 
				}
				State = 1066;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifClauseContext : VisitorContext {
		public ActiveStmtContext Elif;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(ImperiumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ImperiumParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		public ElifClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterElifClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitElifClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifClauseContext elifClause() {
		ElifClauseContext _localctx = new ElifClauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_elifClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			Match(ELIF);
			State = 1068;
			expression(0);
			State = 1069;
			Match(THEN);
			State = 1073;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1070;
					_localctx.Elif = activeStmt();
					}
					} 
				}
				State = 1075;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			State = 1077;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1076;
				elseClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ImperiumParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopEndContext loopEnd() {
			return GetRuleContext<LoopEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		public LoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterLoopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitLoopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStmtContext loopStmt() {
		LoopStmtContext _localctx = new LoopStmtContext(Context, State);
		EnterRule(_localctx, 186, RULE_loopStmt);
		try {
			int _alt;
			State = 1100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079;
				Match(LOOP);
				State = 1083;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1080;
						activeStmt();
						}
						} 
					}
					State = 1085;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
				}
				State = 1086;
				loopEnd();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1087;
				Match(LOOP);
				State = 1090;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WHILE:
					{
					State = 1088;
					whileLoop();
					}
					break;
				case UNTIL:
					{
					State = 1089;
					untilLoop();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1095;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1092;
						activeStmt();
						}
						} 
					}
					State = 1097;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				}
				State = 1098;
				loopEnd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileOptionContext whileOption() {
			return GetRuleContext<WhileOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 188, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1102;
			whileOption();
			State = 1104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1103;
				untilOption();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilLoopContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileOptionContext whileOption() {
			return GetRuleContext<WhileOptionContext>(0);
		}
		public UntilLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterUntilLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitUntilLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilLoopContext untilLoop() {
		UntilLoopContext _localctx = new UntilLoopContext(Context, State);
		EnterRule(_localctx, 190, RULE_untilLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1106;
			untilOption();
			State = 1108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 1107;
				whileOption();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ImperiumParser.LOOP, 0); }
		public LoopEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterLoopEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitLoopEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopEndContext loopEnd() {
		LoopEndContext _localctx = new LoopEndContext(Context, State);
		EnterRule(_localctx, 192, RULE_loopEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			Match(END);
			State = 1112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1111;
				Match(LOOP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileOptionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ImperiumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public WhileOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterWhileOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitWhileOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileOptionContext whileOption() {
		WhileOptionContext _localctx = new WhileOptionContext(Context, State);
		EnterRule(_localctx, 194, RULE_whileOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			Match(WHILE);
			State = 1115;
			Match(LPAR);
			State = 1116;
			expression(0);
			State = 1117;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ImperiumParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 196, RULE_untilOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119;
			Match(UNTIL);
			State = 1120;
			Match(LPAR);
			State = 1121;
			expression(0);
			State = 1122;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectEndContext selectEnd() {
			return GetRuleContext<SelectEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext[] whenClause() {
			return GetRuleContexts<WhenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext whenClause(int i) {
			return GetRuleContext<WhenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherwiseClauseContext otherwiseClause() {
			return GetRuleContext<OtherwiseClauseContext>(0);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStmtContext selectStmt() {
		SelectStmtContext _localctx = new SelectStmtContext(Context, State);
		EnterRule(_localctx, 198, RULE_selectStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			selectClause();
			State = 1128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 1125;
				whenClause();
				}
				}
				State = 1130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1131;
				otherwiseClause();
				}
			}

			State = 1134;
			selectEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectEndContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(ImperiumParser.SELECT, 0); }
		public SelectEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterSelectEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitSelectEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectEndContext selectEnd() {
		SelectEndContext _localctx = new SelectEndContext(Context, State);
		EnterRule(_localctx, 200, RULE_selectEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			Match(END);
			State = 1138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 1137;
				Match(SELECT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(ImperiumParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_selectClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			Match(SELECT);
			State = 1145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1141;
				Match(LPAR);
				State = 1142;
				expression(0);
				State = 1143;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClauseContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(ImperiumParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(ImperiumParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(ImperiumParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ImperiumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ImperiumParser.COMMA, i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterWhenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitWhenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClauseContext whenClause() {
		WhenClauseContext _localctx = new WhenClauseContext(Context, State);
		EnterRule(_localctx, 204, RULE_whenClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			Match(WHEN);
			State = 1149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==ANY) {
				{
				State = 1148;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==ANY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1151;
			Match(LPAR);
			{
			State = 1152;
			expression(0);
			State = 1157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1153;
				Match(COMMA);
				State = 1154;
				expression(0);
				}
				}
				State = 1159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1160;
			Match(RPAR);
			State = 1164;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1161;
					activeStmt();
					}
					} 
				}
				State = 1166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherwiseClauseContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ImperiumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext[] activeStmt() {
			return GetRuleContexts<ActiveStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActiveStmtContext activeStmt(int i) {
			return GetRuleContext<ActiveStmtContext>(i);
		}
		public OtherwiseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwiseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterOtherwiseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitOtherwiseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherwiseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherwiseClauseContext otherwiseClause() {
		OtherwiseClauseContext _localctx = new OtherwiseClauseContext(Context, State);
		EnterRule(_localctx, 206, RULE_otherwiseClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			Match(ELSE);
			State = 1171;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1168;
					activeStmt();
					}
					} 
				}
				State = 1173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineStmtContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(ImperiumParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public DefineStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDefineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDefineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineStmtContext defineStmt() {
		DefineStmtContext _localctx = new DefineStmtContext(Context, State);
		EnterRule(_localctx, 208, RULE_defineStmt);
		try {
			State = 1186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1174;
				Match(DEFINE);
				State = 1175;
				identifier();
				State = 1176;
				enumType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1178;
				Match(DEFINE);
				State = 1179;
				identifier();
				State = 1180;
				structType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1182;
				Match(DEFINE);
				State = 1183;
				identifier();
				State = 1184;
				aliasType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUM() { return GetTokens(ImperiumParser.ENUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM(int i) {
			return GetToken(ImperiumParser.ENUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryEnumContext binaryEnum() {
			return GetRuleContext<BinaryEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalEnumContext decimalEnum() {
			return GetRuleContext<DecimalEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringEnumContext stringEnum() {
			return GetRuleContext<StringEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitEnumContext bitEnum() {
			return GetRuleContext<BitEnumContext>(0);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 210, RULE_enumType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			Match(ENUM);
			State = 1193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1189;
				binaryEnum();
				}
				break;
			case 2:
				{
				State = 1190;
				decimalEnum();
				}
				break;
			case 3:
				{
				State = 1191;
				stringEnum();
				}
				break;
			case 4:
				{
				State = 1192;
				bitEnum();
				}
				break;
			}
			State = 1195;
			enumBody();
			State = 1196;
			Match(END);
			State = 1198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1197;
				Match(ENUM);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasTypeContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(ImperiumParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AliasTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterAliasType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitAliasType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasTypeContext aliasType() {
		AliasTypeContext _localctx = new AliasTypeContext(Context, State);
		EnterRule(_localctx, 212, RULE_aliasType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			Match(ALIAS);
			State = 1201;
			attributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryEnumContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(ImperiumParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public BinaryEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBinaryEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBinaryEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryEnumContext binaryEnum() {
		BinaryEnumContext _localctx = new BinaryEnumContext(Context, State);
		EnterRule(_localctx, 214, RULE_binaryEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1203;
			Match(BINARY);
			State = 1204;
			Match(LPAR);
			State = 1205;
			decimalLiteral();
			State = 1206;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalEnumContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(ImperiumParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public DecimalEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDecimalEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDecimalEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalEnumContext decimalEnum() {
		DecimalEnumContext _localctx = new DecimalEnumContext(Context, State);
		EnterRule(_localctx, 216, RULE_decimalEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1208;
			Match(DECIMAL);
			State = 1209;
			Match(LPAR);
			State = 1210;
			decimalLiteral();
			State = 1211;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringEnumContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ImperiumParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public StringEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStringEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStringEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringEnumContext stringEnum() {
		StringEnumContext _localctx = new StringEnumContext(Context, State);
		EnterRule(_localctx, 218, RULE_stringEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1213;
			Match(STRING);
			State = 1214;
			Match(LPAR);
			State = 1215;
			decimalLiteral();
			State = 1216;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitEnumContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(ImperiumParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ImperiumParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ImperiumParser.RPAR, 0); }
		public BitEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitEnumContext bitEnum() {
		BitEnumContext _localctx = new BitEnumContext(Context, State);
		EnterRule(_localctx, 220, RULE_bitEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1218;
			Match(BIT);
			State = 1219;
			Match(LPAR);
			State = 1220;
			decimalLiteral();
			State = 1221;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(ImperiumParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(ImperiumParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumLiteralContext[] enumLiteral() {
			return GetRuleContexts<EnumLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumLiteralContext enumLiteral(int i) {
			return GetRuleContext<EnumLiteralContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 222, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223;
			identifier();
			State = 1226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 1224;
				Match(EQUALS);
				State = 1225;
				enumLiteral();
				}
			}

			State = 1235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1228;
					identifier();
					State = 1231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EQUALS) {
						{
						State = 1229;
						Match(EQUALS);
						State = 1230;
						enumLiteral();
						}
					}

					}
					} 
				}
				State = 1237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryLiteralContext binaryLiteral() {
			return GetRuleContext<BinaryLiteralContext>(0);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterEnumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitEnumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(Context, State);
		EnterRule(_localctx, 224, RULE_enumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case DECIMAL_PATTERN:
				{
				State = 1238;
				decimalLiteral();
				}
				break;
			case STRING_LITERAL_3:
			case STRING_LITERAL_2:
			case STRING_LITERAL_1:
				{
				State = 1239;
				stringLiteral();
				}
				break;
			case BINARY_PATTERN:
				{
				State = 1240;
				binaryLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE() { return GetTokens(ImperiumParser.STRUCTURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE(int i) {
			return GetToken(ImperiumParser.STRUCTURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 226, RULE_structType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			Match(STRUCTURE);
			State = 1244;
			structBody();
			State = 1245;
			Match(END);
			State = 1247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1246;
				Match(STRUCTURE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberListContext structMemberList() {
			return GetRuleContext<StructMemberListContext>(0);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 228, RULE_structBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249;
			structMemberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberListContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public StructMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberListContext structMemberList() {
		StructMemberListContext _localctx = new StructMemberListContext(Context, State);
		EnterRule(_localctx, 230, RULE_structMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			structMember();
			State = 1255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1252;
					structMember();
					}
					} 
				}
				State = 1257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSubstructContext : VisitorContext {
		public IdentifierContext StructName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE() { return GetTokens(ImperiumParser.STRUCTURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE(int i) {
			return GetToken(ImperiumParser.STRUCTURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public StructSubstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSubstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructSubstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructSubstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSubstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSubstructContext structSubstruct() {
		StructSubstructContext _localctx = new StructSubstructContext(Context, State);
		EnterRule(_localctx, 232, RULE_structSubstruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			_localctx.StructName = identifier();
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1259;
				dimensionSuffix();
				}
			}

			State = 1262;
			Match(STRUCTURE);
			State = 1263;
			structBody();
			State = 1264;
			Match(END);
			State = 1266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1265;
				Match(STRUCTURE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructSubstructContext structSubstruct() {
			return GetRuleContext<StructSubstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ImperiumParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationBodyContext declarationBody() {
			return GetRuleContext<DeclarationBodyContext>(0);
		}
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 234, RULE_structMember);
		int _la;
		try {
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1268;
				structSubstruct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1269;
				identifier();
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 1270;
					dimensionSuffix();
					}
				}

				State = 1273;
				Match(AS);
				State = 1274;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1276;
				declarationBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_3() { return GetToken(ImperiumParser.STRING_LITERAL_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_2() { return GetToken(ImperiumParser.STRING_LITERAL_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_1() { return GetToken(ImperiumParser.STRING_LITERAL_1, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 236, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			_la = TokenStream.LA(1);
			if ( !((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 7L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryLiteralContext binaryLiteral() {
			return GetRuleContext<BinaryLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctalLiteralContext octalLiteral() {
			return GetRuleContext<OctalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 238, RULE_numericLiteral);
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_PATTERN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281;
				binaryLiteral();
				}
				break;
			case OCTAL_PATTERN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1282;
				octalLiteral();
				}
				break;
			case HEXADECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1283;
				hexLiteral();
				}
				break;
			case INTEGER:
			case DECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1284;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_PATTERN() { return GetToken(ImperiumParser.HEXADECIMAL_PATTERN, 0); }
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 240, RULE_hexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1287;
			Match(HEXADECIMAL_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctalLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_PATTERN() { return GetToken(ImperiumParser.OCTAL_PATTERN, 0); }
		public OctalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterOctalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitOctalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OctalLiteralContext octalLiteral() {
		OctalLiteralContext _localctx = new OctalLiteralContext(Context, State);
		EnterRule(_localctx, 242, RULE_octalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1289;
			Match(OCTAL_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ImperiumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_PATTERN() { return GetToken(ImperiumParser.DECIMAL_PATTERN, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 244, RULE_decimalLiteral);
		try {
			State = 1293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1291;
				Match(INTEGER);
				}
				}
				break;
			case DECIMAL_PATTERN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1292;
				Match(DECIMAL_PATTERN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryLiteralContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_PATTERN() { return GetToken(ImperiumParser.BINARY_PATTERN, 0); }
		public BinaryLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterBinaryLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitBinaryLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryLiteralContext binaryLiteral() {
		BinaryLiteralContext _localctx = new BinaryLiteralContext(Context, State);
		EnterRule(_localctx, 246, RULE_binaryLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1295;
			Match(BINARY_PATTERN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : VisitorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCEPT() { return GetToken(ImperiumParser.ACCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(ImperiumParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(ImperiumParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(ImperiumParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(ImperiumParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT() { return GetToken(ImperiumParser.ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(ImperiumParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLER() { return GetToken(ImperiumParser.ASSEMBLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(ImperiumParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(ImperiumParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(ImperiumParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ImperiumParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOTSTRAP() { return GetToken(ImperiumParser.BOOTSTRAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(ImperiumParser.BUILTIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(ImperiumParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYPASS() { return GetToken(ImperiumParser.BYPASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(ImperiumParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(ImperiumParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COFUNCTION() { return GetToken(ImperiumParser.COFUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLD() { return GetToken(ImperiumParser.COLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COROUTINE() { return GetToken(ImperiumParser.COROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(ImperiumParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(ImperiumParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(ImperiumParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED() { return GetToken(ImperiumParser.DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(ImperiumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ImperiumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ImperiumParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDLOOP() { return GetToken(ImperiumParser.ENDLOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(ImperiumParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ImperiumParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(ImperiumParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ImperiumParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ImperiumParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(ImperiumParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ImperiumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(ImperiumParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(ImperiumParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(ImperiumParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERRUPT() { return GetToken(ImperiumParser.INTERRUPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(ImperiumParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(ImperiumParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ImperiumParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(ImperiumParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAKED() { return GetToken(ImperiumParser.NAKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORETURN() { return GetToken(ImperiumParser.NORETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(ImperiumParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(ImperiumParser.OTHERWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(ImperiumParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(ImperiumParser.PAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(ImperiumParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ImperiumParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(ImperiumParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ImperiumParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW() { return GetToken(ImperiumParser.RAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(ImperiumParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(ImperiumParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(ImperiumParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOOP() { return GetToken(ImperiumParser.RELOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(ImperiumParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ImperiumParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNON() { return GetToken(ImperiumParser.RETURNON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ImperiumParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCANAS() { return GetToken(ImperiumParser.SCANAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(ImperiumParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTION() { return GetToken(ImperiumParser.SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(ImperiumParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLET() { return GetToken(ImperiumParser.SINGLET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(ImperiumParser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(ImperiumParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ImperiumParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE() { return GetToken(ImperiumParser.STRUCTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ImperiumParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ImperiumParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAITS() { return GetToken(ImperiumParser.TRAITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ImperiumParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(ImperiumParser.UNALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(ImperiumParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(ImperiumParser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(ImperiumParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF() { return GetToken(ImperiumParser.UTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ImperiumParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(ImperiumParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(ImperiumParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ImperiumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(ImperiumParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ImperiumParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IImperiumListener typedListener = listener as IImperiumListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IImperiumVisitor<TResult> typedVisitor = visitor as IImperiumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 248, RULE_identifier);
		int _la;
		try {
			State = 1299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCEPT:
			case ALIAS:
			case ALIGNED:
			case ALL:
			case ANY:
			case ARGUMENT:
			case AS:
			case ASSEMBLER:
			case BASED:
			case BINARY:
			case BIT:
			case BOOLEAN:
			case BOOTSTRAP:
			case BUILTIN:
			case BY:
			case BYPASS:
			case CALL:
			case CHARACTER:
			case COFUNCTION:
			case COLD:
			case COROUTINE:
			case DECIMAL:
			case DECLARE:
			case DEFINE:
			case DEFINED:
			case ELIF:
			case ELSE:
			case END:
			case ENDLOOP:
			case ENTRY:
			case ENUM:
			case FIXED:
			case FLOAT:
			case FUNCTION:
			case GOTO:
			case IF:
			case INC:
			case INCLUDE:
			case INTERNAL:
			case INTERRUPT:
			case INTRINSIC:
			case LANGUAGE:
			case LOOP:
			case MAIN:
			case NAKED:
			case NORETURN:
			case OFFSET:
			case OTHERWISE:
			case OUT:
			case PAD:
			case POINTER:
			case PRIVATE:
			case PROCEDURE:
			case PUBLIC:
			case RAW:
			case READONLY:
			case RECURSIVE:
			case REF:
			case RELOOP:
			case RETAIN:
			case RETURN:
			case RETURNON:
			case RETURNS:
			case SCANAS:
			case SCOPE:
			case SECTION:
			case SELECT:
			case SINGLET:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCTURE:
			case THEN:
			case TO:
			case TRAITS:
			case TYPE:
			case UNALIGNED:
			case UNTIL:
			case USES:
			case USING:
			case UTF:
			case VARIABLE:
			case VARYING:
			case WHEN:
			case WHILE:
			case YIELD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1297;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8388607L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1298;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 35: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 52: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,175,1302,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,1,0,3,0,252,8,0,1,0,5,0,255,8,0,10,0,12,0,258,
		9,0,1,0,1,0,1,0,5,0,263,8,0,10,0,12,0,266,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
		5,1,274,8,1,10,1,12,1,277,9,1,1,2,1,2,1,2,1,2,5,2,283,8,2,10,2,12,2,286,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,294,8,3,10,3,12,3,297,9,3,1,3,3,3,300,
		8,3,1,4,1,4,3,4,304,8,4,1,5,1,5,1,6,1,6,5,6,310,8,6,10,6,12,6,313,9,6,
		1,6,1,6,1,7,1,7,1,7,3,7,320,8,7,1,8,1,8,3,8,324,8,8,1,9,1,9,1,9,1,9,1,
		9,5,9,331,8,9,10,9,12,9,334,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,346,8,10,1,10,3,10,349,8,10,1,11,1,11,1,11,1,11,1,11,1,
		12,1,12,1,12,5,12,359,8,12,10,12,12,12,362,9,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,3,13,371,8,13,1,14,1,14,1,14,5,14,376,8,14,10,14,12,14,379,
		9,14,1,14,1,14,1,14,1,14,1,14,3,14,386,8,14,1,14,1,14,1,14,1,14,5,14,392,
		8,14,10,14,12,14,395,9,14,1,14,1,14,3,14,399,8,14,1,15,1,15,1,15,1,15,
		1,16,1,16,3,16,407,8,16,1,16,5,16,410,8,16,10,16,12,16,413,9,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,3,17,422,8,17,1,17,1,17,1,18,1,18,1,18,5,18,
		429,8,18,10,18,12,18,432,9,18,1,18,1,18,1,19,1,19,1,19,3,19,439,8,19,1,
		19,3,19,442,8,19,1,19,1,19,1,19,1,19,1,19,3,19,449,8,19,1,20,1,20,1,20,
		3,20,454,8,20,1,20,1,20,3,20,458,8,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
		22,1,22,1,22,1,22,3,22,470,8,22,1,23,1,23,1,23,1,23,3,23,476,8,23,1,24,
		1,24,3,24,480,8,24,1,25,1,25,3,25,484,8,25,1,26,1,26,1,26,1,26,1,26,1,
		27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,498,8,28,1,29,1,29,1,29,1,29,1,29,
		3,29,505,8,29,1,30,1,30,3,30,509,8,30,1,31,1,31,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,524,8,32,1,33,1,33,1,34,1,34,1,34,
		1,34,1,35,1,35,1,35,3,35,535,8,35,1,35,1,35,1,35,1,35,3,35,541,8,35,5,
		35,543,8,35,10,35,12,35,546,9,35,1,36,1,36,3,36,550,8,36,1,36,1,36,1,37,
		4,37,555,8,37,11,37,12,37,556,1,38,3,38,560,8,38,1,38,1,38,1,39,1,39,3,
		39,566,8,39,1,39,1,39,1,40,4,40,571,8,40,11,40,12,40,572,1,41,1,41,1,42,
		1,42,1,42,5,42,580,8,42,10,42,12,42,583,9,42,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,613,8,43,1,44,1,44,1,
		44,3,44,618,8,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
		1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,643,8,
		52,3,52,645,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,3,52,691,8,52,5,52,693,8,52,10,52,12,52,696,9,
		52,1,53,1,53,1,53,3,53,701,8,53,1,53,1,53,1,53,3,53,706,8,53,5,53,708,
		8,53,10,53,12,53,711,9,53,1,53,1,53,1,53,1,53,4,53,717,8,53,11,53,12,53,
		718,1,53,1,53,1,53,1,53,3,53,725,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,3,59,752,8,59,1,60,1,60,3,60,756,8,60,1,61,1,61,
		3,61,760,8,61,1,62,1,62,1,62,3,62,765,8,62,1,62,1,62,1,62,1,62,3,62,771,
		8,62,1,63,1,63,1,63,3,63,776,8,63,1,64,1,64,1,64,1,65,3,65,782,8,65,1,
		65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,793,8,67,1,67,1,67,3,67,
		797,8,67,1,68,1,68,1,68,5,68,802,8,68,10,68,12,68,805,9,68,1,69,1,69,1,
		70,1,70,1,71,1,71,3,71,813,8,71,1,71,3,71,816,8,71,1,71,1,71,3,71,820,
		8,71,1,71,3,71,823,8,71,1,71,1,71,3,71,827,8,71,1,71,3,71,830,8,71,1,71,
		1,71,3,71,834,8,71,1,71,3,71,837,8,71,1,71,1,71,3,71,841,8,71,1,71,3,71,
		844,8,71,1,71,1,71,3,71,848,8,71,1,71,3,71,851,8,71,3,71,853,8,71,1,72,
		1,72,1,72,1,72,3,72,859,8,72,1,73,3,73,862,8,73,1,73,1,73,3,73,866,8,73,
		1,73,3,73,869,8,73,1,73,1,73,3,73,873,8,73,1,73,1,73,3,73,877,8,73,1,73,
		3,73,880,8,73,1,73,1,73,3,73,884,8,73,1,73,3,73,887,8,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,903,8,73,1,
		74,1,74,1,75,1,75,3,75,909,8,75,1,75,3,75,912,8,75,1,75,1,75,3,75,916,
		8,75,1,75,3,75,919,8,75,1,75,1,75,3,75,923,8,75,1,75,3,75,926,8,75,1,75,
		1,75,3,75,930,8,75,1,75,3,75,933,8,75,1,75,1,75,3,75,937,8,75,1,75,3,75,
		940,8,75,1,75,1,75,3,75,944,8,75,1,75,3,75,947,8,75,3,75,949,8,75,1,76,
		1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,3,77,960,8,77,1,77,1,77,1,78,1,
		78,3,78,966,8,78,1,79,1,79,3,79,970,8,79,1,80,1,80,1,80,1,80,3,80,976,
		8,80,3,80,978,8,80,1,80,1,80,1,81,1,81,1,81,3,81,985,8,81,1,81,1,81,1,
		82,1,82,1,82,1,82,1,82,3,82,994,8,82,1,83,1,83,1,83,1,83,1,83,3,83,1001,
		8,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,5,86,1011,8,86,10,86,12,86,
		1014,9,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,3,87,1023,8,87,1,88,1,88,
		5,88,1027,8,88,10,88,12,88,1030,9,88,1,88,3,88,1033,8,88,1,88,1,88,1,88,
		1,88,5,88,1039,8,88,10,88,12,88,1042,9,88,1,88,4,88,1045,8,88,11,88,12,
		88,1046,1,88,1,88,3,88,1051,8,88,1,89,1,89,3,89,1055,8,89,1,90,1,90,1,
		90,1,90,1,91,1,91,5,91,1063,8,91,10,91,12,91,1066,9,91,1,92,1,92,1,92,
		1,92,5,92,1072,8,92,10,92,12,92,1075,9,92,1,92,3,92,1078,8,92,1,93,1,93,
		5,93,1082,8,93,10,93,12,93,1085,9,93,1,93,1,93,1,93,1,93,3,93,1091,8,93,
		1,93,5,93,1094,8,93,10,93,12,93,1097,9,93,1,93,1,93,3,93,1101,8,93,1,94,
		1,94,3,94,1105,8,94,1,95,1,95,3,95,1109,8,95,1,96,1,96,3,96,1113,8,96,
		1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,5,99,1127,
		8,99,10,99,12,99,1130,9,99,1,99,3,99,1133,8,99,1,99,1,99,1,100,1,100,3,
		100,1139,8,100,1,101,1,101,1,101,1,101,1,101,3,101,1146,8,101,1,102,1,
		102,3,102,1150,8,102,1,102,1,102,1,102,1,102,5,102,1156,8,102,10,102,12,
		102,1159,9,102,1,102,1,102,5,102,1163,8,102,10,102,12,102,1166,9,102,1,
		103,1,103,5,103,1170,8,103,10,103,12,103,1173,9,103,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1187,8,104,
		1,105,1,105,1,105,1,105,1,105,3,105,1194,8,105,1,105,1,105,1,105,3,105,
		1199,8,105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,
		1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,
		1,110,1,111,1,111,1,111,3,111,1227,8,111,1,111,1,111,1,111,3,111,1232,
		8,111,5,111,1234,8,111,10,111,12,111,1237,9,111,1,112,1,112,1,112,3,112,
		1242,8,112,1,113,1,113,1,113,1,113,3,113,1248,8,113,1,114,1,114,1,115,
		1,115,5,115,1254,8,115,10,115,12,115,1257,9,115,1,116,1,116,3,116,1261,
		8,116,1,116,1,116,1,116,1,116,3,116,1267,8,116,1,117,1,117,1,117,3,117,
		1272,8,117,1,117,1,117,1,117,1,117,3,117,1278,8,117,1,118,1,118,1,119,
		1,119,1,119,1,119,3,119,1286,8,119,1,120,1,120,1,121,1,121,1,122,1,122,
		3,122,1294,8,122,1,123,1,123,1,124,1,124,3,124,1300,8,124,1,124,0,2,70,
		104,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
		240,242,244,246,248,0,17,5,0,98,99,101,101,106,113,119,119,158,158,1,0,
		113,114,1,0,150,154,1,0,117,118,2,0,115,116,134,134,2,0,135,135,137,137,
		1,0,139,140,3,0,126,126,136,136,138,138,2,0,117,118,126,126,2,0,113,113,
		127,133,1,0,150,152,2,0,6,6,23,23,1,0,32,33,2,0,19,19,21,21,1,0,4,5,1,
		0,90,92,1,0,1,86,1406,0,251,1,0,0,0,2,269,1,0,0,0,4,278,1,0,0,0,6,289,
		1,0,0,0,8,301,1,0,0,0,10,305,1,0,0,0,12,307,1,0,0,0,14,316,1,0,0,0,16,
		321,1,0,0,0,18,325,1,0,0,0,20,348,1,0,0,0,22,350,1,0,0,0,24,355,1,0,0,
		0,26,370,1,0,0,0,28,398,1,0,0,0,30,400,1,0,0,0,32,404,1,0,0,0,34,416,1,
		0,0,0,36,425,1,0,0,0,38,435,1,0,0,0,40,450,1,0,0,0,42,459,1,0,0,0,44,469,
		1,0,0,0,46,475,1,0,0,0,48,477,1,0,0,0,50,481,1,0,0,0,52,485,1,0,0,0,54,
		490,1,0,0,0,56,492,1,0,0,0,58,504,1,0,0,0,60,508,1,0,0,0,62,510,1,0,0,
		0,64,523,1,0,0,0,66,525,1,0,0,0,68,527,1,0,0,0,70,531,1,0,0,0,72,547,1,
		0,0,0,74,554,1,0,0,0,76,559,1,0,0,0,78,563,1,0,0,0,80,570,1,0,0,0,82,574,
		1,0,0,0,84,576,1,0,0,0,86,612,1,0,0,0,88,617,1,0,0,0,90,619,1,0,0,0,92,
		622,1,0,0,0,94,624,1,0,0,0,96,626,1,0,0,0,98,628,1,0,0,0,100,630,1,0,0,
		0,102,632,1,0,0,0,104,644,1,0,0,0,106,716,1,0,0,0,108,726,1,0,0,0,110,
		734,1,0,0,0,112,736,1,0,0,0,114,738,1,0,0,0,116,740,1,0,0,0,118,751,1,
		0,0,0,120,753,1,0,0,0,122,757,1,0,0,0,124,770,1,0,0,0,126,772,1,0,0,0,
		128,777,1,0,0,0,130,781,1,0,0,0,132,785,1,0,0,0,134,796,1,0,0,0,136,798,
		1,0,0,0,138,806,1,0,0,0,140,808,1,0,0,0,142,852,1,0,0,0,144,858,1,0,0,
		0,146,902,1,0,0,0,148,904,1,0,0,0,150,948,1,0,0,0,152,950,1,0,0,0,154,
		955,1,0,0,0,156,965,1,0,0,0,158,969,1,0,0,0,160,971,1,0,0,0,162,981,1,
		0,0,0,164,988,1,0,0,0,166,995,1,0,0,0,168,1002,1,0,0,0,170,1004,1,0,0,
		0,172,1006,1,0,0,0,174,1017,1,0,0,0,176,1050,1,0,0,0,178,1052,1,0,0,0,
		180,1056,1,0,0,0,182,1060,1,0,0,0,184,1067,1,0,0,0,186,1100,1,0,0,0,188,
		1102,1,0,0,0,190,1106,1,0,0,0,192,1110,1,0,0,0,194,1114,1,0,0,0,196,1119,
		1,0,0,0,198,1124,1,0,0,0,200,1136,1,0,0,0,202,1140,1,0,0,0,204,1147,1,
		0,0,0,206,1167,1,0,0,0,208,1186,1,0,0,0,210,1188,1,0,0,0,212,1200,1,0,
		0,0,214,1203,1,0,0,0,216,1208,1,0,0,0,218,1213,1,0,0,0,220,1218,1,0,0,
		0,222,1223,1,0,0,0,224,1241,1,0,0,0,226,1243,1,0,0,0,228,1249,1,0,0,0,
		230,1251,1,0,0,0,232,1258,1,0,0,0,234,1277,1,0,0,0,236,1279,1,0,0,0,238,
		1285,1,0,0,0,240,1287,1,0,0,0,242,1289,1,0,0,0,244,1293,1,0,0,0,246,1295,
		1,0,0,0,248,1299,1,0,0,0,250,252,5,93,0,0,251,250,1,0,0,0,251,252,1,0,
		0,0,252,256,1,0,0,0,253,255,3,2,1,0,254,253,1,0,0,0,255,258,1,0,0,0,256,
		254,1,0,0,0,256,257,1,0,0,0,257,264,1,0,0,0,258,256,1,0,0,0,259,263,3,
		4,2,0,260,263,3,12,6,0,261,263,3,58,29,0,262,259,1,0,0,0,262,260,1,0,0,
		0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,
		267,1,0,0,0,266,264,1,0,0,0,267,268,5,0,0,1,268,1,1,0,0,0,269,270,5,79,
		0,0,270,275,3,248,124,0,271,272,5,105,0,0,272,274,3,248,124,0,273,271,
		1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,3,1,0,0,0,
		277,275,1,0,0,0,278,284,3,6,3,0,279,283,3,4,2,0,280,283,3,12,6,0,281,283,
		3,58,29,0,282,279,1,0,0,0,282,280,1,0,0,0,282,281,1,0,0,0,283,286,1,0,
		0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,
		288,3,8,4,0,288,5,1,0,0,0,289,290,5,65,0,0,290,295,3,248,124,0,291,292,
		5,105,0,0,292,294,3,248,124,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,
		1,0,0,0,295,296,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,298,300,5,52,0,
		0,299,298,1,0,0,0,299,300,1,0,0,0,300,7,1,0,0,0,301,303,5,28,0,0,302,304,
		5,65,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,9,1,0,0,0,305,306,7,0,0,0,
		306,11,1,0,0,0,307,311,3,14,7,0,308,310,3,58,29,0,309,308,1,0,0,0,310,
		313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,
		0,0,0,314,315,3,16,8,0,315,13,1,0,0,0,316,319,5,75,0,0,317,320,3,18,9,
		0,318,320,3,22,11,0,319,317,1,0,0,0,319,318,1,0,0,0,320,15,1,0,0,0,321,
		323,5,28,0,0,322,324,5,75,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,17,1,
		0,0,0,325,326,5,23,0,0,326,327,5,107,0,0,327,332,3,20,10,0,328,329,5,106,
		0,0,329,331,3,20,10,0,330,328,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,
		332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,336,5,108,0,0,336,
		19,1,0,0,0,337,338,5,66,0,0,338,339,5,107,0,0,339,340,5,92,0,0,340,349,
		5,108,0,0,341,345,5,3,0,0,342,343,5,107,0,0,343,344,5,98,0,0,344,346,5,
		108,0,0,345,342,1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,349,5,60,0,
		0,348,337,1,0,0,0,348,341,1,0,0,0,348,347,1,0,0,0,349,21,1,0,0,0,350,351,
		5,53,0,0,351,352,5,107,0,0,352,353,3,24,12,0,353,354,5,108,0,0,354,23,
		1,0,0,0,355,360,3,26,13,0,356,357,5,106,0,0,357,359,3,26,13,0,358,356,
		1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,25,1,0,0,0,
		362,360,1,0,0,0,363,371,5,20,0,0,364,371,5,45,0,0,365,366,5,66,0,0,366,
		367,5,107,0,0,367,368,5,92,0,0,368,371,5,108,0,0,369,371,5,60,0,0,370,
		363,1,0,0,0,370,364,1,0,0,0,370,365,1,0,0,0,370,369,1,0,0,0,371,27,1,0,
		0,0,372,377,3,38,19,0,373,376,3,58,29,0,374,376,3,64,32,0,375,373,1,0,
		0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,
		380,1,0,0,0,379,377,1,0,0,0,380,381,3,48,24,0,381,399,1,0,0,0,382,383,
		5,53,0,0,383,385,3,248,124,0,384,386,3,172,86,0,385,384,1,0,0,0,385,386,
		1,0,0,0,386,387,1,0,0,0,387,388,5,41,0,0,388,393,3,30,15,0,389,392,3,58,
		29,0,390,392,3,32,16,0,391,389,1,0,0,0,391,390,1,0,0,0,392,395,1,0,0,0,
		393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,397,
		5,28,0,0,397,399,1,0,0,0,398,372,1,0,0,0,398,382,1,0,0,0,399,29,1,0,0,
		0,400,401,5,107,0,0,401,402,3,248,124,0,402,403,5,108,0,0,403,31,1,0,0,
		0,404,406,5,8,0,0,405,407,3,34,17,0,406,405,1,0,0,0,406,407,1,0,0,0,407,
		411,1,0,0,0,408,410,3,60,30,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,
		1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,415,5,28,0,
		0,415,33,1,0,0,0,416,421,5,107,0,0,417,418,5,66,0,0,418,419,5,107,0,0,
		419,420,5,92,0,0,420,422,5,108,0,0,421,417,1,0,0,0,421,422,1,0,0,0,422,
		423,1,0,0,0,423,424,5,108,0,0,424,35,1,0,0,0,425,430,3,40,20,0,426,429,
		3,58,29,0,427,429,3,64,32,0,428,426,1,0,0,0,428,427,1,0,0,0,429,432,1,
		0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,
		433,434,3,50,25,0,434,37,1,0,0,0,435,436,5,53,0,0,436,438,3,248,124,0,
		437,439,3,172,86,0,438,437,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,
		442,3,44,22,0,441,440,1,0,0,0,441,442,1,0,0,0,442,448,1,0,0,0,443,444,
		5,75,0,0,444,445,5,107,0,0,445,446,3,24,12,0,446,447,5,108,0,0,447,449,
		1,0,0,0,448,443,1,0,0,0,448,449,1,0,0,0,449,39,1,0,0,0,450,451,5,34,0,
		0,451,453,3,248,124,0,452,454,3,172,86,0,453,452,1,0,0,0,453,454,1,0,0,
		0,454,455,1,0,0,0,455,457,3,52,26,0,456,458,3,46,23,0,457,456,1,0,0,0,
		457,458,1,0,0,0,458,41,1,0,0,0,459,460,5,107,0,0,460,461,3,248,124,0,461,
		462,5,108,0,0,462,43,1,0,0,0,463,470,5,44,0,0,464,465,5,41,0,0,465,470,
		3,42,21,0,466,470,5,57,0,0,467,470,5,40,0,0,468,470,5,21,0,0,469,463,1,
		0,0,0,469,464,1,0,0,0,469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,0,0,0,
		470,45,1,0,0,0,471,472,5,41,0,0,472,476,3,42,21,0,473,476,5,57,0,0,474,
		476,5,19,0,0,475,471,1,0,0,0,475,473,1,0,0,0,475,474,1,0,0,0,476,47,1,
		0,0,0,477,479,5,28,0,0,478,480,5,53,0,0,479,478,1,0,0,0,479,480,1,0,0,
		0,480,49,1,0,0,0,481,483,5,28,0,0,482,484,5,34,0,0,483,482,1,0,0,0,483,
		484,1,0,0,0,484,51,1,0,0,0,485,486,5,63,0,0,486,487,5,107,0,0,487,488,
		3,146,73,0,488,489,5,108,0,0,489,53,1,0,0,0,490,491,5,119,0,0,491,55,1,
		0,0,0,492,497,5,94,0,0,493,494,5,107,0,0,494,495,3,244,122,0,495,496,5,
		108,0,0,496,498,1,0,0,0,497,493,1,0,0,0,497,498,1,0,0,0,498,57,1,0,0,0,
		499,505,3,124,62,0,500,505,3,208,104,0,501,505,3,28,14,0,502,505,3,36,
		18,0,503,505,3,66,33,0,504,499,1,0,0,0,504,500,1,0,0,0,504,501,1,0,0,0,
		504,502,1,0,0,0,504,503,1,0,0,0,505,59,1,0,0,0,506,509,3,10,5,0,507,509,
		3,66,33,0,508,506,1,0,0,0,508,507,1,0,0,0,509,61,1,0,0,0,510,511,5,168,
		0,0,511,63,1,0,0,0,512,524,3,56,28,0,513,524,3,68,34,0,514,524,3,116,58,
		0,515,524,3,118,59,0,516,524,3,174,87,0,517,524,3,176,88,0,518,524,3,186,
		93,0,519,524,3,198,99,0,520,524,3,120,60,0,521,524,3,122,61,0,522,524,
		3,66,33,0,523,512,1,0,0,0,523,513,1,0,0,0,523,514,1,0,0,0,523,515,1,0,
		0,0,523,516,1,0,0,0,523,517,1,0,0,0,523,518,1,0,0,0,523,519,1,0,0,0,523,
		520,1,0,0,0,523,521,1,0,0,0,523,522,1,0,0,0,524,65,1,0,0,0,525,526,5,119,
		0,0,526,67,1,0,0,0,527,528,3,70,35,0,528,529,7,1,0,0,529,530,3,104,52,
		0,530,69,1,0,0,0,531,532,6,35,-1,0,532,534,3,76,38,0,533,535,3,74,37,0,
		534,533,1,0,0,0,534,535,1,0,0,0,535,544,1,0,0,0,536,537,10,2,0,0,537,538,
		5,103,0,0,538,540,3,76,38,0,539,541,3,74,37,0,540,539,1,0,0,0,540,541,
		1,0,0,0,541,543,1,0,0,0,542,536,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,
		0,544,545,1,0,0,0,545,71,1,0,0,0,546,544,1,0,0,0,547,549,5,107,0,0,548,
		550,3,84,42,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,
		5,108,0,0,552,73,1,0,0,0,553,555,3,72,36,0,554,553,1,0,0,0,555,556,1,0,
		0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,75,1,0,0,0,558,560,3,80,40,0,559,
		558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,3,248,124,0,562,77,
		1,0,0,0,563,565,3,248,124,0,564,566,3,72,36,0,565,564,1,0,0,0,565,566,
		1,0,0,0,566,567,1,0,0,0,567,568,5,105,0,0,568,79,1,0,0,0,569,571,3,78,
		39,0,570,569,1,0,0,0,571,572,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,
		81,1,0,0,0,574,575,3,104,52,0,575,83,1,0,0,0,576,581,3,82,41,0,577,578,
		5,106,0,0,578,580,3,82,41,0,579,577,1,0,0,0,580,583,1,0,0,0,581,579,1,
		0,0,0,581,582,1,0,0,0,582,85,1,0,0,0,583,581,1,0,0,0,584,585,5,107,0,0,
		585,586,3,104,52,0,586,587,5,108,0,0,587,613,1,0,0,0,588,589,5,141,0,0,
		589,590,3,104,52,0,590,591,5,108,0,0,591,613,1,0,0,0,592,593,5,142,0,0,
		593,594,3,104,52,0,594,595,5,108,0,0,595,613,1,0,0,0,596,597,5,145,0,0,
		597,598,3,104,52,0,598,599,5,108,0,0,599,613,1,0,0,0,600,601,5,143,0,0,
		601,602,3,104,52,0,602,603,5,108,0,0,603,613,1,0,0,0,604,605,5,144,0,0,
		605,606,3,104,52,0,606,607,5,108,0,0,607,613,1,0,0,0,608,609,5,146,0,0,
		609,610,3,104,52,0,610,611,5,108,0,0,611,613,1,0,0,0,612,584,1,0,0,0,612,
		588,1,0,0,0,612,592,1,0,0,0,612,596,1,0,0,0,612,600,1,0,0,0,612,604,1,
		0,0,0,612,608,1,0,0,0,613,87,1,0,0,0,614,618,3,238,119,0,615,618,3,236,
		118,0,616,618,3,70,35,0,617,614,1,0,0,0,617,615,1,0,0,0,617,616,1,0,0,
		0,618,89,1,0,0,0,619,620,3,110,55,0,620,621,3,104,52,0,621,91,1,0,0,0,
		622,623,7,2,0,0,623,93,1,0,0,0,624,625,7,3,0,0,625,95,1,0,0,0,626,627,
		7,4,0,0,627,97,1,0,0,0,628,629,7,5,0,0,629,99,1,0,0,0,630,631,7,6,0,0,
		631,101,1,0,0,0,632,633,7,7,0,0,633,103,1,0,0,0,634,635,6,52,-1,0,635,
		645,3,88,44,0,636,645,3,86,43,0,637,645,3,90,45,0,638,639,3,72,36,0,639,
		642,5,104,0,0,640,643,3,106,53,0,641,643,3,108,54,0,642,640,1,0,0,0,642,
		641,1,0,0,0,643,645,1,0,0,0,644,634,1,0,0,0,644,636,1,0,0,0,644,637,1,
		0,0,0,644,638,1,0,0,0,645,694,1,0,0,0,646,647,10,13,0,0,647,648,5,120,
		0,0,648,693,3,104,52,13,649,650,10,12,0,0,650,651,3,96,48,0,651,652,3,
		104,52,13,652,693,1,0,0,0,653,654,10,11,0,0,654,655,3,94,47,0,655,656,
		3,104,52,12,656,693,1,0,0,0,657,658,10,10,0,0,658,659,3,92,46,0,659,660,
		3,104,52,11,660,693,1,0,0,0,661,662,10,9,0,0,662,663,5,149,0,0,663,693,
		3,104,52,10,664,665,10,8,0,0,665,666,3,112,56,0,666,667,3,104,52,9,667,
		693,1,0,0,0,668,669,10,7,0,0,669,670,3,98,49,0,670,671,3,104,52,8,671,
		693,1,0,0,0,672,673,10,6,0,0,673,674,3,100,50,0,674,675,3,104,52,7,675,
		693,1,0,0,0,676,677,10,5,0,0,677,678,3,102,51,0,678,679,3,104,52,6,679,
		693,1,0,0,0,680,681,10,4,0,0,681,682,5,147,0,0,682,693,3,104,52,5,683,
		684,10,3,0,0,684,685,5,148,0,0,685,693,3,104,52,4,686,687,10,2,0,0,687,
		690,5,104,0,0,688,691,3,106,53,0,689,691,3,108,54,0,690,688,1,0,0,0,690,
		689,1,0,0,0,691,693,1,0,0,0,692,646,1,0,0,0,692,649,1,0,0,0,692,653,1,
		0,0,0,692,657,1,0,0,0,692,661,1,0,0,0,692,664,1,0,0,0,692,668,1,0,0,0,
		692,672,1,0,0,0,692,676,1,0,0,0,692,680,1,0,0,0,692,683,1,0,0,0,692,686,
		1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,105,1,0,0,
		0,696,694,1,0,0,0,697,700,5,107,0,0,698,701,3,104,52,0,699,701,3,72,36,
		0,700,698,1,0,0,0,700,699,1,0,0,0,701,709,1,0,0,0,702,705,5,106,0,0,703,
		706,3,104,52,0,704,706,3,72,36,0,705,703,1,0,0,0,705,704,1,0,0,0,706,708,
		1,0,0,0,707,702,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,
		0,710,712,1,0,0,0,711,709,1,0,0,0,712,713,5,121,0,0,713,714,3,104,52,0,
		714,715,5,108,0,0,715,717,1,0,0,0,716,697,1,0,0,0,717,718,1,0,0,0,718,
		716,1,0,0,0,718,719,1,0,0,0,719,724,1,0,0,0,720,721,5,107,0,0,721,722,
		3,104,52,0,722,723,5,108,0,0,723,725,1,0,0,0,724,720,1,0,0,0,724,725,1,
		0,0,0,725,107,1,0,0,0,726,727,5,107,0,0,727,728,3,104,52,0,728,729,5,108,
		0,0,729,730,1,0,0,0,730,731,5,107,0,0,731,732,3,104,52,0,732,733,5,108,
		0,0,733,109,1,0,0,0,734,735,7,8,0,0,735,111,1,0,0,0,736,737,7,9,0,0,737,
		113,1,0,0,0,738,739,7,10,0,0,739,115,1,0,0,0,740,741,5,17,0,0,741,742,
		3,70,35,0,742,117,1,0,0,0,743,744,5,35,0,0,744,745,3,248,124,0,745,746,
		5,107,0,0,746,747,3,104,52,0,747,748,5,108,0,0,748,752,1,0,0,0,749,750,
		5,35,0,0,750,752,3,70,35,0,751,743,1,0,0,0,751,749,1,0,0,0,752,119,1,0,
		0,0,753,755,5,29,0,0,754,756,3,248,124,0,755,754,1,0,0,0,755,756,1,0,0,
		0,756,121,1,0,0,0,757,759,5,59,0,0,758,760,3,248,124,0,759,758,1,0,0,0,
		759,760,1,0,0,0,760,123,1,0,0,0,761,762,7,11,0,0,762,764,3,248,124,0,763,
		765,3,132,66,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,
		3,126,63,0,767,771,1,0,0,0,768,769,7,11,0,0,769,771,3,128,64,0,770,761,
		1,0,0,0,770,768,1,0,0,0,771,125,1,0,0,0,772,773,5,7,0,0,773,775,3,248,
		124,0,774,776,3,144,72,0,775,774,1,0,0,0,775,776,1,0,0,0,776,127,1,0,0,
		0,777,778,3,248,124,0,778,779,3,130,65,0,779,129,1,0,0,0,780,782,3,132,
		66,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,784,3,142,71,
		0,784,131,1,0,0,0,785,786,5,107,0,0,786,787,3,136,68,0,787,788,5,108,0,
		0,788,133,1,0,0,0,789,790,3,138,69,0,790,791,5,121,0,0,791,793,1,0,0,0,
		792,789,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,797,3,140,70,0,795,
		797,5,115,0,0,796,792,1,0,0,0,796,795,1,0,0,0,797,135,1,0,0,0,798,803,
		3,134,67,0,799,800,5,106,0,0,800,802,3,134,67,0,801,799,1,0,0,0,802,805,
		1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,137,1,0,0,0,805,803,1,0,0,
		0,806,807,3,104,52,0,807,139,1,0,0,0,808,809,3,104,52,0,809,141,1,0,0,
		0,810,812,3,146,73,0,811,813,3,144,72,0,812,811,1,0,0,0,812,813,1,0,0,
		0,813,815,1,0,0,0,814,816,3,150,75,0,815,814,1,0,0,0,815,816,1,0,0,0,816,
		853,1,0,0,0,817,819,3,146,73,0,818,820,3,150,75,0,819,818,1,0,0,0,819,
		820,1,0,0,0,820,822,1,0,0,0,821,823,3,144,72,0,822,821,1,0,0,0,822,823,
		1,0,0,0,823,853,1,0,0,0,824,826,3,144,72,0,825,827,3,146,73,0,826,825,
		1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,830,3,150,75,0,829,828,1,0,
		0,0,829,830,1,0,0,0,830,853,1,0,0,0,831,833,3,144,72,0,832,834,3,150,75,
		0,833,832,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,837,3,146,73,0,836,
		835,1,0,0,0,836,837,1,0,0,0,837,853,1,0,0,0,838,840,3,150,75,0,839,841,
		3,144,72,0,840,839,1,0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,844,3,146,
		73,0,843,842,1,0,0,0,843,844,1,0,0,0,844,853,1,0,0,0,845,847,3,150,75,
		0,846,848,3,146,73,0,847,846,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,
		851,3,144,72,0,850,849,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,852,810,
		1,0,0,0,852,817,1,0,0,0,852,824,1,0,0,0,852,831,1,0,0,0,852,838,1,0,0,
		0,852,845,1,0,0,0,853,143,1,0,0,0,854,859,5,69,0,0,855,859,5,70,0,0,856,
		859,3,164,82,0,857,859,3,166,83,0,858,854,1,0,0,0,858,855,1,0,0,0,858,
		856,1,0,0,0,858,857,1,0,0,0,859,145,1,0,0,0,860,862,3,148,74,0,861,860,
		1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,865,5,10,0,0,864,866,3,154,
		77,0,865,864,1,0,0,0,865,866,1,0,0,0,866,903,1,0,0,0,867,869,3,148,74,
		0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,872,5,22,0,0,871,
		873,3,154,77,0,872,871,1,0,0,0,872,873,1,0,0,0,873,903,1,0,0,0,874,876,
		5,10,0,0,875,877,3,154,77,0,876,875,1,0,0,0,876,877,1,0,0,0,877,879,1,
		0,0,0,878,880,3,148,74,0,879,878,1,0,0,0,879,880,1,0,0,0,880,903,1,0,0,
		0,881,883,5,22,0,0,882,884,3,154,77,0,883,882,1,0,0,0,883,884,1,0,0,0,
		884,886,1,0,0,0,885,887,3,148,74,0,886,885,1,0,0,0,886,887,1,0,0,0,887,
		903,1,0,0,0,888,903,5,51,0,0,889,890,5,11,0,0,890,903,3,162,81,0,891,903,
		5,18,0,0,892,893,5,71,0,0,893,903,3,160,80,0,894,903,5,30,0,0,895,903,
		5,94,0,0,896,903,5,47,0,0,897,903,5,83,0,0,898,903,5,21,0,0,899,903,5,
		19,0,0,900,903,5,14,0,0,901,903,5,41,0,0,902,861,1,0,0,0,902,868,1,0,0,
		0,902,874,1,0,0,0,902,881,1,0,0,0,902,888,1,0,0,0,902,889,1,0,0,0,902,
		891,1,0,0,0,902,892,1,0,0,0,902,894,1,0,0,0,902,895,1,0,0,0,902,896,1,
		0,0,0,902,897,1,0,0,0,902,898,1,0,0,0,902,899,1,0,0,0,902,900,1,0,0,0,
		902,901,1,0,0,0,903,147,1,0,0,0,904,905,7,12,0,0,905,149,1,0,0,0,906,908,
		5,60,0,0,907,909,5,44,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,911,1,0,
		0,0,910,912,3,152,76,0,911,910,1,0,0,0,911,912,1,0,0,0,912,949,1,0,0,0,
		913,915,5,60,0,0,914,916,3,152,76,0,915,914,1,0,0,0,915,916,1,0,0,0,916,
		918,1,0,0,0,917,919,5,44,0,0,918,917,1,0,0,0,918,919,1,0,0,0,919,949,1,
		0,0,0,920,922,5,44,0,0,921,923,5,60,0,0,922,921,1,0,0,0,922,923,1,0,0,
		0,923,925,1,0,0,0,924,926,3,152,76,0,925,924,1,0,0,0,925,926,1,0,0,0,926,
		949,1,0,0,0,927,929,5,44,0,0,928,930,3,152,76,0,929,928,1,0,0,0,929,930,
		1,0,0,0,930,932,1,0,0,0,931,933,5,60,0,0,932,931,1,0,0,0,932,933,1,0,0,
		0,933,949,1,0,0,0,934,936,3,152,76,0,935,937,5,44,0,0,936,935,1,0,0,0,
		936,937,1,0,0,0,937,939,1,0,0,0,938,940,5,60,0,0,939,938,1,0,0,0,939,940,
		1,0,0,0,940,949,1,0,0,0,941,943,3,152,76,0,942,944,5,60,0,0,943,942,1,
		0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,947,5,44,0,0,946,945,1,0,0,0,
		946,947,1,0,0,0,947,949,1,0,0,0,948,906,1,0,0,0,948,913,1,0,0,0,948,920,
		1,0,0,0,948,927,1,0,0,0,948,934,1,0,0,0,948,941,1,0,0,0,949,151,1,0,0,
		0,950,951,5,66,0,0,951,952,5,107,0,0,952,953,5,92,0,0,953,954,5,108,0,
		0,954,153,1,0,0,0,955,956,5,107,0,0,956,959,3,156,78,0,957,958,5,106,0,
		0,958,960,3,158,79,0,959,957,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,
		962,5,108,0,0,962,155,1,0,0,0,963,966,5,98,0,0,964,966,3,248,124,0,965,
		963,1,0,0,0,965,964,1,0,0,0,966,157,1,0,0,0,967,970,5,98,0,0,968,970,3,
		248,124,0,969,967,1,0,0,0,969,968,1,0,0,0,970,159,1,0,0,0,971,977,5,107,
		0,0,972,978,5,115,0,0,973,976,5,98,0,0,974,976,3,248,124,0,975,973,1,0,
		0,0,975,974,1,0,0,0,976,978,1,0,0,0,977,972,1,0,0,0,977,975,1,0,0,0,978,
		979,1,0,0,0,979,980,5,108,0,0,980,161,1,0,0,0,981,984,5,107,0,0,982,985,
		5,98,0,0,983,985,3,248,124,0,984,982,1,0,0,0,984,983,1,0,0,0,985,986,1,
		0,0,0,986,987,5,108,0,0,987,163,1,0,0,0,988,993,5,9,0,0,989,990,5,107,
		0,0,990,991,3,70,35,0,991,992,5,108,0,0,992,994,1,0,0,0,993,989,1,0,0,
		0,993,994,1,0,0,0,994,165,1,0,0,0,995,1000,5,25,0,0,996,997,5,107,0,0,
		997,998,3,70,35,0,998,999,5,108,0,0,999,1001,1,0,0,0,1000,996,1,0,0,0,
		1000,1001,1,0,0,0,1001,167,1,0,0,0,1002,1003,7,13,0,0,1003,169,1,0,0,0,
		1004,1005,5,40,0,0,1005,171,1,0,0,0,1006,1007,5,107,0,0,1007,1012,3,248,
		124,0,1008,1009,5,106,0,0,1009,1011,3,248,124,0,1010,1008,1,0,0,0,1011,
		1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1015,1,0,0,0,1014,
		1012,1,0,0,0,1015,1016,5,108,0,0,1016,173,1,0,0,0,1017,1022,5,61,0,0,1018,
		1019,5,107,0,0,1019,1020,3,104,52,0,1020,1021,5,108,0,0,1021,1023,1,0,
		0,0,1022,1018,1,0,0,0,1022,1023,1,0,0,0,1023,175,1,0,0,0,1024,1028,3,180,
		90,0,1025,1027,3,64,32,0,1026,1025,1,0,0,0,1027,1030,1,0,0,0,1028,1026,
		1,0,0,0,1028,1029,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1031,1033,
		3,182,91,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,
		1035,3,178,89,0,1035,1051,1,0,0,0,1036,1040,3,180,90,0,1037,1039,3,64,
		32,0,1038,1037,1,0,0,0,1039,1042,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,
		0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1043,1045,3,184,92,0,1044,1043,
		1,0,0,0,1045,1046,1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1048,
		1,0,0,0,1048,1049,3,178,89,0,1049,1051,1,0,0,0,1050,1024,1,0,0,0,1050,
		1036,1,0,0,0,1051,177,1,0,0,0,1052,1054,5,28,0,0,1053,1055,5,36,0,0,1054,
		1053,1,0,0,0,1054,1055,1,0,0,0,1055,179,1,0,0,0,1056,1057,5,36,0,0,1057,
		1058,3,104,52,0,1058,1059,5,73,0,0,1059,181,1,0,0,0,1060,1064,5,27,0,0,
		1061,1063,3,64,32,0,1062,1061,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,0,
		0,0,1064,1065,1,0,0,0,1065,183,1,0,0,0,1066,1064,1,0,0,0,1067,1068,5,26,
		0,0,1068,1069,3,104,52,0,1069,1073,5,73,0,0,1070,1072,3,64,32,0,1071,1070,
		1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,1077,
		1,0,0,0,1075,1073,1,0,0,0,1076,1078,3,182,91,0,1077,1076,1,0,0,0,1077,
		1078,1,0,0,0,1078,185,1,0,0,0,1079,1083,5,43,0,0,1080,1082,3,64,32,0,1081,
		1080,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,
		1086,1,0,0,0,1085,1083,1,0,0,0,1086,1101,3,192,96,0,1087,1090,5,43,0,0,
		1088,1091,3,188,94,0,1089,1091,3,190,95,0,1090,1088,1,0,0,0,1090,1089,
		1,0,0,0,1091,1095,1,0,0,0,1092,1094,3,64,32,0,1093,1092,1,0,0,0,1094,1097,
		1,0,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,1098,1,0,0,0,1097,1095,
		1,0,0,0,1098,1099,3,192,96,0,1099,1101,1,0,0,0,1100,1079,1,0,0,0,1100,
		1087,1,0,0,0,1101,187,1,0,0,0,1102,1104,3,194,97,0,1103,1105,3,196,98,
		0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,189,1,0,0,0,1106,1108,3,196,
		98,0,1107,1109,3,194,97,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,191,
		1,0,0,0,1110,1112,5,28,0,0,1111,1113,5,43,0,0,1112,1111,1,0,0,0,1112,1113,
		1,0,0,0,1113,193,1,0,0,0,1114,1115,5,85,0,0,1115,1116,5,107,0,0,1116,1117,
		3,104,52,0,1117,1118,5,108,0,0,1118,195,1,0,0,0,1119,1120,5,78,0,0,1120,
		1121,5,107,0,0,1121,1122,3,104,52,0,1122,1123,5,108,0,0,1123,197,1,0,0,
		0,1124,1128,3,202,101,0,1125,1127,3,204,102,0,1126,1125,1,0,0,0,1127,1130,
		1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,1132,1,0,0,0,1130,1128,
		1,0,0,0,1131,1133,3,206,103,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,
		1134,1,0,0,0,1134,1135,3,200,100,0,1135,199,1,0,0,0,1136,1138,5,28,0,0,
		1137,1139,5,67,0,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,201,1,0,0,
		0,1140,1145,5,67,0,0,1141,1142,5,107,0,0,1142,1143,3,104,52,0,1143,1144,
		5,108,0,0,1144,1146,1,0,0,0,1145,1141,1,0,0,0,1145,1146,1,0,0,0,1146,203,
		1,0,0,0,1147,1149,5,84,0,0,1148,1150,7,14,0,0,1149,1148,1,0,0,0,1149,1150,
		1,0,0,0,1150,1151,1,0,0,0,1151,1152,5,107,0,0,1152,1157,3,104,52,0,1153,
		1154,5,106,0,0,1154,1156,3,104,52,0,1155,1153,1,0,0,0,1156,1159,1,0,0,
		0,1157,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1160,1,0,0,0,1159,1157,1,0,
		0,0,1160,1164,5,108,0,0,1161,1163,3,64,32,0,1162,1161,1,0,0,0,1163,1166,
		1,0,0,0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,205,1,0,0,0,1166,1164,
		1,0,0,0,1167,1171,5,27,0,0,1168,1170,3,64,32,0,1169,1168,1,0,0,0,1170,
		1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,207,1,0,0,0,1173,
		1171,1,0,0,0,1174,1175,5,24,0,0,1175,1176,3,248,124,0,1176,1177,3,210,
		105,0,1177,1187,1,0,0,0,1178,1179,5,24,0,0,1179,1180,3,248,124,0,1180,
		1181,3,226,113,0,1181,1187,1,0,0,0,1182,1183,5,24,0,0,1183,1184,3,248,
		124,0,1184,1185,3,212,106,0,1185,1187,1,0,0,0,1186,1174,1,0,0,0,1186,1178,
		1,0,0,0,1186,1182,1,0,0,0,1187,209,1,0,0,0,1188,1193,5,31,0,0,1189,1194,
		3,214,107,0,1190,1194,3,216,108,0,1191,1194,3,218,109,0,1192,1194,3,220,
		110,0,1193,1189,1,0,0,0,1193,1190,1,0,0,0,1193,1191,1,0,0,0,1193,1192,
		1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,3,222,111,0,1196,
		1198,5,28,0,0,1197,1199,5,31,0,0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,1199,
		211,1,0,0,0,1200,1201,5,2,0,0,1201,1202,3,142,71,0,1202,213,1,0,0,0,1203,
		1204,5,10,0,0,1204,1205,5,107,0,0,1205,1206,3,244,122,0,1206,1207,5,108,
		0,0,1207,215,1,0,0,0,1208,1209,5,22,0,0,1209,1210,5,107,0,0,1210,1211,
		3,244,122,0,1211,1212,5,108,0,0,1212,217,1,0,0,0,1213,1214,5,71,0,0,1214,
		1215,5,107,0,0,1215,1216,3,244,122,0,1216,1217,5,108,0,0,1217,219,1,0,
		0,0,1218,1219,5,11,0,0,1219,1220,5,107,0,0,1220,1221,3,244,122,0,1221,
		1222,5,108,0,0,1222,221,1,0,0,0,1223,1226,3,248,124,0,1224,1225,5,113,
		0,0,1225,1227,3,224,112,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,1227,1235,
		1,0,0,0,1228,1231,3,248,124,0,1229,1230,5,113,0,0,1230,1232,3,224,112,
		0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,1234,1,0,0,0,1233,1228,1,0,
		0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,223,1,0,
		0,0,1237,1235,1,0,0,0,1238,1242,3,244,122,0,1239,1242,3,236,118,0,1240,
		1242,3,246,123,0,1241,1238,1,0,0,0,1241,1239,1,0,0,0,1241,1240,1,0,0,0,
		1242,225,1,0,0,0,1243,1244,5,72,0,0,1244,1245,3,228,114,0,1245,1247,5,
		28,0,0,1246,1248,5,72,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,227,
		1,0,0,0,1249,1250,3,230,115,0,1250,229,1,0,0,0,1251,1255,3,234,117,0,1252,
		1254,3,234,117,0,1253,1252,1,0,0,0,1254,1257,1,0,0,0,1255,1253,1,0,0,0,
		1255,1256,1,0,0,0,1256,231,1,0,0,0,1257,1255,1,0,0,0,1258,1260,3,248,124,
		0,1259,1261,3,132,66,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,
		0,0,0,1262,1263,5,72,0,0,1263,1264,3,228,114,0,1264,1266,5,28,0,0,1265,
		1267,5,72,0,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,233,1,0,0,0,1268,
		1278,3,232,116,0,1269,1271,3,248,124,0,1270,1272,3,132,66,0,1271,1270,
		1,0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1274,5,7,0,0,1274,1275,
		3,248,124,0,1275,1278,1,0,0,0,1276,1278,3,128,64,0,1277,1268,1,0,0,0,1277,
		1269,1,0,0,0,1277,1276,1,0,0,0,1278,235,1,0,0,0,1279,1280,7,15,0,0,1280,
		237,1,0,0,0,1281,1286,3,246,123,0,1282,1286,3,242,121,0,1283,1286,3,240,
		120,0,1284,1286,3,244,122,0,1285,1281,1,0,0,0,1285,1282,1,0,0,0,1285,1283,
		1,0,0,0,1285,1284,1,0,0,0,1286,239,1,0,0,0,1287,1288,5,97,0,0,1288,241,
		1,0,0,0,1289,1290,5,96,0,0,1290,243,1,0,0,0,1291,1294,5,98,0,0,1292,1294,
		5,100,0,0,1293,1291,1,0,0,0,1293,1292,1,0,0,0,1294,245,1,0,0,0,1295,1296,
		5,95,0,0,1296,247,1,0,0,0,1297,1300,7,16,0,0,1298,1300,5,158,0,0,1299,
		1297,1,0,0,0,1299,1298,1,0,0,0,1300,249,1,0,0,0,159,251,256,262,264,275,
		282,284,295,299,303,311,319,323,332,345,348,360,370,375,377,385,391,393,
		398,406,411,421,428,430,438,441,448,453,457,469,475,479,483,497,504,508,
		523,534,540,544,549,556,559,565,572,581,612,617,642,644,690,692,694,700,
		705,709,718,724,751,755,759,764,770,775,781,792,796,803,812,815,819,822,
		826,829,833,836,840,843,847,850,852,858,861,865,868,872,876,879,883,886,
		902,908,911,915,918,922,925,929,932,936,939,943,946,948,959,965,969,975,
		977,984,993,1000,1012,1022,1028,1032,1040,1046,1050,1054,1064,1073,1077,
		1083,1090,1095,1100,1104,1108,1112,1128,1132,1138,1145,1149,1157,1164,
		1171,1186,1193,1198,1226,1231,1235,1241,1247,1255,1260,1266,1271,1277,
		1285,1293,1299
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
