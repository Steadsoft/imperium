//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ImperiumLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ImperiumLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCEPT=1, ALIAS=2, ALIGNED=3, ALL=4, ANY=5, ARGUMENT=6, AS=7, ASSEMBLER=8, 
		BASED=9, BINARY=10, BIT=11, BOOLEAN=12, BOOTSTRAP=13, BUILTIN=14, BY=15, 
		BYPASS=16, CALL=17, CHARACTER=18, COFUNCTION=19, COLD=20, COROUTINE=21, 
		DECIMAL=22, DECLARE=23, DEFINE=24, DEFINED=25, ELIF=26, ELSE=27, END=28, 
		ENDLOOP=29, ENTRY=30, ENUM=31, FIXED=32, FLOAT=33, FUNCTION=34, GOTO=35, 
		IF=36, INC=37, INCLUDE=38, INTERNAL=39, INTERRUPT=40, INTRINSIC=41, LANGUAGE=42, 
		LOOP=43, MAIN=44, NAKED=45, NORETURN=46, OFFSET=47, OTHERWISE=48, OUT=49, 
		PAD=50, POINTER=51, PRIVATE=52, PROCEDURE=53, PUBLIC=54, RAW=55, READONLY=56, 
		RECURSIVE=57, REF=58, RELOOP=59, RETAIN=60, RETURN=61, RETURNON=62, RETURNS=63, 
		SCANAS=64, SCOPE=65, SECTION=66, SELECT=67, SINGLET=68, STACK=69, STATIC=70, 
		STRING=71, STRUCTURE=72, THEN=73, TO=74, TRAITS=75, TYPE=76, UNALIGNED=77, 
		UNTIL=78, USES=79, USING=80, UTF=81, VARIABLE=82, VARYING=83, WHEN=84, 
		WHILE=85, YIELD=86, COMMENT=87, LINE_COMMENT=88, NEWLINE=89, STRING_LITERAL_3=90, 
		STRING_LITERAL_2=91, STRING_LITERAL_1=92, BYTE_ORDER_MARK=93, LABEL=94, 
		BINARY_PATTERN=95, OCTAL_PATTERN=96, HEXADECIMAL_PATTERN=97, INTEGER=98, 
		AINTEGER=99, DECIMAL_PATTERN=100, HASH=101, AT=102, RARROW_U=103, MAPSTO_U=104, 
		DOT=105, COMMA=106, LPAR=107, RPAR=108, LBRACK=109, RBRACK=110, LBRACE=111, 
		RBRACE=112, EQUALS=113, ASSIGN_U=114, TIMES=115, DIVIDE_U=116, PLUS=117, 
		MINUS=118, SEMICOLON=119, POWER_U=120, COLON=121, TRIQUOTE=122, DIQUOTE=123, 
		QUOTE=124, SQUOTE=125, NOT=126, GT=127, LT=128, GTE_U=129, LTE_U=130, 
		NGT=131, NLT=132, NE_U=133, PCNT=134, AND=135, OR=136, NAND=137, NOR=138, 
		XOR_U=139, XNOR_U=140, REDAND=141, REDOR=142, REDNAND=143, REDNOR=144, 
		REDXOR_U=145, REDXNOR_U=146, LOGAND=147, LOGOR=148, CONC=149, L_LOG_SHIFT=150, 
		R_LOG_SHIFT=151, R_ART_SHIFT=152, L_ROTATE_U=153, R_ROTATE_U=154, RANGE=155, 
		ASMS=156, ASME=157, IDENTIFIER=158, UNRECOGNIZED=159, ASSEMBLER_END=160, 
		ASSEMBLER_NEWLINE=161, ASM_IDENTIFIER=162, ASSEMBLER_DEC_INTEGER=163, 
		ASSEMBLER_HEX_INTEGER=164, ASSEMBLER_OCT_INTEGER=165, ASSEMBLER_BIN_INTEGER=166, 
		ASSEMBLER_COMMENT=167, ASSEMBLER_LINE_COMMENT=168, ASSEMBLER_PUNCTUATOR=169, 
		ASSEMBLER_SYMBOL=170, ASSEMBLER_BRACKET=171, ASSEMBLER_PAREN=172, ASM_LBRACE=173, 
		ASM_RBRACE=174, ASSEMBLER_SPACES=175;
	public const int
		WHITESPACE_CHANNEL=2, COMMENTS_CHANNEL=3;
	public const int
		ACCEPT_ASSEMBLER=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "WHITESPACE_CHANNEL", "COMMENTS_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "ACCEPT_ASSEMBLER"
	};

	public static readonly string[] ruleNames = {
		"ACCEPT", "ALIAS", "ALIGNED", "ALL", "ANY", "ARGUMENT", "AS", "ASSEMBLER", 
		"BASED", "BINARY", "BIT", "BOOLEAN", "BOOTSTRAP", "BUILTIN", "BY", "BYPASS", 
		"CALL", "CHARACTER", "COFUNCTION", "COLD", "COROUTINE", "DECIMAL", "DECLARE", 
		"DEFINE", "DEFINED", "ELIF", "ELSE", "END", "ENDLOOP", "ENTRY", "ENUM", 
		"FIXED", "FLOAT", "FUNCTION", "GOTO", "IF", "INC", "INCLUDE", "INTERNAL", 
		"INTERRUPT", "INTRINSIC", "LANGUAGE", "LOOP", "MAIN", "NAKED", "NORETURN", 
		"OFFSET", "OTHERWISE", "OUT", "PAD", "POINTER", "PRIVATE", "PROCEDURE", 
		"PUBLIC", "RAW", "READONLY", "RECURSIVE", "REF", "RELOOP", "RETAIN", "RETURN", 
		"RETURNON", "RETURNS", "SCANAS", "SCOPE", "SECTION", "SELECT", "SINGLET", 
		"STACK", "STATIC", "STRING", "STRUCTURE", "THEN", "TO", "TRAITS", "TYPE", 
		"UNALIGNED", "UNTIL", "USES", "USING", "UTF", "VARIABLE", "VARYING", "WHEN", 
		"WHILE", "YIELD", "COMMENT", "LINE_COMMENT", "NEWLINE", "STRING_LITERAL_3", 
		"STRING_LITERAL_2", "STRING_LITERAL_1", "BYTE_ORDER_MARK", "LABEL", "BINARY_PATTERN", 
		"OCTAL_PATTERN", "HEXADECIMAL_PATTERN", "INTEGER", "AINTEGER", "DECIMAL_PATTERN", 
		"HASH", "AT", "RARROW_U", "MAPSTO_U", "DOT", "COMMA", "LPAR", "RPAR", 
		"LBRACK", "RBRACK", "LBRACE", "RBRACE", "EQUALS", "ASSIGN_U", "TIMES", 
		"DIVIDE_U", "PLUS", "MINUS", "SEMICOLON", "POWER_U", "COLON", "TRIQUOTE", 
		"DIQUOTE", "QUOTE", "SQUOTE", "NOT", "GT", "LT", "GTE_U", "LTE_U", "NGT", 
		"NLT", "NE_U", "PCNT", "AND", "OR", "NAND", "NOR", "XOR_U", "XNOR_U", 
		"REDAND", "REDOR", "REDNAND", "REDNOR", "REDXOR_U", "REDXNOR_U", "LOGAND", 
		"LOGOR", "CONC", "L_LOG_SHIFT", "R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE_U", 
		"R_ROTATE_U", "RANGE", "ASMS", "ASME", "IDENTIFIER", "BIN", "OCT", "DEC", 
		"HEX", "BASE_B", "BASE_O", "BASE_D", "BASE_H", "FRAC_B", "FRAC_D", "FRAC_O", 
		"FRAC_H", "BCOM", "ECOM", "LCOM", "LF", "IDENTIFIER_START", "IDENTIFIER_REST", 
		"UNICODE_MATH_OPS", "UNICODE_MISC_TECH", "UNICODE_MISC_MATH", "SP", "XP", 
		"XS", "BP", "BS", "OP", "OS", "UNRECOGNIZED", "ASSEMBLER_END", "ASSEMBLER_NEWLINE", 
		"ASM_IDENTIFIER", "ASSEMBLER_DEC_INTEGER", "ASSEMBLER_HEX_INTEGER", "ASSEMBLER_OCT_INTEGER", 
		"ASSEMBLER_BIN_INTEGER", "ASSEMBLER_COMMENT", "ASSEMBLER_LINE_COMMENT", 
		"ASSEMBLER_PUNCTUATOR", "ASSEMBLER_SYMBOL", "ASSEMBLER_BRACKET", "ASSEMBLER_PAREN", 
		"ASM_LBRACE", "ASM_RBRACE", "ASSEMBLER_SPACES"
	};


	    // This code MUST compile for both Java and C#
	    // Some constructs here require support code be
	    // defined as C# partial and extension classes.

	    private String KeywordLexiconCode = "en";

	    public Boolean Lexicon(String Code)
	    {
	        return Code == KeywordLexiconCode;
	    }

	    public void SetLexicon(String Code)
	    {
	        KeywordLexiconCode = Code;
	    }

	    public void ReverseLexeme()
	    {
	        StringBuilder builder = new StringBuilder();
	        builder.append(getText());
	        builder.reverse();
	        setText(builder.toString());
	    }


	public ImperiumLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ImperiumLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCEPT", "ALIAS", "ALIGNED", "ALL", "ANY", "ARGUMENT", "AS", "ASSEMBLER", 
		"BASED", "BINARY", "BIT", "BOOLEAN", "BOOTSTRAP", "BUILTIN", "BY", "BYPASS", 
		"CALL", "CHARACTER", "COFUNCTION", "COLD", "COROUTINE", "DECIMAL", "DECLARE", 
		"DEFINE", "DEFINED", "ELIF", "ELSE", "END", "ENDLOOP", "ENTRY", "ENUM", 
		"FIXED", "FLOAT", "FUNCTION", "GOTO", "IF", "INC", "INCLUDE", "INTERNAL", 
		"INTERRUPT", "INTRINSIC", "LANGUAGE", "LOOP", "MAIN", "NAKED", "NORETURN", 
		"OFFSET", "OTHERWISE", "OUT", "PAD", "POINTER", "PRIVATE", "PROCEDURE", 
		"PUBLIC", "RAW", "READONLY", "RECURSIVE", "REF", "RELOOP", "RETAIN", "RETURN", 
		"RETURNON", "RETURNS", "SCANAS", "SCOPE", "SECTION", "SELECT", "SINGLET", 
		"STACK", "STATIC", "STRING", "STRUCTURE", "THEN", "TO", "TRAITS", "TYPE", 
		"UNALIGNED", "UNTIL", "USES", "USING", "UTF", "VARIABLE", "VARYING", "WHEN", 
		"WHILE", "YIELD", "COMMENT", "LINE_COMMENT", "NEWLINE", "STRING_LITERAL_3", 
		"STRING_LITERAL_2", "STRING_LITERAL_1", "BYTE_ORDER_MARK", "LABEL", "BINARY_PATTERN", 
		"OCTAL_PATTERN", "HEXADECIMAL_PATTERN", "INTEGER", "AINTEGER", "DECIMAL_PATTERN", 
		"HASH", "AT", "RARROW_U", "MAPSTO_U", "DOT", "COMMA", "LPAR", "RPAR", 
		"LBRACK", "RBRACK", "LBRACE", "RBRACE", "EQUALS", "ASSIGN_U", "TIMES", 
		"DIVIDE_U", "PLUS", "MINUS", "SEMICOLON", "POWER_U", "COLON", "TRIQUOTE", 
		"DIQUOTE", "QUOTE", "SQUOTE", "NOT", "GT", "LT", "GTE_U", "LTE_U", "NGT", 
		"NLT", "NE_U", "PCNT", "AND", "OR", "NAND", "NOR", "XOR_U", "XNOR_U", 
		"REDAND", "REDOR", "REDNAND", "REDNOR", "REDXOR_U", "REDXNOR_U", "LOGAND", 
		"LOGOR", "CONC", "L_LOG_SHIFT", "R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE_U", 
		"R_ROTATE_U", "RANGE", "ASMS", "ASME", "IDENTIFIER", "UNRECOGNIZED", "ASSEMBLER_END", 
		"ASSEMBLER_NEWLINE", "ASM_IDENTIFIER", "ASSEMBLER_DEC_INTEGER", "ASSEMBLER_HEX_INTEGER", 
		"ASSEMBLER_OCT_INTEGER", "ASSEMBLER_BIN_INTEGER", "ASSEMBLER_COMMENT", 
		"ASSEMBLER_LINE_COMMENT", "ASSEMBLER_PUNCTUATOR", "ASSEMBLER_SYMBOL", 
		"ASSEMBLER_BRACKET", "ASSEMBLER_PAREN", "ASM_LBRACE", "ASM_RBRACE", "ASSEMBLER_SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ImperiumLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ImperiumLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0 : return ACCEPT_sempred(_localctx, predIndex);
		case 1 : return ALIAS_sempred(_localctx, predIndex);
		case 2 : return ALIGNED_sempred(_localctx, predIndex);
		case 3 : return ALL_sempred(_localctx, predIndex);
		case 4 : return ANY_sempred(_localctx, predIndex);
		case 5 : return ARGUMENT_sempred(_localctx, predIndex);
		case 6 : return AS_sempred(_localctx, predIndex);
		case 7 : return ASSEMBLER_sempred(_localctx, predIndex);
		case 8 : return BASED_sempred(_localctx, predIndex);
		case 9 : return BINARY_sempred(_localctx, predIndex);
		case 10 : return BIT_sempred(_localctx, predIndex);
		case 11 : return BOOLEAN_sempred(_localctx, predIndex);
		case 12 : return BOOTSTRAP_sempred(_localctx, predIndex);
		case 13 : return BUILTIN_sempred(_localctx, predIndex);
		case 14 : return BY_sempred(_localctx, predIndex);
		case 15 : return BYPASS_sempred(_localctx, predIndex);
		case 16 : return CALL_sempred(_localctx, predIndex);
		case 17 : return CHARACTER_sempred(_localctx, predIndex);
		case 18 : return COFUNCTION_sempred(_localctx, predIndex);
		case 19 : return COLD_sempred(_localctx, predIndex);
		case 20 : return COROUTINE_sempred(_localctx, predIndex);
		case 21 : return DECIMAL_sempred(_localctx, predIndex);
		case 22 : return DECLARE_sempred(_localctx, predIndex);
		case 23 : return DEFINE_sempred(_localctx, predIndex);
		case 24 : return DEFINED_sempred(_localctx, predIndex);
		case 25 : return ELIF_sempred(_localctx, predIndex);
		case 26 : return ELSE_sempred(_localctx, predIndex);
		case 27 : return END_sempred(_localctx, predIndex);
		case 28 : return ENDLOOP_sempred(_localctx, predIndex);
		case 29 : return ENTRY_sempred(_localctx, predIndex);
		case 30 : return ENUM_sempred(_localctx, predIndex);
		case 31 : return FIXED_sempred(_localctx, predIndex);
		case 32 : return FLOAT_sempred(_localctx, predIndex);
		case 33 : return FUNCTION_sempred(_localctx, predIndex);
		case 34 : return GOTO_sempred(_localctx, predIndex);
		case 35 : return IF_sempred(_localctx, predIndex);
		case 36 : return INC_sempred(_localctx, predIndex);
		case 37 : return INCLUDE_sempred(_localctx, predIndex);
		case 38 : return INTERNAL_sempred(_localctx, predIndex);
		case 39 : return INTERRUPT_sempred(_localctx, predIndex);
		case 40 : return INTRINSIC_sempred(_localctx, predIndex);
		case 41 : return LANGUAGE_sempred(_localctx, predIndex);
		case 42 : return LOOP_sempred(_localctx, predIndex);
		case 43 : return MAIN_sempred(_localctx, predIndex);
		case 44 : return NAKED_sempred(_localctx, predIndex);
		case 45 : return NORETURN_sempred(_localctx, predIndex);
		case 46 : return OFFSET_sempred(_localctx, predIndex);
		case 47 : return OTHERWISE_sempred(_localctx, predIndex);
		case 48 : return OUT_sempred(_localctx, predIndex);
		case 49 : return PAD_sempred(_localctx, predIndex);
		case 50 : return POINTER_sempred(_localctx, predIndex);
		case 51 : return PRIVATE_sempred(_localctx, predIndex);
		case 52 : return PROCEDURE_sempred(_localctx, predIndex);
		case 53 : return PUBLIC_sempred(_localctx, predIndex);
		case 54 : return RAW_sempred(_localctx, predIndex);
		case 55 : return READONLY_sempred(_localctx, predIndex);
		case 56 : return RECURSIVE_sempred(_localctx, predIndex);
		case 57 : return REF_sempred(_localctx, predIndex);
		case 58 : return RELOOP_sempred(_localctx, predIndex);
		case 59 : return RETAIN_sempred(_localctx, predIndex);
		case 60 : return RETURN_sempred(_localctx, predIndex);
		case 61 : return RETURNON_sempred(_localctx, predIndex);
		case 62 : return RETURNS_sempred(_localctx, predIndex);
		case 63 : return SCANAS_sempred(_localctx, predIndex);
		case 64 : return SCOPE_sempred(_localctx, predIndex);
		case 65 : return SECTION_sempred(_localctx, predIndex);
		case 66 : return SELECT_sempred(_localctx, predIndex);
		case 67 : return SINGLET_sempred(_localctx, predIndex);
		case 68 : return STACK_sempred(_localctx, predIndex);
		case 69 : return STATIC_sempred(_localctx, predIndex);
		case 70 : return STRING_sempred(_localctx, predIndex);
		case 71 : return STRUCTURE_sempred(_localctx, predIndex);
		case 72 : return THEN_sempred(_localctx, predIndex);
		case 73 : return TO_sempred(_localctx, predIndex);
		case 74 : return TRAITS_sempred(_localctx, predIndex);
		case 75 : return TYPE_sempred(_localctx, predIndex);
		case 76 : return UNALIGNED_sempred(_localctx, predIndex);
		case 77 : return UNTIL_sempred(_localctx, predIndex);
		case 78 : return USES_sempred(_localctx, predIndex);
		case 79 : return USING_sempred(_localctx, predIndex);
		case 80 : return UTF_sempred(_localctx, predIndex);
		case 81 : return VARIABLE_sempred(_localctx, predIndex);
		case 82 : return VARYING_sempred(_localctx, predIndex);
		case 83 : return WHEN_sempred(_localctx, predIndex);
		case 84 : return WHILE_sempred(_localctx, predIndex);
		case 85 : return YIELD_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool ACCEPT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Lexicon("en");
		}
		return true;
	}
	private bool ALIAS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Lexicon("en");
		}
		return true;
	}
	private bool ALIGNED_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Lexicon("en");
		}
		return true;
	}
	private bool ALL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Lexicon("en");
		}
		return true;
	}
	private bool ANY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Lexicon("en");
		}
		return true;
	}
	private bool ARGUMENT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Lexicon("en");
		}
		return true;
	}
	private bool AS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Lexicon("en");
		}
		return true;
	}
	private bool ASSEMBLER_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Lexicon("en");
		}
		return true;
	}
	private bool BASED_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Lexicon("en");
		}
		return true;
	}
	private bool BINARY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Lexicon("en");
		}
		return true;
	}
	private bool BIT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Lexicon("en");
		}
		return true;
	}
	private bool BOOLEAN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Lexicon("en");
		}
		return true;
	}
	private bool BOOTSTRAP_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Lexicon("en");
		}
		return true;
	}
	private bool BUILTIN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Lexicon("en");
		}
		return true;
	}
	private bool BY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Lexicon("en");
		}
		return true;
	}
	private bool BYPASS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Lexicon("en");
		}
		return true;
	}
	private bool CALL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Lexicon("en");
		}
		return true;
	}
	private bool CHARACTER_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Lexicon("en");
		}
		return true;
	}
	private bool COFUNCTION_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Lexicon("en");
		}
		return true;
	}
	private bool COLD_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Lexicon("en");
		}
		return true;
	}
	private bool COROUTINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Lexicon("en");
		}
		return true;
	}
	private bool DECIMAL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Lexicon("en");
		}
		return true;
	}
	private bool DECLARE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Lexicon("en");
		}
		return true;
	}
	private bool DEFINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Lexicon("en");
		}
		return true;
	}
	private bool DEFINED_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Lexicon("en");
		}
		return true;
	}
	private bool ELIF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Lexicon("en");
		}
		return true;
	}
	private bool ELSE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Lexicon("en");
		}
		return true;
	}
	private bool END_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Lexicon("en");
		}
		return true;
	}
	private bool ENDLOOP_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Lexicon("en");
		}
		return true;
	}
	private bool ENTRY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Lexicon("en");
		}
		return true;
	}
	private bool ENUM_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Lexicon("en");
		}
		return true;
	}
	private bool FIXED_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Lexicon("en");
		}
		return true;
	}
	private bool FLOAT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Lexicon("en");
		}
		return true;
	}
	private bool FUNCTION_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Lexicon("en");
		}
		return true;
	}
	private bool GOTO_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Lexicon("en");
		}
		return true;
	}
	private bool IF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Lexicon("en");
		}
		return true;
	}
	private bool INC_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Lexicon("en");
		}
		return true;
	}
	private bool INCLUDE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Lexicon("en");
		}
		return true;
	}
	private bool INTERNAL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Lexicon("en");
		}
		return true;
	}
	private bool INTERRUPT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Lexicon("en");
		}
		return true;
	}
	private bool INTRINSIC_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Lexicon("en");
		}
		return true;
	}
	private bool LANGUAGE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Lexicon("en");
		}
		return true;
	}
	private bool LOOP_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Lexicon("en");
		}
		return true;
	}
	private bool MAIN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Lexicon("en");
		}
		return true;
	}
	private bool NAKED_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Lexicon("en");
		}
		return true;
	}
	private bool NORETURN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Lexicon("en");
		}
		return true;
	}
	private bool OFFSET_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Lexicon("en");
		}
		return true;
	}
	private bool OTHERWISE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Lexicon("en");
		}
		return true;
	}
	private bool OUT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Lexicon("en");
		}
		return true;
	}
	private bool PAD_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Lexicon("en");
		}
		return true;
	}
	private bool POINTER_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Lexicon("en");
		}
		return true;
	}
	private bool PRIVATE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Lexicon("en");
		}
		return true;
	}
	private bool PROCEDURE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Lexicon("en");
		}
		return true;
	}
	private bool PUBLIC_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Lexicon("en");
		}
		return true;
	}
	private bool RAW_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Lexicon("en");
		}
		return true;
	}
	private bool READONLY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Lexicon("en");
		}
		return true;
	}
	private bool RECURSIVE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Lexicon("en");
		}
		return true;
	}
	private bool REF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Lexicon("en");
		}
		return true;
	}
	private bool RELOOP_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Lexicon("en");
		}
		return true;
	}
	private bool RETAIN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Lexicon("en");
		}
		return true;
	}
	private bool RETURN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Lexicon("en");
		}
		return true;
	}
	private bool RETURNON_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Lexicon("en");
		}
		return true;
	}
	private bool RETURNS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Lexicon("en");
		}
		return true;
	}
	private bool SCANAS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Lexicon("en");
		}
		return true;
	}
	private bool SCOPE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return Lexicon("en");
		}
		return true;
	}
	private bool SECTION_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return Lexicon("en");
		}
		return true;
	}
	private bool SELECT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return Lexicon("en");
		}
		return true;
	}
	private bool SINGLET_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return Lexicon("en");
		}
		return true;
	}
	private bool STACK_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return Lexicon("en");
		}
		return true;
	}
	private bool STATIC_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return Lexicon("en");
		}
		return true;
	}
	private bool STRING_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Lexicon("en");
		}
		return true;
	}
	private bool STRUCTURE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return Lexicon("en");
		}
		return true;
	}
	private bool THEN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return Lexicon("en");
		}
		return true;
	}
	private bool TO_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73: return Lexicon("en");
		}
		return true;
	}
	private bool TRAITS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return Lexicon("en");
		}
		return true;
	}
	private bool TYPE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Lexicon("en");
		}
		return true;
	}
	private bool UNALIGNED_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return Lexicon("en");
		}
		return true;
	}
	private bool UNTIL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return Lexicon("en");
		}
		return true;
	}
	private bool USES_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Lexicon("en");
		}
		return true;
	}
	private bool USING_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return Lexicon("en");
		}
		return true;
	}
	private bool UTF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80: return Lexicon("en");
		}
		return true;
	}
	private bool VARIABLE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return Lexicon("en");
		}
		return true;
	}
	private bool VARYING_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return Lexicon("en");
		}
		return true;
	}
	private bool WHEN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83: return Lexicon("en");
		}
		return true;
	}
	private bool WHILE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84: return Lexicon("en");
		}
		return true;
	}
	private bool YIELD_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85: return Lexicon("en");
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,175,1781,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
		2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,
		2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,
		2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,
		2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,
		2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,
		2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
		2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,
		104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,
		2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,
		2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,
		2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,
		2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,
		2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,
		2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,
		2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,
		2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,
		2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
		2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
		2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,
		2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,
		2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,
		2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,
		2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,
		2,200,7,200,2,201,7,201,2,202,7,202,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,3,5,455,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,3,7,474,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,493,8,9,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,512,8,11,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
		12,528,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,3,17,571,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,3,21,613,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,3,22,626,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,
		23,638,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
		1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,715,8,33,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,3,34,727,8,34,1,35,1,35,1,35,1,35,1,36,1,36,
		1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,770,8,39,1,40,1,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,830,8,46,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
		1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,3,50,864,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
		52,1,52,3,52,889,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,
		1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,927,8,
		56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
		59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
		60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
		65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,
		67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,
		69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
		70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
		71,1,71,1,71,3,71,1057,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,
		73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,
		75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,
		77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,
		79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,
		81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
		82,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
		85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,5,86,1161,8,86,10,86,12,
		86,1164,9,86,1,86,1,86,1,86,1,86,1,87,1,87,5,87,1172,8,87,10,87,12,87,
		1175,9,87,1,87,1,87,1,87,1,87,1,88,4,88,1182,8,88,11,88,12,88,1183,1,88,
		1,88,1,89,1,89,5,89,1190,8,89,10,89,12,89,1193,9,89,1,89,1,89,1,90,1,90,
		5,90,1199,8,90,10,90,12,90,1202,9,90,1,90,1,90,1,91,1,91,5,91,1208,8,91,
		10,91,12,91,1211,9,91,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,
		1,94,1,94,5,94,1225,8,94,10,94,12,94,1228,9,94,4,94,1230,8,94,11,94,12,
		94,1231,1,94,1,94,1,94,5,94,1237,8,94,10,94,12,94,1240,9,94,4,94,1242,
		8,94,11,94,12,94,1243,3,94,1246,8,94,1,94,3,94,1249,8,94,1,94,1,94,1,95,
		1,95,1,95,5,95,1256,8,95,10,95,12,95,1259,9,95,4,95,1261,8,95,11,95,12,
		95,1262,1,95,1,95,1,95,5,95,1268,8,95,10,95,12,95,1271,9,95,4,95,1273,
		8,95,11,95,12,95,1274,3,95,1277,8,95,1,95,3,95,1280,8,95,1,95,1,95,1,96,
		1,96,1,96,5,96,1287,8,96,10,96,12,96,1290,9,96,4,96,1292,8,96,11,96,12,
		96,1293,1,96,1,96,1,96,5,96,1299,8,96,10,96,12,96,1302,9,96,4,96,1304,
		8,96,11,96,12,96,1305,3,96,1308,8,96,1,96,3,96,1311,8,96,1,96,1,96,1,97,
		1,97,5,97,1317,8,97,10,97,12,97,1320,9,97,1,98,1,98,3,98,1324,8,98,1,98,
		3,98,1327,8,98,1,98,4,98,1330,8,98,11,98,12,98,1331,1,99,1,99,1,99,5,99,
		1337,8,99,10,99,12,99,1340,9,99,4,99,1342,8,99,11,99,12,99,1343,1,99,3,
		99,1347,8,99,1,99,3,99,1350,8,99,1,100,1,100,1,101,1,101,1,102,1,102,1,
		102,3,102,1359,8,102,1,103,1,103,1,103,1,103,3,103,1365,8,103,1,104,1,
		104,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,
		1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,
		1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,119,3,119,1400,8,119,1,120,
		1,120,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,124,1,124,
		1,125,1,125,1,126,1,126,1,127,1,127,1,128,1,128,1,128,3,128,1424,8,128,
		1,129,1,129,1,129,3,129,1429,8,129,1,130,1,130,1,130,1,131,1,131,1,131,
		1,132,1,132,1,132,3,132,1440,8,132,1,133,1,133,1,134,1,134,1,135,1,135,
		1,136,1,136,1,136,1,137,1,137,1,137,1,138,1,138,1,139,1,139,1,139,1,139,
		3,139,1460,8,139,1,140,1,140,1,140,1,141,1,141,1,141,1,142,1,142,1,142,
		1,142,1,143,1,143,1,143,1,143,1,144,1,144,1,144,1,144,3,144,1480,8,144,
		1,145,1,145,1,145,1,145,1,145,1,145,3,145,1488,8,145,1,146,1,146,1,146,
		1,147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,1,149,1,150,1,150,1,150,
		1,151,1,151,1,151,1,151,1,152,1,152,1,152,3,152,1512,8,152,1,153,1,153,
		1,153,3,153,1517,8,153,1,154,1,154,1,154,1,155,1,155,1,155,1,156,1,156,
		1,156,1,157,1,157,5,157,1530,8,157,10,157,12,157,1533,9,157,1,158,1,158,
		1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,1,162,1,162,3,162,1547,
		8,162,1,163,1,163,1,163,1,163,3,163,1553,8,163,1,164,1,164,1,164,1,164,
		3,164,1559,8,164,1,165,1,165,1,165,1,165,3,165,1565,8,165,1,166,1,166,
		4,166,1569,8,166,11,166,12,166,1570,1,167,1,167,4,167,1575,8,167,11,167,
		12,167,1576,1,168,1,168,4,168,1581,8,168,11,168,12,168,1582,1,169,1,169,
		4,169,1587,8,169,11,169,12,169,1588,1,170,1,170,1,170,1,171,1,171,1,171,
		1,172,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,177,
		1,177,1,178,1,178,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
		1,180,3,180,1622,8,180,1,181,1,181,1,182,1,182,1,182,1,182,3,182,1630,
		8,182,1,183,1,183,1,184,1,184,1,184,1,184,3,184,1638,8,184,1,185,1,185,
		1,186,1,186,1,187,1,187,5,187,1646,8,187,10,187,12,187,1649,9,187,1,187,
		1,187,1,188,4,188,1654,8,188,11,188,12,188,1655,1,189,1,189,1,190,3,190,
		1661,8,190,1,190,3,190,1664,8,190,1,190,1,190,5,190,1668,8,190,10,190,
		12,190,1671,9,190,1,190,3,190,1674,8,190,1,191,3,191,1677,8,191,1,191,
		3,191,1680,8,191,1,191,1,191,4,191,1684,8,191,11,191,12,191,1685,1,191,
		4,191,1689,8,191,11,191,12,191,1690,1,191,1,191,3,191,1695,8,191,1,192,
		3,192,1698,8,192,1,192,3,192,1701,8,192,1,192,1,192,4,192,1705,8,192,11,
		192,12,192,1706,1,192,4,192,1710,8,192,11,192,12,192,1711,1,192,1,192,
		3,192,1716,8,192,1,193,3,193,1719,8,193,1,193,3,193,1722,8,193,1,193,1,
		193,4,193,1726,8,193,11,193,12,193,1727,1,193,4,193,1731,8,193,11,193,
		12,193,1732,1,193,1,193,3,193,1737,8,193,1,194,1,194,1,194,5,194,1742,
		8,194,10,194,12,194,1745,9,194,1,194,1,194,1,194,1,194,1,195,1,195,3,195,
		1753,8,195,1,195,5,195,1756,8,195,10,195,12,195,1759,9,195,1,195,1,195,
		1,196,1,196,1,197,1,197,1,198,1,198,1,199,1,199,1,200,1,200,1,201,1,201,
		1,202,4,202,1776,8,202,11,202,12,202,1777,1,202,1,202,7,1162,1173,1191,
		1200,1209,1743,1757,0,203,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,
		10,22,11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,
		22,46,23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,
		34,70,35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,
		46,94,47,96,48,98,49,100,50,102,51,104,52,106,53,108,54,110,55,112,56,
		114,57,116,58,118,59,120,60,122,61,124,62,126,63,128,64,130,65,132,66,
		134,67,136,68,138,69,140,70,142,71,144,72,146,73,148,74,150,75,152,76,
		154,77,156,78,158,79,160,80,162,81,164,82,166,83,168,84,170,85,172,86,
		174,87,176,88,178,89,180,90,182,91,184,92,186,93,188,94,190,95,192,96,
		194,97,196,98,198,99,200,100,202,101,204,102,206,103,208,104,210,105,212,
		106,214,107,216,108,218,109,220,110,222,111,224,112,226,113,228,114,230,
		115,232,116,234,117,236,118,238,119,240,120,242,121,244,122,246,123,248,
		124,250,125,252,126,254,127,256,128,258,129,260,130,262,131,264,132,266,
		133,268,134,270,135,272,136,274,137,276,138,278,139,280,140,282,141,284,
		142,286,143,288,144,290,145,292,146,294,147,296,148,298,149,300,150,302,
		151,304,152,306,153,308,154,310,155,312,156,314,157,316,158,318,0,320,
		0,322,0,324,0,326,0,328,0,330,0,332,0,334,0,336,0,338,0,340,0,342,0,344,
		0,346,0,348,0,350,0,352,0,354,0,356,0,358,0,360,0,362,0,364,0,366,0,368,
		0,370,0,372,0,374,159,376,160,378,161,380,162,382,163,384,164,386,165,
		388,166,390,167,392,168,394,169,396,170,398,171,400,172,402,173,404,174,
		406,175,2,0,1,21,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,3,0,48,57,65,
		70,97,102,6,0,72,72,79,79,88,88,104,104,111,111,120,120,2,0,47,47,247,
		247,2,0,94,94,8853,8853,1,0,48,49,1,0,48,55,4,0,36,36,65,90,95,95,97,122,
		5,0,36,36,48,57,65,90,95,95,97,122,1,0,8704,8959,1,0,8960,9215,1,0,10176,
		10223,2,0,72,72,104,104,4,0,66,66,89,89,98,98,121,121,2,0,111,111,113,
		113,2,0,10,10,13,13,3,0,44,44,46,46,58,58,5,0,35,36,42,43,45,45,47,47,
		61,61,2,0,91,91,93,93,1852,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,
		0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,
		20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,
		0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,
		0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,
		1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,
		0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,
		1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,
		0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,
		1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,
		0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,
		0,0,0,0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,0,0,0,0,126,1,
		0,0,0,0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,
		0,0,0,0,138,1,0,0,0,0,140,1,0,0,0,0,142,1,0,0,0,0,144,1,0,0,0,0,146,1,
		0,0,0,0,148,1,0,0,0,0,150,1,0,0,0,0,152,1,0,0,0,0,154,1,0,0,0,0,156,1,
		0,0,0,0,158,1,0,0,0,0,160,1,0,0,0,0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,
		0,0,0,0,168,1,0,0,0,0,170,1,0,0,0,0,172,1,0,0,0,0,174,1,0,0,0,0,176,1,
		0,0,0,0,178,1,0,0,0,0,180,1,0,0,0,0,182,1,0,0,0,0,184,1,0,0,0,0,186,1,
		0,0,0,0,188,1,0,0,0,0,190,1,0,0,0,0,192,1,0,0,0,0,194,1,0,0,0,0,196,1,
		0,0,0,0,198,1,0,0,0,0,200,1,0,0,0,0,202,1,0,0,0,0,204,1,0,0,0,0,206,1,
		0,0,0,0,208,1,0,0,0,0,210,1,0,0,0,0,212,1,0,0,0,0,214,1,0,0,0,0,216,1,
		0,0,0,0,218,1,0,0,0,0,220,1,0,0,0,0,222,1,0,0,0,0,224,1,0,0,0,0,226,1,
		0,0,0,0,228,1,0,0,0,0,230,1,0,0,0,0,232,1,0,0,0,0,234,1,0,0,0,0,236,1,
		0,0,0,0,238,1,0,0,0,0,240,1,0,0,0,0,242,1,0,0,0,0,244,1,0,0,0,0,246,1,
		0,0,0,0,248,1,0,0,0,0,250,1,0,0,0,0,252,1,0,0,0,0,254,1,0,0,0,0,256,1,
		0,0,0,0,258,1,0,0,0,0,260,1,0,0,0,0,262,1,0,0,0,0,264,1,0,0,0,0,266,1,
		0,0,0,0,268,1,0,0,0,0,270,1,0,0,0,0,272,1,0,0,0,0,274,1,0,0,0,0,276,1,
		0,0,0,0,278,1,0,0,0,0,280,1,0,0,0,0,282,1,0,0,0,0,284,1,0,0,0,0,286,1,
		0,0,0,0,288,1,0,0,0,0,290,1,0,0,0,0,292,1,0,0,0,0,294,1,0,0,0,0,296,1,
		0,0,0,0,298,1,0,0,0,0,300,1,0,0,0,0,302,1,0,0,0,0,304,1,0,0,0,0,306,1,
		0,0,0,0,308,1,0,0,0,0,310,1,0,0,0,0,312,1,0,0,0,0,314,1,0,0,0,0,316,1,
		0,0,0,0,374,1,0,0,0,1,376,1,0,0,0,1,378,1,0,0,0,1,380,1,0,0,0,1,382,1,
		0,0,0,1,384,1,0,0,0,1,386,1,0,0,0,1,388,1,0,0,0,1,390,1,0,0,0,1,392,1,
		0,0,0,1,394,1,0,0,0,1,396,1,0,0,0,1,398,1,0,0,0,1,400,1,0,0,0,1,402,1,
		0,0,0,1,404,1,0,0,0,1,406,1,0,0,0,2,408,1,0,0,0,4,416,1,0,0,0,6,423,1,
		0,0,0,8,432,1,0,0,0,10,437,1,0,0,0,12,442,1,0,0,0,14,456,1,0,0,0,16,460,
		1,0,0,0,18,475,1,0,0,0,20,482,1,0,0,0,22,494,1,0,0,0,24,499,1,0,0,0,26,
		513,1,0,0,0,28,529,1,0,0,0,30,538,1,0,0,0,32,542,1,0,0,0,34,550,1,0,0,
		0,36,556,1,0,0,0,38,572,1,0,0,0,40,584,1,0,0,0,42,590,1,0,0,0,44,601,1,
		0,0,0,46,614,1,0,0,0,48,627,1,0,0,0,50,639,1,0,0,0,52,648,1,0,0,0,54,654,
		1,0,0,0,56,660,1,0,0,0,58,665,1,0,0,0,60,674,1,0,0,0,62,681,1,0,0,0,64,
		687,1,0,0,0,66,694,1,0,0,0,68,701,1,0,0,0,70,716,1,0,0,0,72,728,1,0,0,
		0,74,732,1,0,0,0,76,737,1,0,0,0,78,746,1,0,0,0,80,756,1,0,0,0,82,771,1,
		0,0,0,84,782,1,0,0,0,86,790,1,0,0,0,88,796,1,0,0,0,90,802,1,0,0,0,92,809,
		1,0,0,0,94,819,1,0,0,0,96,831,1,0,0,0,98,842,1,0,0,0,100,847,1,0,0,0,102,
		852,1,0,0,0,104,865,1,0,0,0,106,874,1,0,0,0,108,890,1,0,0,0,110,898,1,
		0,0,0,112,903,1,0,0,0,114,913,1,0,0,0,116,928,1,0,0,0,118,933,1,0,0,0,
		120,941,1,0,0,0,122,949,1,0,0,0,124,957,1,0,0,0,126,967,1,0,0,0,128,976,
		1,0,0,0,130,984,1,0,0,0,132,991,1,0,0,0,134,1000,1,0,0,0,136,1008,1,0,
		0,0,138,1017,1,0,0,0,140,1024,1,0,0,0,142,1032,1,0,0,0,144,1040,1,0,0,
		0,146,1058,1,0,0,0,148,1064,1,0,0,0,150,1068,1,0,0,0,152,1076,1,0,0,0,
		154,1082,1,0,0,0,156,1093,1,0,0,0,158,1100,1,0,0,0,160,1106,1,0,0,0,162,
		1113,1,0,0,0,164,1118,1,0,0,0,166,1128,1,0,0,0,168,1137,1,0,0,0,170,1143,
		1,0,0,0,172,1150,1,0,0,0,174,1157,1,0,0,0,176,1169,1,0,0,0,178,1181,1,
		0,0,0,180,1187,1,0,0,0,182,1196,1,0,0,0,184,1205,1,0,0,0,186,1214,1,0,
		0,0,188,1218,1,0,0,0,190,1245,1,0,0,0,192,1276,1,0,0,0,194,1307,1,0,0,
		0,196,1314,1,0,0,0,198,1321,1,0,0,0,200,1341,1,0,0,0,202,1351,1,0,0,0,
		204,1353,1,0,0,0,206,1358,1,0,0,0,208,1364,1,0,0,0,210,1366,1,0,0,0,212,
		1368,1,0,0,0,214,1370,1,0,0,0,216,1372,1,0,0,0,218,1374,1,0,0,0,220,1376,
		1,0,0,0,222,1378,1,0,0,0,224,1380,1,0,0,0,226,1382,1,0,0,0,228,1384,1,
		0,0,0,230,1386,1,0,0,0,232,1388,1,0,0,0,234,1390,1,0,0,0,236,1392,1,0,
		0,0,238,1394,1,0,0,0,240,1399,1,0,0,0,242,1401,1,0,0,0,244,1403,1,0,0,
		0,246,1407,1,0,0,0,248,1410,1,0,0,0,250,1412,1,0,0,0,252,1414,1,0,0,0,
		254,1416,1,0,0,0,256,1418,1,0,0,0,258,1423,1,0,0,0,260,1428,1,0,0,0,262,
		1430,1,0,0,0,264,1433,1,0,0,0,266,1439,1,0,0,0,268,1441,1,0,0,0,270,1443,
		1,0,0,0,272,1445,1,0,0,0,274,1447,1,0,0,0,276,1450,1,0,0,0,278,1453,1,
		0,0,0,280,1459,1,0,0,0,282,1461,1,0,0,0,284,1464,1,0,0,0,286,1467,1,0,
		0,0,288,1471,1,0,0,0,290,1479,1,0,0,0,292,1487,1,0,0,0,294,1489,1,0,0,
		0,296,1492,1,0,0,0,298,1495,1,0,0,0,300,1498,1,0,0,0,302,1501,1,0,0,0,
		304,1504,1,0,0,0,306,1511,1,0,0,0,308,1516,1,0,0,0,310,1518,1,0,0,0,312,
		1521,1,0,0,0,314,1524,1,0,0,0,316,1527,1,0,0,0,318,1534,1,0,0,0,320,1536,
		1,0,0,0,322,1538,1,0,0,0,324,1540,1,0,0,0,326,1546,1,0,0,0,328,1552,1,
		0,0,0,330,1558,1,0,0,0,332,1564,1,0,0,0,334,1566,1,0,0,0,336,1572,1,0,
		0,0,338,1578,1,0,0,0,340,1584,1,0,0,0,342,1590,1,0,0,0,344,1593,1,0,0,
		0,346,1596,1,0,0,0,348,1599,1,0,0,0,350,1601,1,0,0,0,352,1603,1,0,0,0,
		354,1605,1,0,0,0,356,1607,1,0,0,0,358,1609,1,0,0,0,360,1611,1,0,0,0,362,
		1621,1,0,0,0,364,1623,1,0,0,0,366,1629,1,0,0,0,368,1631,1,0,0,0,370,1637,
		1,0,0,0,372,1639,1,0,0,0,374,1641,1,0,0,0,376,1643,1,0,0,0,378,1653,1,
		0,0,0,380,1657,1,0,0,0,382,1660,1,0,0,0,384,1676,1,0,0,0,386,1697,1,0,
		0,0,388,1718,1,0,0,0,390,1738,1,0,0,0,392,1752,1,0,0,0,394,1762,1,0,0,
		0,396,1764,1,0,0,0,398,1766,1,0,0,0,400,1768,1,0,0,0,402,1770,1,0,0,0,
		404,1772,1,0,0,0,406,1775,1,0,0,0,408,409,4,0,0,0,409,410,5,97,0,0,410,
		411,5,99,0,0,411,412,5,99,0,0,412,413,5,101,0,0,413,414,5,112,0,0,414,
		415,5,116,0,0,415,3,1,0,0,0,416,417,4,1,1,0,417,418,5,97,0,0,418,419,5,
		108,0,0,419,420,5,105,0,0,420,421,5,97,0,0,421,422,5,115,0,0,422,5,1,0,
		0,0,423,424,4,2,2,0,424,425,5,97,0,0,425,426,5,108,0,0,426,427,5,105,0,
		0,427,428,5,103,0,0,428,429,5,110,0,0,429,430,5,101,0,0,430,431,5,100,
		0,0,431,7,1,0,0,0,432,433,4,3,3,0,433,434,5,97,0,0,434,435,5,108,0,0,435,
		436,5,108,0,0,436,9,1,0,0,0,437,438,4,4,4,0,438,439,5,97,0,0,439,440,5,
		110,0,0,440,441,5,121,0,0,441,11,1,0,0,0,442,454,4,5,5,0,443,444,5,97,
		0,0,444,445,5,114,0,0,445,446,5,103,0,0,446,447,5,117,0,0,447,448,5,109,
		0,0,448,449,5,101,0,0,449,450,5,110,0,0,450,455,5,116,0,0,451,452,5,97,
		0,0,452,453,5,114,0,0,453,455,5,103,0,0,454,443,1,0,0,0,454,451,1,0,0,
		0,455,13,1,0,0,0,456,457,4,6,6,0,457,458,5,97,0,0,458,459,5,115,0,0,459,
		15,1,0,0,0,460,473,4,7,7,0,461,462,5,97,0,0,462,463,5,115,0,0,463,464,
		5,115,0,0,464,465,5,101,0,0,465,466,5,109,0,0,466,467,5,98,0,0,467,468,
		5,108,0,0,468,469,5,101,0,0,469,474,5,114,0,0,470,471,5,97,0,0,471,472,
		5,115,0,0,472,474,5,109,0,0,473,461,1,0,0,0,473,470,1,0,0,0,474,17,1,0,
		0,0,475,476,4,8,8,0,476,477,5,98,0,0,477,478,5,97,0,0,478,479,5,115,0,
		0,479,480,5,101,0,0,480,481,5,100,0,0,481,19,1,0,0,0,482,492,4,9,9,0,483,
		484,5,98,0,0,484,485,5,105,0,0,485,486,5,110,0,0,486,487,5,97,0,0,487,
		488,5,114,0,0,488,493,5,121,0,0,489,490,5,98,0,0,490,491,5,105,0,0,491,
		493,5,110,0,0,492,483,1,0,0,0,492,489,1,0,0,0,493,21,1,0,0,0,494,495,4,
		10,10,0,495,496,5,98,0,0,496,497,5,105,0,0,497,498,5,116,0,0,498,23,1,
		0,0,0,499,511,4,11,11,0,500,501,5,98,0,0,501,502,5,111,0,0,502,503,5,111,
		0,0,503,504,5,108,0,0,504,505,5,101,0,0,505,506,5,97,0,0,506,512,5,110,
		0,0,507,508,5,98,0,0,508,509,5,111,0,0,509,510,5,111,0,0,510,512,5,108,
		0,0,511,500,1,0,0,0,511,507,1,0,0,0,512,25,1,0,0,0,513,527,4,12,12,0,514,
		515,5,98,0,0,515,516,5,111,0,0,516,517,5,111,0,0,517,518,5,116,0,0,518,
		519,5,115,0,0,519,520,5,116,0,0,520,521,5,114,0,0,521,522,5,97,0,0,522,
		528,5,112,0,0,523,524,5,98,0,0,524,525,5,111,0,0,525,526,5,111,0,0,526,
		528,5,116,0,0,527,514,1,0,0,0,527,523,1,0,0,0,528,27,1,0,0,0,529,530,4,
		13,13,0,530,531,5,98,0,0,531,532,5,117,0,0,532,533,5,105,0,0,533,534,5,
		108,0,0,534,535,5,116,0,0,535,536,5,105,0,0,536,537,5,110,0,0,537,29,1,
		0,0,0,538,539,4,14,14,0,539,540,5,98,0,0,540,541,5,121,0,0,541,31,1,0,
		0,0,542,543,4,15,15,0,543,544,5,98,0,0,544,545,5,121,0,0,545,546,5,112,
		0,0,546,547,5,97,0,0,547,548,5,115,0,0,548,549,5,115,0,0,549,33,1,0,0,
		0,550,551,4,16,16,0,551,552,5,99,0,0,552,553,5,97,0,0,553,554,5,108,0,
		0,554,555,5,108,0,0,555,35,1,0,0,0,556,570,4,17,17,0,557,558,5,99,0,0,
		558,559,5,104,0,0,559,560,5,97,0,0,560,561,5,114,0,0,561,562,5,97,0,0,
		562,563,5,99,0,0,563,564,5,116,0,0,564,565,5,101,0,0,565,571,5,114,0,0,
		566,567,5,99,0,0,567,568,5,104,0,0,568,569,5,97,0,0,569,571,5,114,0,0,
		570,557,1,0,0,0,570,566,1,0,0,0,571,37,1,0,0,0,572,573,4,18,18,0,573,574,
		5,99,0,0,574,575,5,111,0,0,575,576,5,102,0,0,576,577,5,117,0,0,577,578,
		5,110,0,0,578,579,5,99,0,0,579,580,5,116,0,0,580,581,5,105,0,0,581,582,
		5,111,0,0,582,583,5,110,0,0,583,39,1,0,0,0,584,585,4,19,19,0,585,586,5,
		99,0,0,586,587,5,111,0,0,587,588,5,108,0,0,588,589,5,100,0,0,589,41,1,
		0,0,0,590,591,4,20,20,0,591,592,5,99,0,0,592,593,5,111,0,0,593,594,5,114,
		0,0,594,595,5,111,0,0,595,596,5,117,0,0,596,597,5,116,0,0,597,598,5,105,
		0,0,598,599,5,110,0,0,599,600,5,101,0,0,600,43,1,0,0,0,601,612,4,21,21,
		0,602,603,5,100,0,0,603,604,5,101,0,0,604,605,5,99,0,0,605,606,5,105,0,
		0,606,607,5,109,0,0,607,608,5,97,0,0,608,613,5,108,0,0,609,610,5,100,0,
		0,610,611,5,101,0,0,611,613,5,99,0,0,612,602,1,0,0,0,612,609,1,0,0,0,613,
		45,1,0,0,0,614,625,4,22,22,0,615,616,5,100,0,0,616,617,5,101,0,0,617,618,
		5,99,0,0,618,619,5,108,0,0,619,620,5,97,0,0,620,621,5,114,0,0,621,626,
		5,101,0,0,622,623,5,100,0,0,623,624,5,99,0,0,624,626,5,108,0,0,625,615,
		1,0,0,0,625,622,1,0,0,0,626,47,1,0,0,0,627,637,4,23,23,0,628,629,5,100,
		0,0,629,630,5,101,0,0,630,631,5,102,0,0,631,632,5,105,0,0,632,633,5,110,
		0,0,633,638,5,101,0,0,634,635,5,100,0,0,635,636,5,101,0,0,636,638,5,102,
		0,0,637,628,1,0,0,0,637,634,1,0,0,0,638,49,1,0,0,0,639,640,4,24,24,0,640,
		641,5,100,0,0,641,642,5,101,0,0,642,643,5,102,0,0,643,644,5,105,0,0,644,
		645,5,110,0,0,645,646,5,101,0,0,646,647,5,100,0,0,647,51,1,0,0,0,648,649,
		4,25,25,0,649,650,5,101,0,0,650,651,5,108,0,0,651,652,5,105,0,0,652,653,
		5,102,0,0,653,53,1,0,0,0,654,655,4,26,26,0,655,656,5,101,0,0,656,657,5,
		108,0,0,657,658,5,115,0,0,658,659,5,101,0,0,659,55,1,0,0,0,660,661,4,27,
		27,0,661,662,5,101,0,0,662,663,5,110,0,0,663,664,5,100,0,0,664,57,1,0,
		0,0,665,666,4,28,28,0,666,667,5,101,0,0,667,668,5,110,0,0,668,669,5,100,
		0,0,669,670,5,108,0,0,670,671,5,111,0,0,671,672,5,111,0,0,672,673,5,112,
		0,0,673,59,1,0,0,0,674,675,4,29,29,0,675,676,5,101,0,0,676,677,5,110,0,
		0,677,678,5,116,0,0,678,679,5,114,0,0,679,680,5,121,0,0,680,61,1,0,0,0,
		681,682,4,30,30,0,682,683,5,101,0,0,683,684,5,110,0,0,684,685,5,117,0,
		0,685,686,5,109,0,0,686,63,1,0,0,0,687,688,4,31,31,0,688,689,5,102,0,0,
		689,690,5,105,0,0,690,691,5,120,0,0,691,692,5,101,0,0,692,693,5,100,0,
		0,693,65,1,0,0,0,694,695,4,32,32,0,695,696,5,102,0,0,696,697,5,108,0,0,
		697,698,5,111,0,0,698,699,5,97,0,0,699,700,5,116,0,0,700,67,1,0,0,0,701,
		714,4,33,33,0,702,703,5,102,0,0,703,704,5,117,0,0,704,705,5,110,0,0,705,
		706,5,99,0,0,706,707,5,116,0,0,707,708,5,105,0,0,708,709,5,111,0,0,709,
		715,5,110,0,0,710,711,5,102,0,0,711,712,5,117,0,0,712,713,5,110,0,0,713,
		715,5,99,0,0,714,702,1,0,0,0,714,710,1,0,0,0,715,69,1,0,0,0,716,726,4,
		34,34,0,717,718,5,103,0,0,718,719,5,111,0,0,719,720,5,116,0,0,720,727,
		5,111,0,0,721,722,5,103,0,0,722,723,5,111,0,0,723,724,5,32,0,0,724,725,
		5,116,0,0,725,727,5,111,0,0,726,717,1,0,0,0,726,721,1,0,0,0,727,71,1,0,
		0,0,728,729,4,35,35,0,729,730,5,105,0,0,730,731,5,102,0,0,731,73,1,0,0,
		0,732,733,4,36,36,0,733,734,5,105,0,0,734,735,5,110,0,0,735,736,5,99,0,
		0,736,75,1,0,0,0,737,738,4,37,37,0,738,739,5,105,0,0,739,740,5,110,0,0,
		740,741,5,99,0,0,741,742,5,108,0,0,742,743,5,117,0,0,743,744,5,100,0,0,
		744,745,5,101,0,0,745,77,1,0,0,0,746,747,4,38,38,0,747,748,5,105,0,0,748,
		749,5,110,0,0,749,750,5,116,0,0,750,751,5,101,0,0,751,752,5,114,0,0,752,
		753,5,110,0,0,753,754,5,97,0,0,754,755,5,108,0,0,755,79,1,0,0,0,756,769,
		4,39,39,0,757,758,5,105,0,0,758,759,5,110,0,0,759,760,5,116,0,0,760,761,
		5,101,0,0,761,762,5,114,0,0,762,763,5,114,0,0,763,764,5,117,0,0,764,765,
		5,112,0,0,765,770,5,116,0,0,766,767,5,105,0,0,767,768,5,115,0,0,768,770,
		5,114,0,0,769,757,1,0,0,0,769,766,1,0,0,0,770,81,1,0,0,0,771,772,4,40,
		40,0,772,773,5,105,0,0,773,774,5,110,0,0,774,775,5,116,0,0,775,776,5,114,
		0,0,776,777,5,105,0,0,777,778,5,110,0,0,778,779,5,115,0,0,779,780,5,105,
		0,0,780,781,5,99,0,0,781,83,1,0,0,0,782,783,4,41,41,0,783,784,5,108,0,
		0,784,785,5,105,0,0,785,786,5,110,0,0,786,787,5,103,0,0,787,788,5,117,
		0,0,788,789,5,97,0,0,789,85,1,0,0,0,790,791,4,42,42,0,791,792,5,108,0,
		0,792,793,5,111,0,0,793,794,5,111,0,0,794,795,5,112,0,0,795,87,1,0,0,0,
		796,797,4,43,43,0,797,798,5,109,0,0,798,799,5,97,0,0,799,800,5,105,0,0,
		800,801,5,110,0,0,801,89,1,0,0,0,802,803,4,44,44,0,803,804,5,110,0,0,804,
		805,5,97,0,0,805,806,5,107,0,0,806,807,5,101,0,0,807,808,5,100,0,0,808,
		91,1,0,0,0,809,810,4,45,45,0,810,811,5,110,0,0,811,812,5,111,0,0,812,813,
		5,114,0,0,813,814,5,101,0,0,814,815,5,116,0,0,815,816,5,117,0,0,816,817,
		5,114,0,0,817,818,5,110,0,0,818,93,1,0,0,0,819,829,4,46,46,0,820,821,5,
		111,0,0,821,822,5,102,0,0,822,823,5,102,0,0,823,824,5,115,0,0,824,825,
		5,101,0,0,825,830,5,116,0,0,826,827,5,111,0,0,827,828,5,102,0,0,828,830,
		5,120,0,0,829,820,1,0,0,0,829,826,1,0,0,0,830,95,1,0,0,0,831,832,4,47,
		47,0,832,833,5,111,0,0,833,834,5,116,0,0,834,835,5,104,0,0,835,836,5,101,
		0,0,836,837,5,114,0,0,837,838,5,119,0,0,838,839,5,105,0,0,839,840,5,115,
		0,0,840,841,5,101,0,0,841,97,1,0,0,0,842,843,4,48,48,0,843,844,5,111,0,
		0,844,845,5,117,0,0,845,846,5,116,0,0,846,99,1,0,0,0,847,848,4,49,49,0,
		848,849,5,112,0,0,849,850,5,97,0,0,850,851,5,100,0,0,851,101,1,0,0,0,852,
		863,4,50,50,0,853,854,5,112,0,0,854,855,5,111,0,0,855,856,5,105,0,0,856,
		857,5,110,0,0,857,858,5,116,0,0,858,859,5,101,0,0,859,864,5,114,0,0,860,
		861,5,112,0,0,861,862,5,116,0,0,862,864,5,114,0,0,863,853,1,0,0,0,863,
		860,1,0,0,0,864,103,1,0,0,0,865,866,4,51,51,0,866,867,5,112,0,0,867,868,
		5,114,0,0,868,869,5,105,0,0,869,870,5,118,0,0,870,871,5,97,0,0,871,872,
		5,116,0,0,872,873,5,101,0,0,873,105,1,0,0,0,874,888,4,52,52,0,875,876,
		5,112,0,0,876,877,5,114,0,0,877,878,5,111,0,0,878,879,5,99,0,0,879,880,
		5,101,0,0,880,881,5,100,0,0,881,882,5,117,0,0,882,883,5,114,0,0,883,889,
		5,101,0,0,884,885,5,112,0,0,885,886,5,114,0,0,886,887,5,111,0,0,887,889,
		5,99,0,0,888,875,1,0,0,0,888,884,1,0,0,0,889,107,1,0,0,0,890,891,4,53,
		53,0,891,892,5,112,0,0,892,893,5,117,0,0,893,894,5,98,0,0,894,895,5,108,
		0,0,895,896,5,105,0,0,896,897,5,99,0,0,897,109,1,0,0,0,898,899,4,54,54,
		0,899,900,5,114,0,0,900,901,5,97,0,0,901,902,5,119,0,0,902,111,1,0,0,0,
		903,904,4,55,55,0,904,905,5,114,0,0,905,906,5,101,0,0,906,907,5,97,0,0,
		907,908,5,100,0,0,908,909,5,111,0,0,909,910,5,110,0,0,910,911,5,108,0,
		0,911,912,5,121,0,0,912,113,1,0,0,0,913,926,4,56,56,0,914,915,5,114,0,
		0,915,916,5,101,0,0,916,917,5,99,0,0,917,918,5,117,0,0,918,919,5,114,0,
		0,919,920,5,115,0,0,920,921,5,105,0,0,921,922,5,118,0,0,922,927,5,101,
		0,0,923,924,5,114,0,0,924,925,5,101,0,0,925,927,5,99,0,0,926,914,1,0,0,
		0,926,923,1,0,0,0,927,115,1,0,0,0,928,929,4,57,57,0,929,930,5,114,0,0,
		930,931,5,101,0,0,931,932,5,102,0,0,932,117,1,0,0,0,933,934,4,58,58,0,
		934,935,5,114,0,0,935,936,5,101,0,0,936,937,5,108,0,0,937,938,5,111,0,
		0,938,939,5,111,0,0,939,940,5,112,0,0,940,119,1,0,0,0,941,942,4,59,59,
		0,942,943,5,114,0,0,943,944,5,101,0,0,944,945,5,116,0,0,945,946,5,97,0,
		0,946,947,5,105,0,0,947,948,5,110,0,0,948,121,1,0,0,0,949,950,4,60,60,
		0,950,951,5,114,0,0,951,952,5,101,0,0,952,953,5,116,0,0,953,954,5,117,
		0,0,954,955,5,114,0,0,955,956,5,110,0,0,956,123,1,0,0,0,957,958,4,61,61,
		0,958,959,5,114,0,0,959,960,5,101,0,0,960,961,5,116,0,0,961,962,5,117,
		0,0,962,963,5,114,0,0,963,964,5,110,0,0,964,965,5,111,0,0,965,966,5,110,
		0,0,966,125,1,0,0,0,967,968,4,62,62,0,968,969,5,114,0,0,969,970,5,101,
		0,0,970,971,5,116,0,0,971,972,5,117,0,0,972,973,5,114,0,0,973,974,5,110,
		0,0,974,975,5,115,0,0,975,127,1,0,0,0,976,977,4,63,63,0,977,978,5,115,
		0,0,978,979,5,99,0,0,979,980,5,97,0,0,980,981,5,110,0,0,981,982,5,97,0,
		0,982,983,5,115,0,0,983,129,1,0,0,0,984,985,4,64,64,0,985,986,5,115,0,
		0,986,987,5,99,0,0,987,988,5,111,0,0,988,989,5,112,0,0,989,990,5,101,0,
		0,990,131,1,0,0,0,991,992,4,65,65,0,992,993,5,115,0,0,993,994,5,101,0,
		0,994,995,5,99,0,0,995,996,5,116,0,0,996,997,5,105,0,0,997,998,5,111,0,
		0,998,999,5,110,0,0,999,133,1,0,0,0,1000,1001,4,66,66,0,1001,1002,5,115,
		0,0,1002,1003,5,101,0,0,1003,1004,5,108,0,0,1004,1005,5,101,0,0,1005,1006,
		5,99,0,0,1006,1007,5,116,0,0,1007,135,1,0,0,0,1008,1009,4,67,67,0,1009,
		1010,5,115,0,0,1010,1011,5,105,0,0,1011,1012,5,110,0,0,1012,1013,5,103,
		0,0,1013,1014,5,108,0,0,1014,1015,5,101,0,0,1015,1016,5,116,0,0,1016,137,
		1,0,0,0,1017,1018,4,68,68,0,1018,1019,5,115,0,0,1019,1020,5,116,0,0,1020,
		1021,5,97,0,0,1021,1022,5,99,0,0,1022,1023,5,107,0,0,1023,139,1,0,0,0,
		1024,1025,4,69,69,0,1025,1026,5,115,0,0,1026,1027,5,116,0,0,1027,1028,
		5,97,0,0,1028,1029,5,116,0,0,1029,1030,5,105,0,0,1030,1031,5,99,0,0,1031,
		141,1,0,0,0,1032,1033,4,70,70,0,1033,1034,5,115,0,0,1034,1035,5,116,0,
		0,1035,1036,5,114,0,0,1036,1037,5,105,0,0,1037,1038,5,110,0,0,1038,1039,
		5,103,0,0,1039,143,1,0,0,0,1040,1056,4,71,71,0,1041,1042,5,115,0,0,1042,
		1043,5,116,0,0,1043,1044,5,114,0,0,1044,1045,5,117,0,0,1045,1046,5,99,
		0,0,1046,1047,5,116,0,0,1047,1048,5,117,0,0,1048,1049,5,114,0,0,1049,1057,
		5,101,0,0,1050,1051,5,115,0,0,1051,1052,5,116,0,0,1052,1053,5,114,0,0,
		1053,1054,5,117,0,0,1054,1055,5,99,0,0,1055,1057,5,116,0,0,1056,1041,1,
		0,0,0,1056,1050,1,0,0,0,1057,145,1,0,0,0,1058,1059,4,72,72,0,1059,1060,
		5,116,0,0,1060,1061,5,104,0,0,1061,1062,5,101,0,0,1062,1063,5,110,0,0,
		1063,147,1,0,0,0,1064,1065,4,73,73,0,1065,1066,5,116,0,0,1066,1067,5,111,
		0,0,1067,149,1,0,0,0,1068,1069,4,74,74,0,1069,1070,5,116,0,0,1070,1071,
		5,114,0,0,1071,1072,5,97,0,0,1072,1073,5,105,0,0,1073,1074,5,116,0,0,1074,
		1075,5,115,0,0,1075,151,1,0,0,0,1076,1077,4,75,75,0,1077,1078,5,116,0,
		0,1078,1079,5,121,0,0,1079,1080,5,112,0,0,1080,1081,5,101,0,0,1081,153,
		1,0,0,0,1082,1083,4,76,76,0,1083,1084,5,117,0,0,1084,1085,5,110,0,0,1085,
		1086,5,97,0,0,1086,1087,5,108,0,0,1087,1088,5,105,0,0,1088,1089,5,103,
		0,0,1089,1090,5,110,0,0,1090,1091,5,101,0,0,1091,1092,5,100,0,0,1092,155,
		1,0,0,0,1093,1094,4,77,77,0,1094,1095,5,117,0,0,1095,1096,5,110,0,0,1096,
		1097,5,116,0,0,1097,1098,5,105,0,0,1098,1099,5,108,0,0,1099,157,1,0,0,
		0,1100,1101,4,78,78,0,1101,1102,5,117,0,0,1102,1103,5,115,0,0,1103,1104,
		5,101,0,0,1104,1105,5,115,0,0,1105,159,1,0,0,0,1106,1107,4,79,79,0,1107,
		1108,5,117,0,0,1108,1109,5,115,0,0,1109,1110,5,105,0,0,1110,1111,5,110,
		0,0,1111,1112,5,103,0,0,1112,161,1,0,0,0,1113,1114,4,80,80,0,1114,1115,
		5,117,0,0,1115,1116,5,116,0,0,1116,1117,5,102,0,0,1117,163,1,0,0,0,1118,
		1119,4,81,81,0,1119,1120,5,118,0,0,1120,1121,5,97,0,0,1121,1122,5,114,
		0,0,1122,1123,5,105,0,0,1123,1124,5,97,0,0,1124,1125,5,98,0,0,1125,1126,
		5,108,0,0,1126,1127,5,101,0,0,1127,165,1,0,0,0,1128,1129,4,82,82,0,1129,
		1130,5,118,0,0,1130,1131,5,97,0,0,1131,1132,5,114,0,0,1132,1133,5,121,
		0,0,1133,1134,5,105,0,0,1134,1135,5,110,0,0,1135,1136,5,103,0,0,1136,167,
		1,0,0,0,1137,1138,4,83,83,0,1138,1139,5,119,0,0,1139,1140,5,104,0,0,1140,
		1141,5,101,0,0,1141,1142,5,110,0,0,1142,169,1,0,0,0,1143,1144,4,84,84,
		0,1144,1145,5,119,0,0,1145,1146,5,104,0,0,1146,1147,5,105,0,0,1147,1148,
		5,108,0,0,1148,1149,5,101,0,0,1149,171,1,0,0,0,1150,1151,4,85,85,0,1151,
		1152,5,121,0,0,1152,1153,5,105,0,0,1153,1154,5,101,0,0,1154,1155,5,108,
		0,0,1155,1156,5,100,0,0,1156,173,1,0,0,0,1157,1162,3,342,170,0,1158,1161,
		3,174,86,0,1159,1161,9,0,0,0,1160,1158,1,0,0,0,1160,1159,1,0,0,0,1161,
		1164,1,0,0,0,1162,1163,1,0,0,0,1162,1160,1,0,0,0,1163,1165,1,0,0,0,1164,
		1162,1,0,0,0,1165,1166,3,344,171,0,1166,1167,1,0,0,0,1167,1168,6,86,0,
		0,1168,175,1,0,0,0,1169,1173,3,346,172,0,1170,1172,9,0,0,0,1171,1170,1,
		0,0,0,1172,1175,1,0,0,0,1173,1174,1,0,0,0,1173,1171,1,0,0,0,1174,1176,
		1,0,0,0,1175,1173,1,0,0,0,1176,1177,3,348,173,0,1177,1178,1,0,0,0,1178,
		1179,6,87,0,0,1179,177,1,0,0,0,1180,1182,7,0,0,0,1181,1180,1,0,0,0,1182,
		1183,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,
		1186,6,88,1,0,1186,179,1,0,0,0,1187,1191,3,244,121,0,1188,1190,9,0,0,0,
		1189,1188,1,0,0,0,1190,1193,1,0,0,0,1191,1192,1,0,0,0,1191,1189,1,0,0,
		0,1192,1194,1,0,0,0,1193,1191,1,0,0,0,1194,1195,3,244,121,0,1195,181,1,
		0,0,0,1196,1200,3,246,122,0,1197,1199,9,0,0,0,1198,1197,1,0,0,0,1199,1202,
		1,0,0,0,1200,1201,1,0,0,0,1200,1198,1,0,0,0,1201,1203,1,0,0,0,1202,1200,
		1,0,0,0,1203,1204,3,246,122,0,1204,183,1,0,0,0,1205,1209,3,248,123,0,1206,
		1208,9,0,0,0,1207,1206,1,0,0,0,1208,1211,1,0,0,0,1209,1210,1,0,0,0,1209,
		1207,1,0,0,0,1210,1212,1,0,0,0,1211,1209,1,0,0,0,1212,1213,3,248,123,0,
		1213,185,1,0,0,0,1214,1215,5,65279,0,0,1215,1216,1,0,0,0,1216,1217,6,92,
		2,0,1217,187,1,0,0,0,1218,1219,3,204,101,0,1219,1220,3,316,157,0,1220,
		189,1,0,0,0,1221,1226,3,318,158,0,1222,1223,5,32,0,0,1223,1225,3,318,158,
		0,1224,1222,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,
		0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1229,1221,1,0,0,0,1230,1231,1,
		0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,1246,1,0,0,0,1233,1238,
		3,318,158,0,1234,1235,5,95,0,0,1235,1237,3,318,158,0,1236,1234,1,0,0,0,
		1237,1240,1,0,0,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,1242,1,0,0,
		0,1240,1238,1,0,0,0,1241,1233,1,0,0,0,1242,1243,1,0,0,0,1243,1241,1,0,
		0,0,1243,1244,1,0,0,0,1244,1246,1,0,0,0,1245,1229,1,0,0,0,1245,1241,1,
		0,0,0,1246,1248,1,0,0,0,1247,1249,3,334,166,0,1248,1247,1,0,0,0,1248,1249,
		1,0,0,0,1249,1250,1,0,0,0,1250,1251,3,326,162,0,1251,191,1,0,0,0,1252,
		1257,3,320,159,0,1253,1254,5,32,0,0,1254,1256,3,320,159,0,1255,1253,1,
		0,0,0,1256,1259,1,0,0,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,1261,
		1,0,0,0,1259,1257,1,0,0,0,1260,1252,1,0,0,0,1261,1262,1,0,0,0,1262,1260,
		1,0,0,0,1262,1263,1,0,0,0,1263,1277,1,0,0,0,1264,1269,3,320,159,0,1265,
		1266,5,95,0,0,1266,1268,3,320,159,0,1267,1265,1,0,0,0,1268,1271,1,0,0,
		0,1269,1267,1,0,0,0,1269,1270,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,
		0,0,1272,1264,1,0,0,0,1273,1274,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,
		0,0,0,1275,1277,1,0,0,0,1276,1260,1,0,0,0,1276,1272,1,0,0,0,1277,1279,
		1,0,0,0,1278,1280,3,338,168,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,
		1281,1,0,0,0,1281,1282,3,328,163,0,1282,193,1,0,0,0,1283,1288,3,324,161,
		0,1284,1285,5,32,0,0,1285,1287,3,324,161,0,1286,1284,1,0,0,0,1287,1290,
		1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,1292,1,0,0,0,1290,1288,
		1,0,0,0,1291,1283,1,0,0,0,1292,1293,1,0,0,0,1293,1291,1,0,0,0,1293,1294,
		1,0,0,0,1294,1308,1,0,0,0,1295,1300,3,324,161,0,1296,1297,5,95,0,0,1297,
		1299,3,324,161,0,1298,1296,1,0,0,0,1299,1302,1,0,0,0,1300,1298,1,0,0,0,
		1300,1301,1,0,0,0,1301,1304,1,0,0,0,1302,1300,1,0,0,0,1303,1295,1,0,0,
		0,1304,1305,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1308,1,0,
		0,0,1307,1291,1,0,0,0,1307,1303,1,0,0,0,1308,1310,1,0,0,0,1309,1311,3,
		340,169,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1313,
		3,332,165,0,1313,195,1,0,0,0,1314,1318,7,1,0,0,1315,1317,7,2,0,0,1316,
		1315,1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,
		197,1,0,0,0,1320,1318,1,0,0,0,1321,1323,5,48,0,0,1322,1324,7,3,0,0,1323,
		1322,1,0,0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1327,7,4,0,0,1326,
		1325,1,0,0,0,1326,1327,1,0,0,0,1327,1329,1,0,0,0,1328,1330,7,3,0,0,1329,
		1328,1,0,0,0,1330,1331,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,
		199,1,0,0,0,1333,1338,3,322,160,0,1334,1335,5,32,0,0,1335,1337,3,322,160,
		0,1336,1334,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,
		0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,1341,1333,1,0,0,0,1342,1343,1,
		0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,0,1345,1347,
		3,336,167,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,1349,1,0,0,0,1348,
		1350,3,330,164,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,201,1,0,0,0,
		1351,1352,5,35,0,0,1352,203,1,0,0,0,1353,1354,5,64,0,0,1354,205,1,0,0,
		0,1355,1356,5,45,0,0,1356,1359,5,62,0,0,1357,1359,5,10132,0,0,1358,1355,
		1,0,0,0,1358,1357,1,0,0,0,1359,207,1,0,0,0,1360,1361,5,45,0,0,1361,1362,
		5,45,0,0,1362,1365,5,62,0,0,1363,1365,5,8614,0,0,1364,1360,1,0,0,0,1364,
		1363,1,0,0,0,1365,209,1,0,0,0,1366,1367,5,46,0,0,1367,211,1,0,0,0,1368,
		1369,5,44,0,0,1369,213,1,0,0,0,1370,1371,5,40,0,0,1371,215,1,0,0,0,1372,
		1373,5,41,0,0,1373,217,1,0,0,0,1374,1375,5,91,0,0,1375,219,1,0,0,0,1376,
		1377,5,93,0,0,1377,221,1,0,0,0,1378,1379,5,123,0,0,1379,223,1,0,0,0,1380,
		1381,5,125,0,0,1381,225,1,0,0,0,1382,1383,5,61,0,0,1383,227,1,0,0,0,1384,
		1385,5,8656,0,0,1385,229,1,0,0,0,1386,1387,5,42,0,0,1387,231,1,0,0,0,1388,
		1389,7,5,0,0,1389,233,1,0,0,0,1390,1391,5,43,0,0,1391,235,1,0,0,0,1392,
		1393,5,45,0,0,1393,237,1,0,0,0,1394,1395,5,59,0,0,1395,239,1,0,0,0,1396,
		1397,5,42,0,0,1397,1400,5,42,0,0,1398,1400,5,129045,0,0,1399,1396,1,0,
		0,0,1399,1398,1,0,0,0,1400,241,1,0,0,0,1401,1402,5,58,0,0,1402,243,1,0,
		0,0,1403,1404,5,34,0,0,1404,1405,5,34,0,0,1405,1406,5,34,0,0,1406,245,
		1,0,0,0,1407,1408,5,34,0,0,1408,1409,5,34,0,0,1409,247,1,0,0,0,1410,1411,
		5,34,0,0,1411,249,1,0,0,0,1412,1413,5,39,0,0,1413,251,1,0,0,0,1414,1415,
		5,126,0,0,1415,253,1,0,0,0,1416,1417,5,62,0,0,1417,255,1,0,0,0,1418,1419,
		5,60,0,0,1419,257,1,0,0,0,1420,1421,5,62,0,0,1421,1424,5,61,0,0,1422,1424,
		5,8805,0,0,1423,1420,1,0,0,0,1423,1422,1,0,0,0,1424,259,1,0,0,0,1425,1426,
		5,60,0,0,1426,1429,5,61,0,0,1427,1429,5,8804,0,0,1428,1425,1,0,0,0,1428,
		1427,1,0,0,0,1429,261,1,0,0,0,1430,1431,5,126,0,0,1431,1432,5,62,0,0,1432,
		263,1,0,0,0,1433,1434,5,126,0,0,1434,1435,5,60,0,0,1435,265,1,0,0,0,1436,
		1437,5,126,0,0,1437,1440,5,61,0,0,1438,1440,5,8800,0,0,1439,1436,1,0,0,
		0,1439,1438,1,0,0,0,1440,267,1,0,0,0,1441,1442,5,37,0,0,1442,269,1,0,0,
		0,1443,1444,5,38,0,0,1444,271,1,0,0,0,1445,1446,5,124,0,0,1446,273,1,0,
		0,0,1447,1448,5,126,0,0,1448,1449,5,38,0,0,1449,275,1,0,0,0,1450,1451,
		5,126,0,0,1451,1452,5,124,0,0,1452,277,1,0,0,0,1453,1454,7,6,0,0,1454,
		279,1,0,0,0,1455,1456,5,126,0,0,1456,1460,5,94,0,0,1457,1458,5,126,0,0,
		1458,1460,5,8853,0,0,1459,1455,1,0,0,0,1459,1457,1,0,0,0,1460,281,1,0,
		0,0,1461,1462,5,38,0,0,1462,1463,5,40,0,0,1463,283,1,0,0,0,1464,1465,5,
		124,0,0,1465,1466,5,40,0,0,1466,285,1,0,0,0,1467,1468,5,126,0,0,1468,1469,
		5,38,0,0,1469,1470,5,40,0,0,1470,287,1,0,0,0,1471,1472,5,126,0,0,1472,
		1473,5,124,0,0,1473,1474,5,40,0,0,1474,289,1,0,0,0,1475,1476,5,94,0,0,
		1476,1480,5,40,0,0,1477,1478,5,8853,0,0,1478,1480,5,40,0,0,1479,1475,1,
		0,0,0,1479,1477,1,0,0,0,1480,291,1,0,0,0,1481,1482,5,126,0,0,1482,1483,
		5,94,0,0,1483,1488,5,40,0,0,1484,1485,5,126,0,0,1485,1486,5,8853,0,0,1486,
		1488,5,40,0,0,1487,1481,1,0,0,0,1487,1484,1,0,0,0,1488,293,1,0,0,0,1489,
		1490,5,38,0,0,1490,1491,5,38,0,0,1491,295,1,0,0,0,1492,1493,5,124,0,0,
		1493,1494,5,124,0,0,1494,297,1,0,0,0,1495,1496,5,43,0,0,1496,1497,5,43,
		0,0,1497,299,1,0,0,0,1498,1499,5,60,0,0,1499,1500,5,60,0,0,1500,301,1,
		0,0,0,1501,1502,5,62,0,0,1502,1503,5,62,0,0,1503,303,1,0,0,0,1504,1505,
		5,62,0,0,1505,1506,5,62,0,0,1506,1507,5,62,0,0,1507,305,1,0,0,0,1508,1509,
		5,60,0,0,1509,1512,5,64,0,0,1510,1512,5,10688,0,0,1511,1508,1,0,0,0,1511,
		1510,1,0,0,0,1512,307,1,0,0,0,1513,1514,5,64,0,0,1514,1517,5,62,0,0,1515,
		1517,5,10689,0,0,1516,1513,1,0,0,0,1516,1515,1,0,0,0,1517,309,1,0,0,0,
		1518,1519,5,46,0,0,1519,1520,5,46,0,0,1520,311,1,0,0,0,1521,1522,5,91,
		0,0,1522,1523,5,62,0,0,1523,313,1,0,0,0,1524,1525,5,60,0,0,1525,1526,5,
		93,0,0,1526,315,1,0,0,0,1527,1531,3,350,174,0,1528,1530,3,352,175,0,1529,
		1528,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,
		317,1,0,0,0,1533,1531,1,0,0,0,1534,1535,7,7,0,0,1535,319,1,0,0,0,1536,
		1537,7,8,0,0,1537,321,1,0,0,0,1538,1539,7,2,0,0,1539,323,1,0,0,0,1540,
		1541,7,3,0,0,1541,325,1,0,0,0,1542,1543,5,58,0,0,1543,1547,5,98,0,0,1544,
		1545,5,58,0,0,1545,1547,5,66,0,0,1546,1542,1,0,0,0,1546,1544,1,0,0,0,1547,
		327,1,0,0,0,1548,1549,5,58,0,0,1549,1553,5,111,0,0,1550,1551,5,58,0,0,
		1551,1553,5,79,0,0,1552,1548,1,0,0,0,1552,1550,1,0,0,0,1553,329,1,0,0,
		0,1554,1555,5,58,0,0,1555,1559,5,100,0,0,1556,1557,5,58,0,0,1557,1559,
		5,68,0,0,1558,1554,1,0,0,0,1558,1556,1,0,0,0,1559,331,1,0,0,0,1560,1561,
		5,58,0,0,1561,1565,5,104,0,0,1562,1563,5,58,0,0,1563,1565,5,72,0,0,1564,
		1560,1,0,0,0,1564,1562,1,0,0,0,1565,333,1,0,0,0,1566,1568,5,46,0,0,1567,
		1569,7,7,0,0,1568,1567,1,0,0,0,1569,1570,1,0,0,0,1570,1568,1,0,0,0,1570,
		1571,1,0,0,0,1571,335,1,0,0,0,1572,1574,5,46,0,0,1573,1575,7,2,0,0,1574,
		1573,1,0,0,0,1575,1576,1,0,0,0,1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,
		337,1,0,0,0,1578,1580,5,46,0,0,1579,1581,7,8,0,0,1580,1579,1,0,0,0,1581,
		1582,1,0,0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,339,1,0,0,0,1584,
		1586,5,46,0,0,1585,1587,7,3,0,0,1586,1585,1,0,0,0,1587,1588,1,0,0,0,1588,
		1586,1,0,0,0,1588,1589,1,0,0,0,1589,341,1,0,0,0,1590,1591,5,47,0,0,1591,
		1592,5,42,0,0,1592,343,1,0,0,0,1593,1594,5,42,0,0,1594,1595,5,47,0,0,1595,
		345,1,0,0,0,1596,1597,5,47,0,0,1597,1598,5,47,0,0,1598,347,1,0,0,0,1599,
		1600,5,10,0,0,1600,349,1,0,0,0,1601,1602,7,9,0,0,1602,351,1,0,0,0,1603,
		1604,7,10,0,0,1604,353,1,0,0,0,1605,1606,7,11,0,0,1606,355,1,0,0,0,1607,
		1608,7,12,0,0,1608,357,1,0,0,0,1609,1610,7,13,0,0,1610,359,1,0,0,0,1611,
		1612,5,32,0,0,1612,361,1,0,0,0,1613,1614,5,48,0,0,1614,1622,5,120,0,0,
		1615,1616,5,48,0,0,1616,1622,5,88,0,0,1617,1618,5,48,0,0,1618,1622,5,104,
		0,0,1619,1620,5,48,0,0,1620,1622,5,72,0,0,1621,1613,1,0,0,0,1621,1615,
		1,0,0,0,1621,1617,1,0,0,0,1621,1619,1,0,0,0,1622,363,1,0,0,0,1623,1624,
		7,14,0,0,1624,365,1,0,0,0,1625,1626,5,48,0,0,1626,1630,5,98,0,0,1627,1628,
		5,48,0,0,1628,1630,5,121,0,0,1629,1625,1,0,0,0,1629,1627,1,0,0,0,1630,
		367,1,0,0,0,1631,1632,7,15,0,0,1632,369,1,0,0,0,1633,1634,5,48,0,0,1634,
		1638,5,111,0,0,1635,1636,5,48,0,0,1636,1638,5,113,0,0,1637,1633,1,0,0,
		0,1637,1635,1,0,0,0,1638,371,1,0,0,0,1639,1640,7,16,0,0,1640,373,1,0,0,
		0,1641,1642,9,0,0,0,1642,375,1,0,0,0,1643,1647,3,56,27,0,1644,1646,3,360,
		179,0,1645,1644,1,0,0,0,1646,1649,1,0,0,0,1647,1645,1,0,0,0,1647,1648,
		1,0,0,0,1648,1650,1,0,0,0,1649,1647,1,0,0,0,1650,1651,6,187,3,0,1651,377,
		1,0,0,0,1652,1654,7,17,0,0,1653,1652,1,0,0,0,1654,1655,1,0,0,0,1655,1653,
		1,0,0,0,1655,1656,1,0,0,0,1656,379,1,0,0,0,1657,1658,3,316,157,0,1658,
		381,1,0,0,0,1659,1661,5,61,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,
		1663,1,0,0,0,1662,1664,5,35,0,0,1663,1662,1,0,0,0,1663,1664,1,0,0,0,1664,
		1665,1,0,0,0,1665,1669,7,2,0,0,1666,1668,7,2,0,0,1667,1666,1,0,0,0,1668,
		1671,1,0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,1673,1,0,0,0,1671,
		1669,1,0,0,0,1672,1674,5,100,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,
		383,1,0,0,0,1675,1677,5,61,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,
		1679,1,0,0,0,1678,1680,5,35,0,0,1679,1678,1,0,0,0,1679,1680,1,0,0,0,1680,
		1694,1,0,0,0,1681,1683,3,362,180,0,1682,1684,3,324,161,0,1683,1682,1,0,
		0,0,1684,1685,1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,1695,1,
		0,0,0,1687,1689,3,324,161,0,1688,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1688,
		1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,1692,1693,3,364,181,0,1693,
		1695,1,0,0,0,1694,1681,1,0,0,0,1694,1688,1,0,0,0,1695,385,1,0,0,0,1696,
		1698,5,61,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,
		1701,5,35,0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,1715,1,0,0,0,1702,
		1704,3,370,184,0,1703,1705,3,320,159,0,1704,1703,1,0,0,0,1705,1706,1,0,
		0,0,1706,1704,1,0,0,0,1706,1707,1,0,0,0,1707,1716,1,0,0,0,1708,1710,3,
		320,159,0,1709,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1709,1,0,0,0,1711,1712,
		1,0,0,0,1712,1713,1,0,0,0,1713,1714,3,372,185,0,1714,1716,1,0,0,0,1715,
		1702,1,0,0,0,1715,1709,1,0,0,0,1716,387,1,0,0,0,1717,1719,5,61,0,0,1718,
		1717,1,0,0,0,1718,1719,1,0,0,0,1719,1721,1,0,0,0,1720,1722,5,35,0,0,1721,
		1720,1,0,0,0,1721,1722,1,0,0,0,1722,1736,1,0,0,0,1723,1725,3,366,182,0,
		1724,1726,3,318,158,0,1725,1724,1,0,0,0,1726,1727,1,0,0,0,1727,1725,1,
		0,0,0,1727,1728,1,0,0,0,1728,1737,1,0,0,0,1729,1731,3,318,158,0,1730,1729,
		1,0,0,0,1731,1732,1,0,0,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1734,
		1,0,0,0,1734,1735,3,368,183,0,1735,1737,1,0,0,0,1736,1723,1,0,0,0,1736,
		1730,1,0,0,0,1737,389,1,0,0,0,1738,1743,3,342,170,0,1739,1742,3,174,86,
		0,1740,1742,9,0,0,0,1741,1739,1,0,0,0,1741,1740,1,0,0,0,1742,1745,1,0,
		0,0,1743,1744,1,0,0,0,1743,1741,1,0,0,0,1744,1746,1,0,0,0,1745,1743,1,
		0,0,0,1746,1747,3,344,171,0,1747,1748,1,0,0,0,1748,1749,6,194,0,0,1749,
		391,1,0,0,0,1750,1753,3,346,172,0,1751,1753,3,238,118,0,1752,1750,1,0,
		0,0,1752,1751,1,0,0,0,1753,1757,1,0,0,0,1754,1756,9,0,0,0,1755,1754,1,
		0,0,0,1756,1759,1,0,0,0,1757,1758,1,0,0,0,1757,1755,1,0,0,0,1758,1760,
		1,0,0,0,1759,1757,1,0,0,0,1760,1761,3,348,173,0,1761,393,1,0,0,0,1762,
		1763,7,18,0,0,1763,395,1,0,0,0,1764,1765,7,19,0,0,1765,397,1,0,0,0,1766,
		1767,7,20,0,0,1767,399,1,0,0,0,1768,1769,2,40,41,0,1769,401,1,0,0,0,1770,
		1771,5,123,0,0,1771,403,1,0,0,0,1772,1773,5,125,0,0,1773,405,1,0,0,0,1774,
		1776,5,32,0,0,1775,1774,1,0,0,0,1776,1777,1,0,0,0,1777,1775,1,0,0,0,1777,
		1778,1,0,0,0,1778,1779,1,0,0,0,1779,1780,6,202,1,0,1780,407,1,0,0,0,101,
		0,1,454,473,492,511,527,570,612,625,637,714,726,769,829,863,888,926,1056,
		1160,1162,1173,1183,1191,1200,1209,1226,1231,1238,1243,1245,1248,1257,
		1262,1269,1274,1276,1279,1288,1293,1300,1305,1307,1310,1318,1323,1326,
		1331,1338,1343,1346,1349,1358,1364,1399,1423,1428,1439,1459,1479,1487,
		1511,1516,1531,1546,1552,1558,1564,1570,1576,1582,1588,1621,1629,1637,
		1647,1655,1660,1663,1669,1673,1676,1679,1685,1690,1694,1697,1700,1706,
		1711,1715,1718,1721,1727,1732,1736,1741,1743,1752,1757,1777,4,0,3,0,0,
		2,0,6,0,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
