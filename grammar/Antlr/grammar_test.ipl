
scope grammar.testing.scope

def memory_map struct
     signature(18:14, 10:5) bin(8)
     builtin(7) struct
        header  fixed binary(31)
        bytes(40960 * 10)   bin(8)
     end
end struct

dcl isr_vectors(1024) pointer section(".isr_vector") retain



dcl call string(32)
dcl return bin(15)
dcl binary decimal(10)
//dcl all range;
dcl page (4096) bin(8) static
dcl stacks (1024) fixed dec(2) stack 
//dcl io_buffer (4096) byte(1) // byte; is the same as byte(1)
dcl user_name string(128) 
//dcl msg_buffer byte(1024)

def window_title alias string(128) 



//traits dcl(section(".vector"), retain)

def other_map struct
     signature(8) bin(8)
     free_space struct
        header fixed binary(31)
        bytes(40960)   bin(8)
     end
end 

dcl buffer binary(16) based(p)

dcl main_title as window_title

//end

// linkage(section(".isr_vector"), retain, main)
// genesis(stack)

proc set_stack_ptr (addr) intrinsic (arm)

end proc

proc set_stack_ptr (addr) intrinsic (tumb)

end

proc set_stack_ptr (addr) intrinsic (riscv)

end
procedure breakpoint(X) intrinsic(arm) 

        
    /* embed these hard coded values, they */
    /* implement simple jump table   */
    asm (section(".vectors"))
    
        0x123   // this is dodgy
        0X123
        0111b
        0123h
        023H
        {X}
        0o1256
        01123d
        11001101010100b
        10101010101010y
        LDR R1, =#0x20001000    /* Load address 0x20001000 to R1 */
        LDR R2, =#0h20001004    /* Load address 0x20001004 to R2 */
        LDR R3, =#0o20001008    /* Load address 0x20001008 to R3 */
        LDR R0, [R1]            /* Load data at the address pointing by R1, save to R0 */
        LDR R1, [R2]            /* Load data at the address pointing by R2, save to R1 */
        ADD R0, R1              /* Add R0 to R1, save to R0 */
        STR R0, [R3]            /* Store R0 to the address pointing by R3 */
/*
        start
        BL       func1             // Branch to first subroutine
        BL       func2             //Branch to second subroutine
        stop
        MOV      r0, #0x18         // angel_SWIreason_ReportException
        LDR      r1, =0x20026      // ADP_Stopped_ApplicationExit
        SVC      #0x123456         // ARM semihosting (formerly SWI)
        func1
        LDR      r0, =42           // => MOV R0, #42
        LDR      r1, =0x55555555  // => LDR R1, [PC, #offset to
                                    // Literal Pool 1]
        LDR      r2, =0xFFFFFFFF   // => MVN R2, #0
        BX       lr
        LTORG                      // Literal Pool 1 contains
                                    // literal Ox55555555
        func2
        LDR      r3, =0x55555555   // => LDR R3, [PC, #offset to
                                    // Literal Pool 1]
        ; LDR r4, =0x66666666      // If this is uncommented it
                                    // fails, because Literal Pool 2
                                    // is out of reach
        BX       lr
        LargeTable
        SPACE    4200              // Starting at the current location,
                                    // clears a 4200 byte area of memory
                                    // to zero
*/
    end

end


procedure startup (root_ptr) main traits(section("abc"))

      arg root_ptr pointer

      dcl map as memory_map based (root_ptr)

      dcl data fixed bin(15)// defined(p) = 12
      dcl buffer binary(16) based(p) = 12
      //range = 1>..<4 // 1 to 4 INCINC
      //range = 1<..>4 // 2 to 3 EXCEXC

      hex = face_23ed_8f0d:h
      hex = face 23ed 8f0d:h
      if a > b then
         ;
      else
         ;
      end

      a = month --> (1:"jan")(2:"feb")(3:"mar")("old")
      
      a = (month,year) --> (1:"jan")(2:"feb")(3:"mar")("old")

      a ⇐ expr --> (true_expr)(false_expr)  // basic ternary 

      a ⇐ expr ↦ (true_expr)(false_expr)  // basic ternary 

      a ⇐ expr1 --> (a:b)(x:y)(c)

      A ⇐ (expr2) ↦ (A:B)(X:Y)(C)

      A ⇐ expr3 ↦ (A:B)(X:expr4 --> (AA:BB)(XX:YY)(expr5 ↦ (AAA:BBB)(XXX:YYY)(C)))(C)
 
      a = x --> ("true")("false")
      a = x --> (1:"1")(2:"2")(3:"3")("*")
      a = (x) --> (1:"1")(2:"2")(3:"3")("*")
      a = (x*y,z) --> (1,10:"1")(2,10:"2")(3,20:"3")("*")      
      a = (x,y) --> (1,10:"A")(2,10:"A")(3,20:"B")("*")   
      a = (x,y) ↦ ((1,2),10:"A")(3,20:"B")("*")
 
      if expr/36 + 17 = expr_1 then
         if rate = 100 then
            return (slow)
         elif rate = 200 then
            return (fast)
         else
            return (stopped)
         end
      elif expr/36 + 17 = expr_2 then
         return (result_2)
      else
         return (result_3)
      end

      adjustment = count > last_count ↦ (expr_true)(expr_false)

      if then > else then 
         else ⇐ if
      elif if < then then
         elif ⇐ if
      else
         then ⇐ goto
         elif ⇐ else
      end

      root_ptr ⇐ null

      if root_ptr = null then
         call log("Invalid root pointer")
         return
      end

      if map.signature ~= "This is a valid image" then
         call log("Invalid map signature")
         return
      end 

      result ⇐ get_snapshot(root_ptr)


      select (result)
      when(1)
         call log("It was 1")
      when(2)
         call log("It was 2")
      else
         call log("It was unexpected")
      end

      /* IPL supports several bitwise operators   */
      // |      OR
      // &      AND
      // ^      XOR
      // ~|     NOR
      // ~&     NAND 
      // ~^     XNOR 


      field ⇐ input_1 ^ input_2 & input_3 | input_4

      field ⇐ input_4 ~& input_3 ~^ input_2 ~| input_1

      field ⇐ &(1010 1101:b) & ⊕(1101 0011:b) ~^ ~&(field)

      text ⇐ "I am the beginning and " ++ "the end"

      result = a * b + c

      a ⇐ arguer()

      status = xfer_reg ⧀ 3 & saved_reg ⧁ 5 ⊕ control_mask // rotate operators

      tally = &(input) & |(previous)

      //a = x {plus} y // a = add(x,y)

      //a = x plus
      //a = x [plus] y
      //a = x `plus y
      //a = x $plus y

      //a = b c (d {e} f(2))
      
      //x = t ⍫⍹⍲ j



end

/*
expression get_result(x,y,z)

// no declarations
// no assignments
// only operators or other expressions
// no call no function invocation
// no static access

end

operator add(x,y) infix

end
*/
proc display_message (text)

   arg text string(*) 

end

function get_latest_data (arg_ptr) returns (pointer)

   arg arg_ptr bin(31)

end 

traits proc(naked, section("code"), cold)

   procedure get_todays_date (date)
   
   arg date string(32)

   def memory_map struct
      signature(18:14, 10:5) bin(8)
      builtin struct
         header  fixed binary(31)
         bytes(40960 * 10)   bin(8)
      end struct
   end struct = 256



      date ⇐ "10 October 2023"

      // Antlr generated

   end

   function xlate(x,y,z) returns(bin(15))

      arg x bin(15)
      arg y bin(15) 
      arg z bin(15)

      // IF x = 0 then return 10
      // IF x = y then return 100
      // IF z = -1 and x = 1000 then return -100
      // IF x = -10 then return -100
      // return x + y + z

      return (x --> (0:10)(y:100)(z --> (-1:1000)(-10):-100)(x+y+z))

   end

end 

end 

scope this.isnot

end
