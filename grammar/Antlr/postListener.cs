//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Post.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PostParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IPostListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.translation_unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTranslation_unit([NotNull] PostParser.Translation_unitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.translation_unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTranslation_unit([NotNull] PostParser.Translation_unitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.procedure_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedure_stmt([NotNull] PostParser.Procedure_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.procedure_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedure_stmt([NotNull] PostParser.Procedure_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.stmt_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt_block([NotNull] PostParser.Stmt_blockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.stmt_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt_block([NotNull] PostParser.Stmt_blockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.terminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerminator([NotNull] PostParser.TerminatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.terminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerminator([NotNull] PostParser.TerminatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.label_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabel_stmt([NotNull] PostParser.Label_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.label_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabel_stmt([NotNull] PostParser.Label_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PRE</c>
	/// labeled alternative in <see cref="PostParser.nonexecutable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPRE([NotNull] PostParser.PREContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PRE</c>
	/// labeled alternative in <see cref="PostParser.nonexecutable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPRE([NotNull] PostParser.PREContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DCL</c>
	/// labeled alternative in <see cref="PostParser.nonexecutable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDCL([NotNull] PostParser.DCLContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DCL</c>
	/// labeled alternative in <see cref="PostParser.nonexecutable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDCL([NotNull] PostParser.DCLContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DEF</c>
	/// labeled alternative in <see cref="PostParser.nonexecutable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDEF([NotNull] PostParser.DEFContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DEF</c>
	/// labeled alternative in <see cref="PostParser.nonexecutable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDEF([NotNull] PostParser.DEFContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ASSIGN</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterASSIGN([NotNull] PostParser.ASSIGNContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ASSIGN</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitASSIGN([NotNull] PostParser.ASSIGNContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCALL([NotNull] PostParser.CALLContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCALL([NotNull] PostParser.CALLContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GOTO</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGOTO([NotNull] PostParser.GOTOContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GOTO</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGOTO([NotNull] PostParser.GOTOContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PROC</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPROC([NotNull] PostParser.PROCContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PROC</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPROC([NotNull] PostParser.PROCContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RET</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRET([NotNull] PostParser.RETContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RET</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRET([NotNull] PostParser.RETContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IF</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIF([NotNull] PostParser.IFContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IF</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIF([NotNull] PostParser.IFContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LOOP</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLOOP([NotNull] PostParser.LOOPContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LOOP</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLOOP([NotNull] PostParser.LOOPContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LEAVE</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLEAVE([NotNull] PostParser.LEAVEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LEAVE</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLEAVE([NotNull] PostParser.LEAVEContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AGAIN</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAGAIN([NotNull] PostParser.AGAINContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AGAIN</c>
	/// labeled alternative in <see cref="PostParser.executable_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAGAIN([NotNull] PostParser.AGAINContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.preprocessor_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessor_stmt([NotNull] PostParser.Preprocessor_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.preprocessor_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessor_stmt([NotNull] PostParser.Preprocessor_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.assign_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_stmt([NotNull] PostParser.Assign_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.assign_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_stmt([NotNull] PostParser.Assign_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BASIC_REF</c>
	/// labeled alternative in <see cref="PostParser.reference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBASIC_REF([NotNull] PostParser.BASIC_REFContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BASIC_REF</c>
	/// labeled alternative in <see cref="PostParser.reference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBASIC_REF([NotNull] PostParser.BASIC_REFContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PTR_REF</c>
	/// labeled alternative in <see cref="PostParser.reference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPTR_REF([NotNull] PostParser.PTR_REFContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PTR_REF</c>
	/// labeled alternative in <see cref="PostParser.reference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPTR_REF([NotNull] PostParser.PTR_REFContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] PostParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] PostParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.arguments_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments_list([NotNull] PostParser.Arguments_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.arguments_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments_list([NotNull] PostParser.Arguments_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.basic_reference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBasic_reference([NotNull] PostParser.Basic_referenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.basic_reference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBasic_reference([NotNull] PostParser.Basic_referenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.structure_qualification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructure_qualification([NotNull] PostParser.Structure_qualificationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.structure_qualification"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructure_qualification([NotNull] PostParser.Structure_qualificationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.structure_qualification_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructure_qualification_list([NotNull] PostParser.Structure_qualification_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.structure_qualification_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructure_qualification_list([NotNull] PostParser.Structure_qualification_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.subscript"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubscript([NotNull] PostParser.SubscriptContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.subscript"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubscript([NotNull] PostParser.SubscriptContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.subscript_commalist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubscript_commalist([NotNull] PostParser.Subscript_commalistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.subscript_commalist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubscript_commalist([NotNull] PostParser.Subscript_commalistContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] PostParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] PostParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_9"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_9([NotNull] PostParser.Expression_9Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_9"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_9([NotNull] PostParser.Expression_9Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_8"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_8([NotNull] PostParser.Expression_8Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_8"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_8([NotNull] PostParser.Expression_8Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_7"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_7([NotNull] PostParser.Expression_7Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_7"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_7([NotNull] PostParser.Expression_7Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_6"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_6([NotNull] PostParser.Expression_6Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_6"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_6([NotNull] PostParser.Expression_6Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_5"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_5([NotNull] PostParser.Expression_5Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_5"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_5([NotNull] PostParser.Expression_5Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_4"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_4([NotNull] PostParser.Expression_4Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_4"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_4([NotNull] PostParser.Expression_4Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_3([NotNull] PostParser.Expression_3Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_3"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_3([NotNull] PostParser.Expression_3Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_2([NotNull] PostParser.Expression_2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_2([NotNull] PostParser.Expression_2Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.expression_1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_1([NotNull] PostParser.Expression_1Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.expression_1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_1([NotNull] PostParser.Expression_1Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.prefix_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefix_expression([NotNull] PostParser.Prefix_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.prefix_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefix_expression([NotNull] PostParser.Prefix_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.parenthesized_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesized_expression([NotNull] PostParser.Parenthesized_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.parenthesized_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesized_expression([NotNull] PostParser.Parenthesized_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.primitive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimitive_expression([NotNull] PostParser.Primitive_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.primitive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimitive_expression([NotNull] PostParser.Primitive_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.prefix_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefix_operator([NotNull] PostParser.Prefix_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.prefix_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefix_operator([NotNull] PostParser.Prefix_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.comparison_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison_operator([NotNull] PostParser.Comparison_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.comparison_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison_operator([NotNull] PostParser.Comparison_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.shift_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShift_operator([NotNull] PostParser.Shift_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.shift_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShift_operator([NotNull] PostParser.Shift_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>KEYWD</c>
	/// labeled alternative in <see cref="PostParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKEYWD([NotNull] PostParser.KEYWDContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>KEYWD</c>
	/// labeled alternative in <see cref="PostParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKEYWD([NotNull] PostParser.KEYWDContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifier_IDENTIFIER</c>
	/// labeled alternative in <see cref="PostParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier_IDENTIFIER([NotNull] PostParser.Identifier_IDENTIFIERContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifier_IDENTIFIER</c>
	/// labeled alternative in <see cref="PostParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier_IDENTIFIER([NotNull] PostParser.Identifier_IDENTIFIERContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] PostParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] PostParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.call_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall_stmt([NotNull] PostParser.Call_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.call_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall_stmt([NotNull] PostParser.Call_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.goto_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoto_stmt([NotNull] PostParser.Goto_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.goto_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoto_stmt([NotNull] PostParser.Goto_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.end_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnd_stmt([NotNull] PostParser.End_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.end_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnd_stmt([NotNull] PostParser.End_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.endloop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEndloop_stmt([NotNull] PostParser.Endloop_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.endloop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEndloop_stmt([NotNull] PostParser.Endloop_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.reloop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReloop_stmt([NotNull] PostParser.Reloop_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.reloop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReloop_stmt([NotNull] PostParser.Reloop_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.declare_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclare_stmt([NotNull] PostParser.Declare_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.declare_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclare_stmt([NotNull] PostParser.Declare_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.type_info"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_info([NotNull] PostParser.Type_infoContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.type_info"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_info([NotNull] PostParser.Type_infoContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.dimension_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDimension_suffix([NotNull] PostParser.Dimension_suffixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.dimension_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDimension_suffix([NotNull] PostParser.Dimension_suffixContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.bound_pair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBound_pair([NotNull] PostParser.Bound_pairContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.bound_pair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBound_pair([NotNull] PostParser.Bound_pairContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.bound_pair_commalist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBound_pair_commalist([NotNull] PostParser.Bound_pair_commalistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.bound_pair_commalist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBound_pair_commalist([NotNull] PostParser.Bound_pair_commalistContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.lower_bound"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLower_bound([NotNull] PostParser.Lower_boundContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.lower_bound"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLower_bound([NotNull] PostParser.Lower_boundContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.upper_bound"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpper_bound([NotNull] PostParser.Upper_boundContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.upper_bound"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpper_bound([NotNull] PostParser.Upper_boundContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute([NotNull] PostParser.AttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute([NotNull] PostParser.AttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BIN</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBIN([NotNull] PostParser.BINContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BIN</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBIN([NotNull] PostParser.BINContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DEC</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDEC([NotNull] PostParser.DECContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DEC</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDEC([NotNull] PostParser.DECContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PTR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPTR([NotNull] PostParser.PTRContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PTR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPTR([NotNull] PostParser.PTRContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BIT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBIT([NotNull] PostParser.BITContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BIT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBIT([NotNull] PostParser.BITContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CHAR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCHAR([NotNull] PostParser.CHARContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CHAR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCHAR([NotNull] PostParser.CHARContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>STR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSTR([NotNull] PostParser.STRContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>STR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSTR([NotNull] PostParser.STRContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ENT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterENT([NotNull] PostParser.ENTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ENT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitENT([NotNull] PostParser.ENTContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FIX</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFIX([NotNull] PostParser.FIXContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FIX</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFIX([NotNull] PostParser.FIXContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FLT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFLT([NotNull] PostParser.FLTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FLT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFLT([NotNull] PostParser.FLTContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OFF</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOFF([NotNull] PostParser.OFFContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OFF</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOFF([NotNull] PostParser.OFFContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VNG</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVNG([NotNull] PostParser.VNGContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VNG</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVNG([NotNull] PostParser.VNGContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>COR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCOR([NotNull] PostParser.CORContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>COR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCOR([NotNull] PostParser.CORContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>COF</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCOF([NotNull] PostParser.COFContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>COF</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCOF([NotNull] PostParser.COFContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BLTN</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBLTN([NotNull] PostParser.BLTNContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BLTN</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBLTN([NotNull] PostParser.BLTNContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>INTR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterINTR([NotNull] PostParser.INTRContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>INTR</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitINTR([NotNull] PostParser.INTRContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IDENT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIDENT([NotNull] PostParser.IDENTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IDENT</c>
	/// labeled alternative in <see cref="PostParser.data_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIDENT([NotNull] PostParser.IDENTContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.precision"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrecision([NotNull] PostParser.PrecisionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.precision"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrecision([NotNull] PostParser.PrecisionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.number_of_digits"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber_of_digits([NotNull] PostParser.Number_of_digitsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.number_of_digits"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber_of_digits([NotNull] PostParser.Number_of_digitsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.scale_factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScale_factor([NotNull] PostParser.Scale_factorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.scale_factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScale_factor([NotNull] PostParser.Scale_factorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.max_length"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMax_length([NotNull] PostParser.Max_lengthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.max_length"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMax_length([NotNull] PostParser.Max_lengthContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.based"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBased([NotNull] PostParser.BasedContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.based"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBased([NotNull] PostParser.BasedContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.defined"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefined([NotNull] PostParser.DefinedContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.defined"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefined([NotNull] PostParser.DefinedContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.entry_information"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntry_information([NotNull] PostParser.Entry_informationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.entry_information"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntry_information([NotNull] PostParser.Entry_informationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.coprocedure_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCoprocedure_specifier([NotNull] PostParser.Coprocedure_specifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.coprocedure_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCoprocedure_specifier([NotNull] PostParser.Coprocedure_specifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.parameter_name_commalist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter_name_commalist([NotNull] PostParser.Parameter_name_commalistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.parameter_name_commalist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter_name_commalist([NotNull] PostParser.Parameter_name_commalistContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.returns_descriptor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturns_descriptor([NotNull] PostParser.Returns_descriptorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.returns_descriptor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturns_descriptor([NotNull] PostParser.Returns_descriptorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.return_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_stmt([NotNull] PostParser.Return_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.return_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_stmt([NotNull] PostParser.Return_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.if_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_stmt([NotNull] PostParser.If_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.if_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_stmt([NotNull] PostParser.If_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.then_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThen_clause([NotNull] PostParser.Then_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.then_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThen_clause([NotNull] PostParser.Then_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.else_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElse_clause([NotNull] PostParser.Else_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.else_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElse_clause([NotNull] PostParser.Else_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.elif_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElif_clause([NotNull] PostParser.Elif_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.elif_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElif_clause([NotNull] PostParser.Elif_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BASIC_LOOP</c>
	/// labeled alternative in <see cref="PostParser.loop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBASIC_LOOP([NotNull] PostParser.BASIC_LOOPContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BASIC_LOOP</c>
	/// labeled alternative in <see cref="PostParser.loop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBASIC_LOOP([NotNull] PostParser.BASIC_LOOPContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WHILE_UNTIL</c>
	/// labeled alternative in <see cref="PostParser.loop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWHILE_UNTIL([NotNull] PostParser.WHILE_UNTILContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WHILE_UNTIL</c>
	/// labeled alternative in <see cref="PostParser.loop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWHILE_UNTIL([NotNull] PostParser.WHILE_UNTILContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UNTIL_WHILE</c>
	/// labeled alternative in <see cref="PostParser.loop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUNTIL_WHILE([NotNull] PostParser.UNTIL_WHILEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UNTIL_WHILE</c>
	/// labeled alternative in <see cref="PostParser.loop_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUNTIL_WHILE([NotNull] PostParser.UNTIL_WHILEContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.while_option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_option([NotNull] PostParser.While_optionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.while_option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_option([NotNull] PostParser.While_optionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.until_option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUntil_option([NotNull] PostParser.Until_optionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.until_option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUntil_option([NotNull] PostParser.Until_optionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.define_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefine_stmt([NotNull] PostParser.Define_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.define_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefine_stmt([NotNull] PostParser.Define_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.numeric_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumeric_literal([NotNull] PostParser.Numeric_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.numeric_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumeric_literal([NotNull] PostParser.Numeric_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.hexadecimal_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexadecimal_literal([NotNull] PostParser.Hexadecimal_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.hexadecimal_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexadecimal_literal([NotNull] PostParser.Hexadecimal_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.octal_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOctal_literal([NotNull] PostParser.Octal_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.octal_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOctal_literal([NotNull] PostParser.Octal_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.decimal_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimal_literal([NotNull] PostParser.Decimal_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.decimal_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimal_literal([NotNull] PostParser.Decimal_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PostParser.binary_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinary_literal([NotNull] PostParser.Binary_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PostParser.binary_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinary_literal([NotNull] PostParser.Binary_literalContext context);
}
