uses system.os;
uses hardware.cpu.arm;

/* 
   A scope can be designated as private and that then means that 
   every defintion of that scope in any other source files
   must also be private, which is checked at compile time.
*/

scope system.utilities;

   dcl master_table bin(31);

   procedure main (arg);

      /* This is sample code */

      dcl rates as baud_rates;

      dcl I bin(15);
      dcl J bin(15);
      dcl S bin(31);
      dcl A(1024) bit(8); // 1 KByte
      dcl root ptr;
      dcl status bin(15);
      dcl rate float dec(15);

      type baud_rates enum string(31);
           first = "telephone";
           second;
           third;
           fourth;
      end;

      type baud_rates enum bit(8);
           first  = 1010 0011:b;
           second = 1110 1101:b;
           third  = 1101 0111:b;
           fourth = 0010 1100:b;
      end;

      type flag_table         structure;  
            root              pointer;
            depth             fixed bin(15);
               subunit        structure;
                  goofy       pointer;
               end;
            end;   


      type outer struct;  
         cpu_id              bin(31);
         inner struct;
            cpu_mode         bin(31); 
            cpu_rev          bin(15);
            large as         Header;
            flag_table struct;  
               root          pointer;
               depth         fixed bin(15);
               subunit struct;
                  goofy      pointer;
               end;
            end;   
            label            string(64);
         end;
         owner               string(64);
         speed(100) as       baud_rates;
         counter             string(32);
      end;

      dcl disk(10) as bootmap stack;    

      dcl block as outer;  

      block.inner.flag_table.root = NULL;

      disk.header.details.cpu_id = 3F0A:h;

      lit = FACE;
      lit = FACE:H;
      lit = F123:h;
      lit = F123;

      rate = 23 ^ 4 ;

      type_a = "Even Greek Γεια σου string literals can be single quoted like this";

      type_b = ""or double quoted like this, with embedded single quoted text "like this" see?"";

      name = ""demonstration_network_controller"" ;

      title = ""This is the "best in class" 
      multiline literal 
      language system"" ;

      call sys$announce_device(name, status); // in system.os namespace

      if status ~= test > 100 then
         return;
      end;

      if arg < roof < start then
         return;
         end;

      Καλημέρα = "How do you do";

      Ευχαριστώ = "Many thanks";

      call sys$install_platform(title);

      root = sys$get_system_bootroot(name);

      call sys$validate_authority(root);

      goto cycle_loop;

   @cycle_loop

      a = ~(b | c);

      // t = x <|> y;

      I = 100;

      if I > 0 then
         goto cycle_loop;
      end;
      
      I = sys$get_updated_count(J);

   @setpoint(0)

      loop while (I >= J);
         I = get_updated_count(J);
      end loop;

      a = a @>> 2;

      a = a <<@ 2;

      if I = 123 & J = 321 then
         I = 0;
         goto setpoint(I); 
      elif J + I > J * I then
         goto cycle_loop;
      elif J = sqrt(100) then
         ;
      end if;

      if = 100;

      call get_latest_faulting_stack(S);

      if S ~= 0 then
         // Crawl the stack chain looking for the designated handler 
         call sys$stack_crawler(S);
      end;

      // set S to the sentinel for the next operation 

      S = F5D3 03A2:H; // we need to ensure this sentinel is not allocated to any other device types

      call sys$reinitialize_firmware_table(S);

      call sys$sleep (1024,state);

      select (state);
         when all (1, validator(123))
               return;
         when (2)
               call reset_dma;
               return;
         when (123)
               when = select;
               select = when;
         else
               goto cycle_loop;
      end;

      goto cycle_loop ;

      //-------------------------------------------------------
      // This proc walks the stack 'upwards' to see if there
      // is a handler defined for the specified fault IDENT
      //-------------------------------------------------------
      procedure sys$stack_crawler (handler_id) recursive;

         arg handler_id bin(31);

      end;

      // Only call this if we kmow there's no active services still running 
      procedure sys$reinitialize_firmware_table(table);

         arg table bin(31);

         arg = 23;

      end proc;

      procedure sys$timer_callback (context) interrupt;

   

         dcl aaa bin(15);

            goto setpoint(0);

      end proc;
   

   end proc;

end scope;

scope system.kernel private ;



end;


